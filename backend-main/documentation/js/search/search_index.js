var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.259,1,2.226]],["body/controllers/AppController.html",[0,2.074,1,3.668,2,1.815,3,0.386,4,0.34,5,0.34,6,3.8,7,0.386,8,1.461,9,5.267,10,2.107,11,0.027,12,0.89,13,4.507,14,1.108,15,1.092,16,0.79,17,3.335,18,2.709,19,2.709,20,0.959,21,3.294,22,3.8,23,0.386,24,0.092,25,1.369,26,2.28,27,2.709,28,1.19,29,4.507,30,0.018,31,0.022,32,0.018]],["title/modules/AppModule.html",[33,1.456,34,2.226]],["body/modules/AppModule.html",[1,3.653,2,1.989,3,0.323,4,0.284,5,0.284,11,0.027,16,0.919,20,0.802,21,3.427,22,3.177,23,0.323,24,0.077,30,0.015,31,0.02,32,0.015,33,2.389,34,4.419,35,1.907,36,1.907,37,2.266,38,2.266,39,1.907,40,3.313,41,2.266,42,3.177,43,3.177,44,3.177,45,3.746,46,3.746,47,3.427,48,2.97,49,2.266,50,2.266,51,3.768,52,3.274,53,3.768,54,3.768,55,2.788,56,1.412,57,3.768,58,3.177,59,3.177,60,3.177,61,3.768]],["title/injectables/AppService.html",[21,1.847,62,0.769]],["body/injectables/AppService.html",[3,0.401,4,0.353,5,0.353,7,0.401,8,1.495,9,5.334,11,0.027,12,0.923,14,1.15,15,1.117,16,0.667,20,0.995,21,3.113,23,0.401,24,0.095,28,1.235,30,0.019,31,0.022,32,0.019,62,1.296,63,2.028,64,3.944,65,4.678,66,4.678,67,3.461,68,3.461]],["title/controllers/AuthController.html",[0,1.259,69,2.226]],["body/controllers/AuthController.html",[0,1.053,2,1.131,3,0.241,4,0.212,5,0.212,7,0.241,8,1.066,10,2.209,11,0.028,12,0.933,14,1.162,16,0.813,17,3.496,18,1.689,19,1.689,20,0.598,23,0.241,24,0.057,26,1.421,27,2.427,28,1.549,30,0.011,31,0.016,32,0.011,69,2.675,70,2.369,71,1.862,72,2.078,73,2.462,74,3.131,75,4.724,76,4.724,77,2.809,78,3.522,79,2.809,80,2.809,81,1.081,82,0.933,83,0.479,84,1.081,85,3.527,86,2.809,87,4.724,88,4.036,89,2.809,90,2.809,91,4.036,92,2.809,93,2.391,94,2.078,95,3.131,96,1.862,97,2.078,98,1.689,99,1.862,100,3.403,101,1.862,102,2.078,103,1.862,104,2.809,105,1.903,106,2.809,107,2.809,108,2.809,109,2.809,110,1.545,111,2.809,112,2.809,113,2.809,114,1.463,115,3.423,116,2.239,117,4.036,118,2.809,119,2.987,120,2.675,121,2.84,122,1.568,123,2.809,124,2.369,125,1.862,126,2.078,127,2.809,128,2.809,129,2.809,130,2.809,131,2.809,132,2.809,133,2.809,134,2.809,135,4.036,136,2.078,137,2.369]],["title/modules/AuthModule.html",[33,1.456,45,2.019]],["body/modules/AuthModule.html",[2,1.9,3,0.301,4,0.265,5,0.265,11,0.027,16,0.917,20,0.748,23,0.301,24,0.071,30,0.014,31,0.019,32,0.014,33,2.307,35,1.778,36,1.778,37,2.113,38,2.113,39,1.778,40,3.2,41,3.2,45,3.99,47,3.36,48,2.836,49,2.113,50,2.113,52,3.126,58,2.964,69,3.528,93,3.338,94,2.601,138,2.964,139,2.964,140,3.515,141,2.964,142,3.673,143,3.673,144,3.515,145,4.717,146,1.933,147,3.515,148,3.515,149,3.515,150,2.113,151,2.329,152,2.964,153,3.515,154,3.515,155,2.601,156,2.964,157,3.515,158,3.515,159,3.515]],["title/injectables/AuthService.html",[62,0.769,93,1.7]],["body/injectables/AuthService.html",[3,0.21,4,0.185,5,0.185,7,0.21,8,0.965,11,0.028,12,1.022,14,1.191,15,1.072,16,0.775,17,1.815,20,0.522,23,0.21,24,0.05,25,1.11,26,1.85,28,1.433,30,0.01,31,0.017,32,0.01,59,2.069,60,2.069,62,0.837,63,1.063,73,2.488,74,2.423,81,1.185,82,1.022,83,0.518,84,1.185,85,1.475,93,1.85,100,2.069,105,2.187,114,1.637,116,2.353,122,1.47,150,1.475,155,1.815,160,1.815,161,3.656,162,3.656,163,3.656,164,2.453,165,4.161,166,2.453,167,3.656,168,2.453,169,2.453,170,3.432,171,2.986,172,2.453,173,2.244,174,2.911,175,2.453,176,2.453,177,3.656,178,4.369,179,2.453,180,1.815,181,2.069,182,1.815,183,2.01,184,2.069,185,3.209,186,2.069,187,2.453,188,2.453,189,2.453,190,2.453,191,2.453,192,2.453,193,2.069,194,2.453,195,2.453,196,2.453,197,3.082,198,2.453,199,2.453,200,2.453,201,2.453,202,4.369,203,4.369,204,2.453,205,2.453,206,0.988,207,2.453,208,2.453,209,2.453,210,1.815,211,1.626,212,1.815,213,2.069,214,2.423,215,2.453,216,2.705,217,3.082,218,2.198,219,3.082,220,2.453,221,1.241,222,2.453,223,2.453,224,2.453,225,2.453,226,2.453,227,2.453,228,2.453,229,1.626,230,1.815,231,2.453,232,2.453,233,2.453,234,1.815,235,2.453,236,5.178,237,1.815,238,2.453,239,2.453,240,2.453,241,2.453,242,2.453,243,2.453]],["title/interfaces/IFeedback.html",[244,1.259,245,2.226]],["body/interfaces/IFeedback.html",[3,0.395,4,0.348,5,0.348,7,0.395,11,0.027,15,1.243,23,0.481,30,0.018,31,0.022,32,0.018,83,0.666,121,3.549,244,2.104,245,3.721,246,2.774,247,3.414,248,2.433,249,5.309,250,4.173,251,3.89,252,3.414]],["title/interfaces/ITestResult.html",[244,1.259,250,2.226]],["body/interfaces/ITestResult.html",[3,0.395,4,0.348,5,0.348,7,0.395,11,0.027,15,1.243,23,0.481,30,0.018,31,0.022,32,0.018,83,0.666,121,3.549,244,2.104,245,3.058,246,2.774,247,3.414,248,2.433,249,3.89,250,4.011,251,5.309,252,4.478]],["title/injectables/JwtAuthGuard.html",[62,0.769,253,1.847]],["body/injectables/JwtAuthGuard.html",[3,0.522,4,0.287,5,0.287,7,0.326,8,1.311,11,0.027,12,0.98,14,1.222,16,0.709,20,0.808,23,0.326,24,0.077,28,1.311,30,0.015,31,0.02,32,0.015,62,1.137,63,1.647,81,1.137,82,0.98,83,0.451,84,1.137,122,1.849,146,2.09,206,1.53,216,4.342,221,1.923,253,2.731,254,3.327,255,2.812,256,4.188,257,4.967,258,4.188,259,4.948,260,3.8,261,3.204,262,4.967,263,3.8,264,4.188,265,3.204,266,2.519,267,3.8,268,3.8,269,3.8,270,3.8,271,3.8,272,3.204,273,3.8,274,3.8,275,3.8,276,3.8,277,3.8,278,4.188,279,3.8,280,3.8,281,3.8]],["title/injectables/JwtStrategy.html",[62,0.769,142,2.019]],["body/injectables/JwtStrategy.html",[3,0.343,4,0.302,5,0.302,7,0.343,8,1.356,11,0.027,12,1.014,14,0.984,16,0.854,20,0.851,23,0.343,24,0.081,25,1.722,28,1.057,30,0.016,31,0.02,32,0.016,62,1.176,63,1.735,73,2.284,81,0.916,82,0.79,83,0.475,84,0.916,142,3.088,146,2.201,151,2.652,152,3.374,156,3.374,173,1.735,197,3.374,214,2.652,221,2.025,266,2.652,282,3.374,283,4.331,284,4.002,285,5.136,286,4.002,287,4.002,288,3.374,289,2.961,290,3.374,291,3.374,292,3.374,293,3.374,294,4.002,295,4.002,296,4.002,297,3.8,298,4.002,299,4.002,300,4.002,301,4.002,302,4.002,303,4.002,304,4.002]],["title/injectables/LocalAuthGuard.html",[62,0.769,101,2.226]],["body/injectables/LocalAuthGuard.html",[3,0.421,4,0.371,5,0.371,11,0.027,16,0.832,20,1.046,23,0.421,24,0.1,30,0.019,31,0.023,32,0.019,62,1.335,63,2.13,101,3.865,146,2.703,255,3.637,265,4.144,266,3.257,305,4.144,306,4.915]],["title/injectables/LocalStrategy.html",[62,0.769,143,2.019]],["body/injectables/LocalStrategy.html",[3,0.329,4,0.29,5,0.29,7,0.329,8,1.321,11,0.027,12,0.988,14,0.945,15,1.237,16,0.841,20,0.818,23,0.329,24,0.078,25,1.167,28,1.015,30,0.015,31,0.02,32,0.015,62,1.145,63,1.666,73,2.241,81,1.145,82,0.988,83,0.593,84,1.145,93,3.17,94,2.844,102,2.844,110,2.113,114,1.088,116,1.666,122,1.689,143,3.008,146,2.113,173,1.666,174,3.008,206,1.548,264,4.219,266,2.547,278,3.24,283,4.219,288,3.24,289,2.844,291,3.24,292,3.24,293,3.24,307,3.24,308,3.843,309,3.843,310,5.003,311,3.241,312,3.843,313,3.843]],["title/guards/RolesGuard.html",[314,2.485,315,2.226]],["body/guards/RolesGuard.html",[3,0.313,4,0.276,5,0.276,7,0.313,8,1.279,11,0.028,12,0.956,14,0.899,16,0.858,20,0.778,23,0.313,24,0.074,25,1.11,28,1.526,30,0.014,31,0.019,32,0.014,62,1.109,81,1.109,82,0.956,83,0.574,84,1.109,110,2.011,114,1.637,122,1.11,125,2.424,150,2.198,165,3.583,206,1.473,237,2.706,252,3.583,256,4.874,258,4.083,259,4.874,261,3.083,297,3.583,315,3.21,316,3.657,317,3.083,318,3.657,319,6.179,320,3.657,321,3.657,322,2.424,323,1.71,324,3.657,325,2.706,326,3.657,327,3.657,328,4.843,329,3.657,330,3.657,331,3.657,332,3.657,333,3.657,334,3.657,335,3.657,336,3.657,337,3.657,338,3.657]],["title/classes/Task.html",[24,0.068,339,1.571]],["body/classes/Task.html",[3,0.231,4,0.203,5,0.203,7,0.231,10,2.944,11,0.027,12,1.254,15,1.351,16,0.558,23,0.395,24,0.055,25,1.189,30,0.011,31,0.016,32,0.011,56,1.009,81,0.616,82,0.531,83,0.774,84,0.616,114,0.762,248,1.697,339,2.156,340,1.259,341,1.784,342,5.612,343,5.612,344,4.153,345,4.153,346,5.379,347,3.98,348,3.72,349,5.612,350,4.733,351,3.374,352,3.98,353,2.27,354,2.692,355,4.041,356,2.692,357,2.692,358,2.692,359,2.692,360,2.692,361,2.692,362,2.692,363,2.692,364,2.692,365,2.692,366,2.692,367,2.692,368,1.981,369,1.618,370,2.353,371,1.259,372,1.992,373,2.692,374,1.784,375,2.27]],["title/classes/TaskCollection.html",[24,0.068,376,1.7]],["body/classes/TaskCollection.html",[3,0.257,4,0.226,5,0.226,7,0.257,10,2.856,11,0.027,12,1.226,15,1.343,16,0.604,23,0.42,24,0.061,25,1.285,30,0.012,31,0.017,32,0.012,56,1.125,81,0.687,82,0.592,83,0.773,84,0.687,114,0.85,244,1.125,248,1.834,340,1.404,344,4.307,345,4.307,347,4.151,348,3.858,351,3.5,352,4.151,353,2.531,355,3.984,368,2.141,369,1.805,370,2.544,371,1.404,376,2.48,377,1.805,378,3.858,379,3.858,380,3.002,381,3.002,382,3.002,383,3.002,384,3.002,385,3.002,386,3.002,387,3.002,388,3.002,389,1.989,390,1.989,391,2.221,392,1.519,393,2.531,394,2.531,395,1.805,396,2.221]],["title/controllers/TaskCollectionController.html",[0,1.259,397,2.226]],["body/controllers/TaskCollectionController.html",[0,0.661,2,0.711,3,0.151,4,0.133,5,0.133,7,0.151,8,0.748,10,2.332,11,0.028,12,0.984,14,1.226,15,1.209,16,0.711,18,1.061,19,1.061,20,0.375,23,0.151,24,0.036,27,1.061,28,1.553,30,0.007,31,0.011,32,0.007,67,2.095,68,1.306,71,1.169,72,1.306,73,2.467,74,1.169,81,1.086,82,0.937,83,0.563,84,1.086,85,3.803,95,2.691,96,1.169,98,1.061,99,1.169,103,1.169,110,0.97,114,1.554,115,2.351,116,1.927,119,1.306,120,2.946,121,3.083,125,1.169,126,3.004,136,1.306,170,1.877,171,2.445,173,1.227,183,0.97,206,1.14,212,1.306,214,1.877,221,2.249,229,1.877,230,2.095,253,0.97,254,1.061,339,2.501,376,2.706,397,1.877,398,1.488,399,2.832,400,2.388,401,4.06,402,2.832,403,2.625,404,3.547,405,2.388,406,1.764,407,2.991,408,2.388,409,1.764,410,1.488,411,2.388,412,1.764,413,4.371,414,1.764,415,1.764,416,2.388,417,1.764,418,1.764,419,4.51,420,2.388,421,1.764,422,1.764,423,4.445,424,2.832,425,1.764,426,1.764,427,2.625,428,2.388,429,1.764,430,1.795,431,1.306,432,1.169,433,1.306,434,2.133,435,1.488,436,2.133,437,1.764,438,2.095,439,1.169,440,1.488,441,1.488,442,1.488,443,1.488,444,1.488,445,1.488,446,1.488,447,1.488,448,1.488,449,1.488,450,1.488,451,1.488,452,1.488,453,1.306,454,1.488,455,1.764,456,1.764,457,1.488,458,1.764,459,1.764,460,1.764,461,1.488,462,1.764,463,2.388,464,2.388,465,1.488,466,1.557,467,1.488,468,2.388,469,2.388,470,2.388,471,2.388,472,2.388,473,1.764,474,2.946,475,2.991,476,1.764,477,1.764,478,1.306,479,2.991,480,3.423,481,2.388,482,1.488,483,1.488,484,1.764,485,1.764,486,1.488,487,1.764,488,2.388,489,1.764,490,1.764,491,1.488,492,1.764,493,1.764,494,2.388,495,1.764,496,1.764,497,1.488,498,1.764,499,1.764,500,2.388]],["title/controllers/TaskController.html",[0,1.259,501,2.226]],["body/controllers/TaskController.html",[0,0.618,2,0.664,3,0.141,4,0.124,5,0.124,7,0.141,8,0.708,10,2.443,11,0.028,12,1.031,14,1.285,15,1.203,16,0.721,18,0.991,19,0.991,20,0.351,23,0.141,24,0.034,27,0.991,28,1.565,30,0.007,31,0.011,32,0.007,67,1.984,71,1.093,72,1.22,73,2.533,74,1.093,81,1.157,82,1.031,83,0.599,84,1.157,85,3.8,95,3.049,96,1.093,97,1.22,98,0.991,99,1.093,103,1.093,105,0.664,110,0.907,114,1.216,115,3.049,116,2.19,119,1.22,120,2.846,121,3.082,125,1.777,126,2.887,136,1.22,137,1.39,170,1.093,171,3.082,173,0.715,180,1.22,183,0.907,206,1.364,210,1.22,212,1.22,213,1.39,214,1.093,221,1.357,229,1.093,230,1.22,253,0.907,254,0.991,339,2.926,351,0.991,378,1.093,408,2.26,411,2.26,416,2.26,419,4.089,420,2.26,427,3.404,428,2.26,430,1.714,431,1.22,432,1.093,434,2.346,435,1.39,436,2.037,438,1.984,439,1.093,440,1.39,441,1.39,442,1.39,443,1.39,444,1.39,445,1.39,446,1.39,447,1.39,448,1.39,449,1.39,450,1.39,451,1.39,452,1.39,453,1.22,454,1.39,457,1.39,461,2.856,463,1.39,464,1.39,465,2.26,466,0.907,467,1.39,468,1.39,469,1.39,470,1.39,471,1.39,472,1.39,474,1.777,475,1.39,479,1.39,480,1.39,481,2.856,482,2.856,483,1.39,486,1.39,491,1.39,494,2.26,497,1.39,500,2.856,501,1.777,502,1.39,503,2.681,504,2.26,505,3.902,506,2.507,507,2.681,508,2.26,509,2.26,510,2.856,511,2.856,512,1.649,513,1.649,514,1.39,515,1.649,516,1.649,517,1.649,518,3.739,519,2.681,520,1.649,521,1.649,522,1.649,523,1.39,524,2.681,525,1.649,526,1.649,527,2.856,528,2.681,529,1.649,530,1.649,531,1.649,532,1.649,533,1.649,534,1.22,535,1.649,536,1.649,537,1.649,538,1.39,539,1.649,540,1.649,541,1.649,542,1.649,543,1.39,544,1.649,545,2.26,546,1.649,547,1.649,548,1.649,549,1.649,550,1.649,551,1.649,552,1.649,553,1.649,554,1.649,555,1.649,556,1.649,557,1.649,558,1.649,559,1.649,560,1.649,561,1.649,562,1.649]],["title/interfaces/TaskInCollection.html",[244,1.259,379,2.226]],["body/interfaces/TaskInCollection.html",[3,0.321,4,0.283,5,0.283,7,0.321,11,0.027,15,1.334,16,0.702,23,0.471,24,0.076,25,1.138,30,0.015,31,0.019,32,0.015,56,1.405,83,0.719,114,1.061,244,1.405,246,2.253,248,2.133,344,3.642,345,3.642,347,3.642,348,3.262,351,2.959,352,3.642,355,3.913,368,2.491,369,2.253,370,2.959,371,1.752,376,2.491,377,2.253,378,3.262,379,3.868,389,2.484,390,3.868,391,4.318,392,2.781,393,4.921,394,3.16,395,2.253,396,2.773]],["title/modules/TaskModule.html",[33,1.456,46,2.019]],["body/modules/TaskModule.html",[2,1.986,3,0.322,4,0.284,5,0.284,11,0.027,16,0.938,20,0.799,23,0.322,24,0.076,30,0.015,31,0.02,32,0.015,33,2.385,35,1.902,36,1.902,37,2.259,38,2.259,39,1.902,40,3.309,41,2.259,46,3.743,48,2.964,49,2.259,50,2.259,52,2.491,55,2.781,56,1.409,105,1.513,122,1.141,180,2.781,322,2.491,339,1.757,368,2.785,374,3.268,376,1.902,395,2.964,397,3.648,430,3.151,431,2.781,433,2.781,501,3.648,534,2.781,563,3.169,564,3.169,565,3.758,566,3.758,567,3.758,568,2.712,569,3.169,570,3.169,571,4.64,572,3.758,573,3.758,574,3.169]],["title/injectables/TaskService.html",[62,0.769,430,1.7]],["body/injectables/TaskService.html",[3,0.101,4,0.089,5,0.089,7,0.101,8,0.537,11,0.028,12,1.091,14,1.34,15,1.205,16,0.555,20,0.252,23,0.101,24,0.024,25,0.617,26,1.969,28,1.539,30,0.005,31,0.008,32,0.005,56,0.444,62,0.465,63,0.513,73,2.612,81,1.227,82,1.075,83,0.625,84,1.227,114,1.543,116,1.686,122,0.617,170,1.77,171,2.896,174,3.608,193,3.51,206,1.567,210,0.876,218,2.863,234,2.638,237,0.876,297,0.876,339,2.413,351,0.712,371,0.554,372,0.876,376,2.106,378,2.099,389,0.785,390,2.099,391,1.504,392,1.602,400,1.714,405,1.714,407,0.998,410,1.714,413,3.281,427,2.879,430,1.028,433,0.876,439,1.347,466,2.289,474,0.785,488,1.714,504,1.714,508,1.714,509,1.714,511,1.714,514,1.714,523,1.714,527,0.998,534,0.876,543,1.714,545,1.714,569,0.998,575,0.998,576,2.032,577,2.032,578,2.032,579,3.167,580,3.167,581,2.032,582,2.032,583,2.032,584,2.032,585,2.032,586,1.184,587,4.015,588,2.67,589,2.251,590,1.184,591,2.032,592,2.032,593,1.184,594,2.032,595,1.184,596,1.184,597,1.184,598,2.032,599,1.184,600,1.184,601,1.184,602,2.032,603,1.184,604,2.032,605,1.184,606,1.184,607,1.184,608,1.184,609,1.184,610,1.184,611,1.184,612,2.032,613,1.184,614,2.032,615,1.184,616,2.032,617,1.184,618,2.032,619,1.184,620,0.998,621,0.785,622,0.712,623,1.184,624,1.184,625,1.184,626,2.032,627,1.184,628,1.184,629,1.184,630,1.184,631,1.184,632,1.184,633,1.184,634,1.184,635,2.67,636,1.184,637,2.032,638,1.184,639,1.184,640,2.032,641,3.167,642,3.167,643,3.167,644,1.184,645,1.184,646,1.184,647,1.184,648,1.184,649,2.032,650,1.184,651,1.184,652,1.184,653,0.998,654,1.184,655,1.184,656,1.184,657,1.184,658,1.184,659,1.184,660,1.184,661,1.184,662,2.032,663,2.032,664,3.167,665,1.184,666,2.032,667,3.167,668,1.184,669,2.67,670,2.032,671,1.184,672,1.184,673,2.67,674,2.032,675,1.184,676,1.184,677,1.184,678,1.184,679,2.032,680,1.184,681,1.184,682,1.184,683,1.184,684,1.184,685,1.184,686,1.184,687,1.184,688,1.184,689,1.184,690,1.184,691,1.184,692,1.184,693,1.184,694,1.184,695,1.184,696,1.184,697,1.184,698,1.184,699,2.251,700,2.67,701,2.251,702,2.67,703,3.167,704,3.565,705,2.032,706,1.184,707,3.006,708,2.032,709,1.184,710,1.184,711,2.032,712,2.032,713,2.032,714,2.032,715,1.184,716,2.032,717,1.184,718,1.184,719,1.184,720,1.184,721,1.184,722,1.184,723,1.184,724,1.184,725,1.184,726,2.032,727,1.184,728,1.184,729,1.184,730,2.67,731,2.032,732,1.184,733,2.032,734,2.032,735,1.184,736,1.184,737,1.184,738,1.184,739,1.184,740,1.184,741,2.67,742,2.032,743,1.184,744,1.184,745,1.184,746,1.184,747,1.184]],["title/classes/User.html",[24,0.068,122,1.02]],["body/classes/User.html",[3,0.299,4,0.263,5,0.263,7,0.299,10,2.913,11,0.027,12,1.23,15,1.291,16,0.669,23,0.486,24,0.071,30,0.014,31,0.019,32,0.014,56,1.307,82,1.047,83,0.751,114,0.988,122,1.61,171,1.918,173,2.298,244,1.307,248,2.034,311,2.916,323,2.479,340,1.631,355,4.007,368,2.374,369,2.097,370,2.821,371,1.631,392,1.765,466,1.918,568,1.918,621,2.312,622,2.097,707,3.956,748,2.097,749,3.515,750,4.471,751,3.487,752,3.487,753,3.487,754,3.487,755,3.924,756,3.487,757,3.487,758,3.487,759,2.581]],["title/classes/UserDTO.html",[24,0.068,78,1.847]],["body/classes/UserDTO.html",[3,0.326,4,0.287,5,0.287,7,0.326,11,0.026,12,1.233,15,1.355,23,0.326,24,0.077,25,1.508,30,0.015,31,0.02,32,0.015,78,2.731,81,0.87,82,0.75,83,0.741,84,0.87,173,2.639,211,4.486,248,2.153,311,3.348,323,2.847,340,1.777,390,3.889,749,4.036,760,3.204,761,3.8,762,3.8,763,3.8,764,3.8,765,3.8,766,3.8,767,3.8]],["title/controllers/UsersController.html",[0,1.259,768,2.226]],["body/controllers/UsersController.html",[0,0.987,2,1.061,3,0.226,4,0.199,5,0.199,7,0.226,8,1.017,10,2.605,11,0.028,12,1.1,14,1.37,15,0.761,16,0.821,18,1.584,19,1.584,20,0.56,23,0.226,24,0.054,27,1.584,28,1.471,30,0.01,31,0.015,32,0.01,71,1.746,73,2.423,78,3.481,81,1.043,82,0.899,83,0.54,84,1.043,85,3.618,95,3.322,96,1.746,97,1.949,98,2.739,99,1.746,103,1.746,105,1.835,110,1.449,114,1.29,115,3.692,116,1.974,120,3.019,121,2.505,122,1.827,124,2.221,150,1.584,165,1.949,253,1.449,254,1.584,311,2.119,323,1.802,432,3.019,438,2.851,768,2.554,769,2.221,770,3.841,771,3.853,772,5.012,773,5.012,774,5.012,775,4.555,776,2.634,777,3.853,778,2.634,779,2.634,780,3.841,781,2.634,782,3.853,783,2.634,784,3.853,785,2.634,786,2.634,787,2.634,788,2.634,789,2.634,790,1.949,791,2.634,792,2.221,793,2.221,794,2.634,795,2.634,796,2.221,797,2.634,798,2.634,799,2.634,800,2.634,801,4.555,802,2.634,803,2.634,804,2.634,805,2.634,806,2.634]],["title/modules/UsersModule.html",[33,1.456,47,1.847]],["body/modules/UsersModule.html",[2,2.026,3,0.332,4,0.292,5,0.292,11,0.027,16,0.912,20,0.825,23,0.332,24,0.079,30,0.015,31,0.02,32,0.015,33,2.421,35,1.961,36,1.961,37,2.33,38,2.33,39,1.961,40,3.359,41,3.359,47,3.515,48,3.025,49,2.33,50,2.33,52,2.569,55,2.868,56,1.453,105,2.696,315,3.335,322,2.569,368,1.961,568,2.132,570,4.242,571,3.268,574,3.268,768,3.703,793,3.268,807,3.268,808,3.268,809,3.268,810,3.876,811,3.876,812,3.268,813,3.876,814,3.876,815,3.876,816,3.876]],["title/injectables/UsersService.html",[62,0.769,105,1.353]],["body/injectables/UsersService.html",[3,0.19,4,0.168,5,0.168,7,0.19,8,0.895,11,0.028,12,1.134,14,1.379,15,1.134,16,0.746,20,0.472,23,0.19,24,0.045,25,0.674,26,1.124,28,1.48,30,0.009,31,0.013,32,0.009,56,0.832,62,0.776,63,0.963,73,2.642,78,3.485,81,1.283,82,1.107,83,0.665,84,1.283,98,2.473,105,1.366,114,1.54,116,2.266,122,1.587,173,2.149,174,3.524,181,1.872,182,1.643,184,3.882,206,1.657,218,2.768,234,1.643,311,2.727,323,1.038,371,1.038,432,2.726,439,2.247,538,2.859,587,3.882,589,2.859,620,1.872,699,1.872,749,1.472,770,2.859,792,1.872,812,1.872,817,1.872,818,3.391,819,4.604,820,3.391,821,3.391,822,2.221,823,2.221,824,3.391,825,2.221,826,3.391,827,2.221,828,2.221,829,2.221,830,4.113,831,3.391,832,2.221,833,2.221,834,2.221,835,2.221,836,3.391,837,2.221,838,3.391,839,2.221,840,2.221,841,2.221,842,4.604,843,2.221,844,2.221,845,2.221,846,2.221,847,2.221,848,2.221,849,4.604,850,3.391,851,3.391,852,4.604,853,3.391,854,2.221,855,2.221,856,2.221,857,2.221,858,2.221,859,2.221,860,1.335,861,2.221,862,3.391,863,3.391,864,3.391,865,2.221,866,2.221,867,2.221,868,2.221,869,2.221,870,2.221,871,2.221]],["title/coverage.html",[872,3.384]],["body/coverage.html",[0,2.008,1,1.767,5,0.201,6,2.248,11,0.027,21,1.466,24,0.117,30,0.011,31,0.015,32,0.011,39,1.349,62,1.355,64,2.248,69,1.767,70,2.248,78,1.466,83,0.316,93,1.349,101,1.767,105,1.074,122,0.809,142,1.603,143,1.603,151,1.767,160,2.875,183,1.466,185,1.767,206,1.074,244,1.889,245,1.767,247,2.875,250,1.767,253,1.466,254,1.603,255,2.875,282,2.248,305,2.248,307,2.248,314,1.972,315,1.767,317,2.248,325,1.972,339,1.246,341,2.576,374,1.767,376,1.349,377,2.757,379,1.767,395,1.603,397,1.767,398,2.248,403,2.875,430,1.349,434,1.603,436,1.603,501,1.767,502,2.248,506,2.875,568,1.466,575,2.248,622,1.603,701,5.805,748,2.757,760,2.248,768,1.767,769,2.248,790,1.972,817,2.248,872,1.972,873,2.665,874,2.665,875,2.665,876,3.886,877,3.886,878,2.665,879,6.035,880,6.52,881,2.248,882,5.918,883,2.248,884,4.586,885,3.277,886,2.248,887,5.774,888,3.964,889,2.248,890,2.248,891,2.248,892,3.277,893,2.248,894,4.586,895,2.665,896,2.665,897,2.875,898,2.665,899,1.972,900,3.886,901,2.665,902,2.665]],["title/dependencies.html",[36,2.043,903,2.81]],["body/dependencies.html",[11,0.028,20,0.888,24,0.085,30,0.017,31,0.021,32,0.017,36,2.112,56,1.565,102,3.088,146,2.295,150,2.509,182,3.088,185,2.767,289,4.28,290,3.52,322,2.767,371,1.952,453,3.088,904,4.174,905,4.174,906,4.174,907,5.276,908,4.174,909,4.174,910,4.174,911,4.174,912,4.174,913,4.174,914,4.174,915,4.174,916,4.174,917,4.174,918,5.276,919,4.174,920,4.174,921,4.174,922,4.174,923,4.174,924,4.174,925,4.174,926,4.174,927,4.174,928,4.174,929,4.174,930,4.174,931,4.174,932,4.174,933,4.174,934,4.174,935,4.174,936,4.174]],["title/miscellaneous/enumerations.html",[937,1.314,938,3.404]],["body/miscellaneous/enumerations.html",[7,0.429,11,0.026,30,0.02,31,0.023,32,0.02,122,1.79,323,2.756,937,2.34,938,4.221,939,5.005,940,5.005,941,5.283,942,5.894,943,5.894]],["title/miscellaneous/functions.html",[937,1.314,944,3.404]],["body/miscellaneous/functions.html",[7,0.328,11,0.026,14,1.448,30,0.015,31,0.02,32,0.015,39,2.811,81,1.433,82,1.236,83,0.698,84,1.433,392,2.527,403,4.356,506,4.356,518,4.783,780,4.964,886,3.231,888,2.836,889,4.211,890,4.211,892,3.231,937,1.792,944,3.231,945,3.832,946,4.964,947,4.994,948,3.832,949,5.635,950,5.887,951,4.994,952,3.832,953,4.994,954,4.994]],["title/index.html",[7,0.241,635,2.369,955,2.81]],["body/index.html",[4,0.295,11,0.027,30,0.015,31,0.02,32,0.015,272,3.296,348,2.591,478,2.893,653,4.266,796,4.266,872,2.893,949,4.266,956,3.909,957,3.909,958,5.059,959,3.909,960,3.909,961,3.909,962,3.909,963,3.909,964,3.909,965,3.909,966,3.909,967,3.909,968,5.609,969,3.909,970,3.909,971,3.909,972,3.909,973,6.405,974,3.909,975,3.909,976,3.909,977,6.294,978,3.909,979,3.909,980,5.059,981,3.909,982,3.909,983,3.909,984,3.909,985,3.909,986,3.909,987,3.909,988,5.059,989,3.909,990,3.909,991,3.909,992,3.909,993,3.909,994,3.909,995,3.909,996,3.909,997,3.909,998,3.909,999,3.909,1000,3.909,1001,3.909,1002,3.909,1003,3.909,1004,3.909,1005,3.909,1006,3.909,1007,3.909,1008,3.909,1009,3.909,1010,3.909]],["title/modules.html",[35,2.315]],["body/modules.html",[11,0.023,30,0.02,31,0.023,32,0.02,34,3.293,35,2.514,45,2.987,46,2.987,47,2.732,478,4.775,1011,6.454,1012,6.454,1013,6.454]],["title/classes/moodleSessions.html",[24,0.068,183,1.847]],["body/classes/moodleSessions.html",[3,0.279,4,0.245,5,0.245,7,0.279,8,1.182,11,0.027,12,1.207,14,1.355,15,1.248,23,0.279,24,0.066,25,1.554,26,3.153,28,1.182,30,0.013,31,0.018,32,0.013,81,1.171,82,1.01,83,0.685,84,1.171,183,3.283,206,1.802,211,4.241,221,2.924,229,3.391,248,1.94,340,1.521,755,3.786,860,1.956,883,2.743,1014,5.971,1015,5.116,1016,4.475,1017,5.116,1018,4.475,1019,4.475,1020,4.475,1021,3.253,1022,4.475,1023,3.253,1024,5.778,1025,3.774,1026,3.253,1027,4.475,1028,3.253,1029,4.475,1030,3.253,1031,3.253,1032,3.253,1033,3.253,1034,4.475,1035,3.253,1036,3.253,1037,3.253]],["title/classes/moodleSubmitHelper.html",[24,0.068,436,2.019]],["body/classes/moodleSubmitHelper.html",[3,0.355,4,0.313,5,0.313,7,0.355,8,1.388,11,0.027,12,1.037,14,1.02,23,0.355,24,0.084,25,1.752,28,1.388,30,0.016,31,0.021,32,0.016,68,3.07,81,0.95,82,0.819,83,0.492,84,0.95,211,3.823,216,3.889,217,4.431,218,3.468,219,4.431,221,2.659,340,1.94,392,2.659,436,3.16,466,2.281,474,2.75,860,2.494,893,3.498,1025,3.498,1038,5.255,1039,4.148,1040,4.148,1041,6.257,1042,4.148,1043,4.148,1044,4.148,1045,4.148,1046,4.148,1047,4.148,1048,4.148]],["title/overview.html",[1049,3.857]],["body/overview.html",[2,1.522,11,0.027,21,3.035,30,0.015,31,0.02,32,0.015,33,1.638,34,4.36,35,1.912,36,1.912,37,2.272,38,2.272,39,1.912,40,2.272,41,2.272,42,3.186,43,3.186,44,3.186,45,4.01,46,3.654,47,3.494,48,2.975,49,2.272,50,2.272,63,1.638,93,3.215,105,2.559,138,3.186,139,3.186,141,3.186,142,3.318,143,3.318,246,2.272,314,2.796,340,1.767,430,2.792,563,3.186,564,3.186,807,3.186,808,3.186,809,3.186,1049,3.186,1050,4.949,1051,3.779,1052,3.779,1053,3.779,1054,3.779]],["title/interfaces/taskAndNote.html",[244,1.259,622,2.019]],["body/interfaces/taskAndNote.html",[3,0.349,4,0.307,5,0.307,7,0.349,11,0.027,15,1.292,16,0.741,23,0.516,24,0.083,30,0.016,31,0.021,32,0.016,56,1.527,82,0.804,83,0.678,114,1.154,122,1.578,171,3.313,173,1.766,244,1.527,246,2.449,248,2.252,311,2.24,323,1.905,355,3.888,368,2.629,369,2.449,370,3.123,371,1.905,392,2.894,466,3.313,568,2.24,621,2.7,622,3.123,748,2.449,749,2.7,750,3.435,755,3.014,759,3.014]],["title/classes/taskRunner.html",[24,0.068,434,2.019]],["body/classes/taskRunner.html",[3,0.293,4,0.258,5,0.258,7,0.293,8,1.222,11,0.027,12,1.11,14,1.291,15,0.914,16,0.488,23,0.293,24,0.069,25,1.594,26,2.656,28,1.386,30,0.014,31,0.018,32,0.014,73,2.573,81,1.201,82,1.036,83,0.622,84,1.201,114,1.716,116,2.006,174,2.782,218,2.782,339,2.164,340,1.598,350,3.902,434,2.782,510,3.902,518,4.162,860,2.054,897,2.529,899,2.529,1055,4.628,1056,4.628,1057,3.417,1058,3.417,1059,3.417,1060,3.417,1061,3.417,1062,3.417,1063,3.417,1064,3.902,1065,3.417,1066,3.417,1067,3.417,1068,3.417,1069,4.628,1070,4.628,1071,4.628,1072,4.628,1073,3.417,1074,3.417,1075,3.417,1076,4.628,1077,3.417,1078,3.417,1079,3.417,1080,3.417,1081,3.417,1082,3.417,1083,3.417,1084,3.417,1085,3.417,1086,3.417,1087,3.417]],["title/miscellaneous/typealiases.html",[937,1.314,1088,4.037]],["body/miscellaneous/typealiases.html",[7,0.434,11,0.023,30,0.02,31,0.023,32,0.02,83,0.6,341,3.355,372,4.39,377,3.043,389,3.933,621,3.933,748,3.043,937,2.367,1089,5.061,1090,4.268,1091,4.268,1092,4.268]],["title/miscellaneous/variables.html",[937,1.314,1093,3.404]],["body/miscellaneous/variables.html",[7,0.335,11,0.027,15,1.107,30,0.015,31,0.02,32,0.015,83,0.665,151,3.353,155,2.893,160,2.893,185,3.718,186,3.296,323,1.828,325,3.744,341,2.591,374,3.353,375,3.296,377,2.35,395,3.042,396,2.893,568,2.782,748,2.35,759,2.893,790,4.546,860,3.944,881,3.296,885,3.296,888,2.893,891,4.266,897,2.893,899,3.744,937,1.828,941,5.532,946,3.296,1064,3.296,1090,3.296,1091,3.296,1092,3.296,1093,3.296,1094,3.909,1095,3.909,1096,3.909,1097,5.059,1098,3.909,1099,3.909,1100,3.909,1101,3.909,1102,3.909]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"overview.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":701,"title":{},"body":{"injectables/TaskService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":931,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":916,"title":{},"body":{"dependencies.html":{}}}],["0.21.1",{"_index":913,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":926,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":906,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":880,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":894,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":895,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":896,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":876,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":882,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":877,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":898,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":878,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":900,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":884,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":1054,"title":{},"body":{"overview.html":{}}}],["1,string.lastindexof",{"_index":1099,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":928,"title":{},"body":{"dependencies.html":{}}}],["1.3.3",{"_index":925,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":851,"title":{},"body":{"injectables/UsersService.html":{}}}],["100",{"_index":721,"title":{},"body":{"injectables/TaskService.html":{}}}],["2",{"_index":654,"title":{},"body":{"injectables/TaskService.html":{}}}],["2.0.2",{"_index":936,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":914,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":918,"title":{},"body":{"dependencies.html":{}}}],["3.0.3",{"_index":922,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":1050,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":927,"title":{},"body":{"dependencies.html":{}}}],["4.17.20",{"_index":920,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":1051,"title":{},"body":{"overview.html":{}}}],["5.10.14",{"_index":923,"title":{},"body":{"dependencies.html":{}}}],["6.6.3",{"_index":934,"title":{},"body":{"dependencies.html":{}}}],["6000s",{"_index":159,"title":{},"body":{"modules/AuthModule.html":{}}}],["7",{"_index":1053,"title":{},"body":{"overview.html":{}}}],["7.0.2",{"_index":909,"title":{},"body":{"dependencies.html":{}}}],["7.1.3",{"_index":910,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":908,"title":{},"body":{"dependencies.html":{}}}],["7.5.1",{"_index":907,"title":{},"body":{"dependencies.html":{}}}],["7.6.5",{"_index":904,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1052,"title":{},"body":{"overview.html":{}}}],["9a",{"_index":641,"title":{},"body":{"injectables/TaskService.html":{}}}],["_id",{"_index":390,"title":{},"body":{"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{},"classes/UserDTO.html":{}}}],["ablaufen",{"_index":300,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["access_token",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["add",{"_index":268,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["added",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["addsession",{"_index":1016,"title":{},"body":{"classes/moodleSessions.html":{}}}],["addsession(key",{"_index":1022,"title":{},"body":{"classes/moodleSessions.html":{}}}],["admin",{"_index":943,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["aliases",{"_index":1089,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["amazing",{"_index":994,"title":{},"body":{"index.html":{}}}],["angular",{"_index":967,"title":{},"body":{"index.html":{}}}],["any):promise",{"_index":658,"title":{},"body":{"injectables/TaskService.html":{}}}],["app",{"_index":975,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":570,"title":{},"body":{"modules/TaskModule.html":{},"modules/UsersModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":964,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":34,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":21,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["archievedpoints",{"_index":714,"title":{},"body":{"injectables/TaskService.html":{}}}],["archievedpoints/totalpoints",{"_index":720,"title":{},"body":{"injectables/TaskService.html":{}}}],["arguments",{"_index":281,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["arrays",{"_index":655,"title":{},"body":{"injectables/TaskService.html":{}}}],["async",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/taskRunner.html":{}}}],["auch",{"_index":693,"title":{},"body":{"injectables/TaskService.html":{}}}],["aus",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["ausprobieren",{"_index":454,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["auth",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["auth.controller",{"_index":148,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":255,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:10",{"_index":260,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:16",{"_index":263,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/moodlesessions",{"_index":435,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["authcontroller",{"_index":69,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":270,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard",{"_index":265,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":267,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":306,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":45,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1003,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":93,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authtoken",{"_index":463,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["await",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/taskRunner.html":{}}}],["axios",{"_index":453,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"dependencies.html":{}}}],["backend",{"_index":66,"title":{},"body":{"injectables/AppService.html":{}}}],["backers",{"_index":995,"title":{},"body":{"index.html":{}}}],["based",{"_index":280,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["basic",{"_index":452,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["bcrypt",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["bcrypt.compare(pass,dbpassword",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(password,saltrounds",{"_index":853,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcryptjs",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["beim",{"_index":447,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["bermittelte",{"_index":448,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["body",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":252,"title":{},"body":{"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1013,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1011,"title":{},"body":{"modules.html":{}}}],["building",{"_index":959,"title":{},"body":{"index.html":{}}}],["call",{"_index":274,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["canactivate",{"_index":256,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":258,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["change",{"_index":854,"title":{},"body":{"injectables/UsersService.html":{}}}],["changed",{"_index":801,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword",{"_index":770,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["changepassword(res",{"_index":776,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword(userdto",{"_index":824,"title":{},"body":{"injectables/UsersService.html":{}}}],["check",{"_index":847,"title":{},"body":{"injectables/UsersService.html":{}}}],["class",{"_index":24,"title":{"classes/Task.html":{},"classes/TaskCollection.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{}}}],["classes",{"_index":340,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"overview.html":{},"classes/taskRunner.html":{}}}],["clean",{"_index":736,"title":{},"body":{"injectables/TaskService.html":{}}}],["cleanup",{"_index":690,"title":{},"body":{"injectables/TaskService.html":{}}}],["closedtests",{"_index":342,"title":{},"body":{"classes/Task.html":{}}}],["cluster_appmodule",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":138,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":139,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_taskmodule",{"_index":563,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["cluster_taskmodule_providers",{"_index":564,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":807,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":809,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":808,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["codingtests",{"_index":889,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["codingtests(inputparams",{"_index":948,"title":{},"body":{"miscellaneous/functions.html":{}}}],["collection",{"_index":488,"title":{},"body":{"controllers/TaskCollectionController.html":{},"injectables/TaskService.html":{}}}],["collection\",taskdto",{"_index":688,"title":{},"body":{"injectables/TaskService.html":{}}}],["collection:\",taskcollectiondto",{"_index":631,"title":{},"body":{"injectables/TaskService.html":{}}}],["collections",{"_index":637,"title":{},"body":{"injectables/TaskService.html":{}}}],["config",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["config.json",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["config.moodle_consumer_secret",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["console",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(\"[log",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["console.log(data.user",{"_index":803,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(err",{"_index":1048,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["console.log(jwtservice.decode(token",{"_index":335,"title":{},"body":{"guards/RolesGuard.html":{}}}],["console.log(this.jwtservice.decode",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(token",{"_index":334,"title":{},"body":{"guards/RolesGuard.html":{}}}],["console.log(user",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(userdto",{"_index":842,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(validateduser",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{}}}],["constants",{"_index":152,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["constructor",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{},"classes/UserDTO.html":{},"injectables/UsersService.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["constructor(@injectmodel('user",{"_index":841,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(_id",{"_index":761,"title":{},"body":{"classes/UserDTO.html":{}}}],["constructor(authservice",{"_index":308,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(private",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":318,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(taskmodel",{"_index":586,"title":{},"body":{"injectables/TaskService.html":{}}}],["constructor(title",{"_index":353,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{}}}],["constructor(usermodel",{"_index":822,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["content",{"_index":343,"title":{},"body":{"classes/Task.html":{}}}],["context",{"_index":261,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":331,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":330,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":336,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest().headers.authorization",{"_index":333,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('task",{"_index":535,"title":{},"body":{"controllers/TaskController.html":{}}}],["controller('taskcollection",{"_index":437,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["controller('user",{"_index":794,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["course",{"_index":344,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{}}}],["coverage",{"_index":872,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":538,"title":{},"body":{"controllers/TaskController.html":{},"injectables/UsersService.html":{}}}],["create(userdto",{"_index":826,"title":{},"body":{"injectables/UsersService.html":{}}}],["createcollection",{"_index":576,"title":{},"body":{"injectables/TaskService.html":{}}}],["createcollection(taskcollectiondto",{"_index":592,"title":{},"body":{"injectables/TaskService.html":{}}}],["created",{"_index":457,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["createdtask",{"_index":628,"title":{},"body":{"injectables/TaskService.html":{}}}],["createdtask.save",{"_index":630,"title":{},"body":{"injectables/TaskService.html":{}}}],["createdtaskcollection",{"_index":632,"title":{},"body":{"injectables/TaskService.html":{}}}],["createdtaskcollection.save",{"_index":634,"title":{},"body":{"injectables/TaskService.html":{}}}],["createduser",{"_index":862,"title":{},"body":{"injectables/UsersService.html":{}}}],["createduser.save",{"_index":864,"title":{},"body":{"injectables/UsersService.html":{}}}],["createmoodleuser",{"_index":818,"title":{},"body":{"injectables/UsersService.html":{}}}],["createmoodleuser(mail",{"_index":828,"title":{},"body":{"injectables/UsersService.html":{}}}],["createmoodleuser(mail:string,username:string",{"_index":865,"title":{},"body":{"injectables/UsersService.html":{}}}],["createnewtask",{"_index":503,"title":{},"body":{"controllers/TaskController.html":{}}}],["createnewtask(@res",{"_index":536,"title":{},"body":{"controllers/TaskController.html":{}}}],["createnewtask(res",{"_index":512,"title":{},"body":{"controllers/TaskController.html":{}}}],["createnewtaskcollection",{"_index":399,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["createnewtaskcollection(@res",{"_index":455,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["createnewtaskcollection(res",{"_index":406,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["createtask",{"_index":577,"title":{},"body":{"injectables/TaskService.html":{}}}],["createtask(taskdto",{"_index":594,"title":{},"body":{"injectables/TaskService.html":{}}}],["creating",{"_index":626,"title":{},"body":{"injectables/TaskService.html":{}}}],["creator",{"_index":345,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{}}}],["custom",{"_index":269,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["dann",{"_index":546,"title":{},"body":{"controllers/TaskController.html":{}}}],["das",{"_index":446,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["data",{"_index":780,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["data:\",input",{"_index":1069,"title":{},"body":{"classes/taskRunner.html":{}}}],["dataforplugin",{"_index":346,"title":{},"body":{"classes/Task.html":{}}}],["dataforplugin:any",{"_index":373,"title":{},"body":{"classes/Task.html":{}}}],["date",{"_index":347,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{}}}],["dbpassword",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["declarations",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":860,"title":{},"body":{"injectables/UsersService.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["delete",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete(':id",{"_index":411,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["delete(userdto",{"_index":831,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleted",{"_index":500,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["deletetask",{"_index":504,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["deletetask(@param('id",{"_index":554,"title":{},"body":{"controllers/TaskController.html":{}}}],["deletetask(taskid",{"_index":514,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["deletetaskcollection",{"_index":400,"title":{},"body":{"controllers/TaskCollectionController.html":{},"injectables/TaskService.html":{}}}],["deletetaskcollection(@param('id",{"_index":498,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["deletetaskcollection(taskcollectionid",{"_index":410,"title":{},"body":{"controllers/TaskCollectionController.html":{},"injectables/TaskService.html":{}}}],["deletetasksincollection",{"_index":578,"title":{},"body":{"injectables/TaskService.html":{}}}],["deletetasksincollection(taskid",{"_index":598,"title":{},"body":{"injectables/TaskService.html":{}}}],["deleteuser",{"_index":771,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser(@res",{"_index":802,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser(res",{"_index":779,"title":{},"body":{"controllers/UsersController.html":{}}}],["dem",{"_index":444,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["den",{"_index":691,"title":{},"body":{"injectables/TaskService.html":{}}}],["dependencies",{"_index":36,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":348,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"index.html":{}}}],["development",{"_index":976,"title":{},"body":{"index.html":{}}}],["document",{"_index":370,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"classes/User.html":{},"interfaces/taskAndNote.html":{}}}],["documentation",{"_index":873,"title":{},"body":{"coverage.html":{}}}],["dozent",{"_index":942,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["e2e",{"_index":985,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":960,"title":{},"body":{"index.html":{}}}],["email",{"_index":749,"title":{},"body":{"classes/User.html":{},"classes/UserDTO.html":{},"injectables/UsersService.html":{},"interfaces/taskAndNote.html":{}}}],["email':userdto.email",{"_index":844,"title":{},"body":{"injectables/UsersService.html":{}}}],["enumerations",{"_index":938,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["erhalte",{"_index":547,"title":{},"body":{"controllers/TaskController.html":{}}}],["err",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"classes/moodleSubmitHelper.html":{}}}],["error",{"_index":480,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["erstmal",{"_index":859,"title":{},"body":{"injectables/UsersService.html":{}}}],["establish",{"_index":276,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["example",{"_index":273,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["exception",{"_index":279,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["executioncontext",{"_index":259,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["expiresin",{"_index":158,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{}}}],["exports",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":912,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":266,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["extractjwt",{"_index":287,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":295,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["f]{24",{"_index":643,"title":{},"body":{"injectables/TaskService.html":{}}}],["fa",{"_index":642,"title":{},"body":{"injectables/TaskService.html":{}}}],["false",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"injectables/TaskService.html":{}}}],["feedback",{"_index":475,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{}}}],["filter",{"_index":746,"title":{},"body":{"injectables/TaskService.html":{}}}],["findall",{"_index":819,"title":{},"body":{"injectables/UsersService.html":{}}}],["findalltaskcollections",{"_index":579,"title":{},"body":{"injectables/TaskService.html":{}}}],["findalltasks",{"_index":580,"title":{},"body":{"injectables/TaskService.html":{}}}],["finding",{"_index":668,"title":{},"body":{"injectables/TaskService.html":{}}}],["findmoodleuser",{"_index":820,"title":{},"body":{"injectables/UsersService.html":{}}}],["findmoodleuser(mail",{"_index":834,"title":{},"body":{"injectables/UsersService.html":{}}}],["findmoodleuser(mail:string",{"_index":867,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone",{"_index":821,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(username",{"_index":836,"title":{},"body":{"injectables/UsersService.html":{}}}],["fixme",{"_index":301,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["found",{"_index":481,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["framework",{"_index":958,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":445,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["function",{"_index":887,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":944,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["funktioniert",{"_index":440,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["future",{"_index":477,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["gefundene",{"_index":551,"title":{},"body":{"controllers/TaskController.html":{}}}],["get('/gettaskcollections/:id",{"_index":524,"title":{},"body":{"controllers/TaskController.html":{}}}],["get('/getusers",{"_index":782,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/testuser",{"_index":784,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id",{"_index":416,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["getalltaskcollections",{"_index":401,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["getalltasks",{"_index":505,"title":{},"body":{"controllers/TaskController.html":{}}}],["getallusers",{"_index":772,"title":{},"body":{"controllers/UsersController.html":{}}}],["getbody",{"_index":891,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getinstance",{"_index":1017,"title":{},"body":{"classes/moodleSessions.html":{}}}],["getinstance():moodlesessions",{"_index":1032,"title":{},"body":{"classes/moodleSessions.html":{}}}],["getnote",{"_index":890,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getnote(inputparams",{"_index":952,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getopentests",{"_index":506,"title":{},"body":{"controllers/TaskController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getopentests(data",{"_index":953,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getopentests(taskid",{"_index":517,"title":{},"body":{"controllers/TaskController.html":{}}}],["getplugin",{"_index":1055,"title":{},"body":{"classes/taskRunner.html":{}}}],["getplugin(plugincode",{"_index":1058,"title":{},"body":{"classes/taskRunner.html":{}}}],["getplugin(plugincode:string",{"_index":1078,"title":{},"body":{"classes/taskRunner.html":{}}}],["getsession",{"_index":1018,"title":{},"body":{"classes/moodleSessions.html":{}}}],["getsession(key",{"_index":1027,"title":{},"body":{"classes/moodleSessions.html":{}}}],["getsingletask",{"_index":581,"title":{},"body":{"injectables/TaskService.html":{}}}],["getsingletask(taskid",{"_index":602,"title":{},"body":{"injectables/TaskService.html":{}}}],["getsingletaskcollection",{"_index":582,"title":{},"body":{"injectables/TaskService.html":{}}}],["getsingletaskcollection(taskcollectionid",{"_index":604,"title":{},"body":{"injectables/TaskService.html":{}}}],["getstatus",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gettask",{"_index":507,"title":{},"body":{"controllers/TaskController.html":{}}}],["gettask(@param('id",{"_index":542,"title":{},"body":{"controllers/TaskController.html":{}}}],["gettask(taskid",{"_index":521,"title":{},"body":{"controllers/TaskController.html":{}}}],["gettaskcollection",{"_index":402,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["gettaskcollection(@param('id",{"_index":489,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["gettaskcollection(taskcollectionid",{"_index":415,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["gettaskcollectionnote",{"_index":583,"title":{},"body":{"injectables/TaskService.html":{}}}],["gettaskcollectionnote(usermail",{"_index":606,"title":{},"body":{"injectables/TaskService.html":{}}}],["gettaskcollectionnote(usermail:string,taskcollectionid:string):promise",{"_index":698,"title":{},"body":{"injectables/TaskService.html":{}}}],["gettaskcollectionsfortask",{"_index":508,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["gettaskcollectionsfortask(@param('id",{"_index":540,"title":{},"body":{"controllers/TaskController.html":{}}}],["gettaskcollectionsfortask(taskid",{"_index":523,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["gettestuser",{"_index":773,"title":{},"body":{"controllers/UsersController.html":{}}}],["getting",{"_index":635,"title":{"index.html":{}},"body":{"injectables/TaskService.html":{}}}],["getuser",{"_index":774,"title":{},"body":{"controllers/UsersController.html":{}}}],["grade",{"_index":1041,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["grow",{"_index":991,"title":{},"body":{"index.html":{}}}],["guard",{"_index":314,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":316,"title":{},"body":{"guards/RolesGuard.html":{}}}],["handlerequest",{"_index":257,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(err",{"_index":262,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["hashedpassword",{"_index":852,"title":{},"body":{"injectables/UsersService.html":{}}}],["headers",{"_index":419,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["headers.authorization",{"_index":464,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["heavily",{"_index":965,"title":{},"body":{"index.html":{}}}],["here",{"_index":272,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"index.html":{}}}],["https://nestjs.com",{"_index":1007,"title":{},"body":{"index.html":{}}}],["https://stackoverflow.com/questions/44072750/how",{"_index":450,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["httpstatus",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["id",{"_index":747,"title":{},"body":{"injectables/TaskService.html":{}}}],["id:\",taskcollectionid",{"_index":648,"title":{},"body":{"injectables/TaskService.html":{}}}],["id:\",taskid",{"_index":639,"title":{},"body":{"injectables/TaskService.html":{}}}],["identifier",{"_index":874,"title":{},"body":{"coverage.html":{}}}],["if(!(task._id.tostring",{"_index":680,"title":{},"body":{"injectables/TaskService.html":{}}}],["if(!moodlesessions.instance",{"_index":1033,"title":{},"body":{"classes/moodleSessions.html":{}}}],["if(!moodleuser",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["if(!session.outcome_service",{"_index":1045,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["if(!taskalreadysubmittedflag",{"_index":729,"title":{},"body":{"injectables/TaskService.html":{}}}],["if(await",{"_index":494,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["if(matching",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["if(moodleuser",{"_index":702,"title":{},"body":{"injectables/TaskService.html":{}}}],["if(moodleuser.solvedtasksorcollections",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["if(note",{"_index":485,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["if(plugin.name",{"_index":1082,"title":{},"body":{"classes/taskRunner.html":{}}}],["if(provider.body.custom_taskid",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["if(returnobj",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["if(session",{"_index":469,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["if(solved",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["if(solvedtask.taskid",{"_index":718,"title":{},"body":{"injectables/TaskService.html":{}}}],["if(solvedtasksincollection",{"_index":738,"title":{},"body":{"injectables/TaskService.html":{}}}],["if(solvedtasksincollectionmap",{"_index":705,"title":{},"body":{"injectables/TaskService.html":{}}}],["if(solvedtasksincollectionmap.has(taskcollectionid",{"_index":725,"title":{},"body":{"injectables/TaskService.html":{}}}],["if(submittedtask.taskid",{"_index":728,"title":{},"body":{"injectables/TaskService.html":{}}}],["if(task",{"_index":462,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["if(task._id",{"_index":675,"title":{},"body":{"injectables/TaskService.html":{}}}],["if(tasks.length",{"_index":683,"title":{},"body":{"injectables/TaskService.html":{}}}],["if(taskssolvedmap",{"_index":743,"title":{},"body":{"injectables/TaskService.html":{}}}],["ifeedback",{"_index":245,"title":{"interfaces/IFeedback.html":{}},"body":{"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"coverage.html":{}}}],["ignoreexpiration",{"_index":296,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":327,"title":{},"body":{"guards/RolesGuard.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{}}}],["import(pathtofile",{"_index":1087,"title":{},"body":{"classes/taskRunner.html":{}}}],["imports",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{}}}],["ims",{"_index":917,"title":{},"body":{"dependencies.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{}}}],["initiated:\",provider",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectable",{"_index":62,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":63,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":620,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["injectmodel('task",{"_index":623,"title":{},"body":{"injectables/TaskService.html":{}}}],["injectmodel('taskcollection",{"_index":624,"title":{},"body":{"injectables/TaskService.html":{}}}],["injectmodel('user",{"_index":625,"title":{},"body":{"injectables/TaskService.html":{}}}],["input",{"_index":518,"title":{},"body":{"controllers/TaskController.html":{},"miscellaneous/functions.html":{},"classes/taskRunner.html":{}}}],["inputparams",{"_index":951,"title":{},"body":{"miscellaneous/functions.html":{}}}],["inspired",{"_index":966,"title":{},"body":{"index.html":{}}}],["installation",{"_index":972,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":974,"title":{},"body":{"index.html":{}}}],["instance",{"_index":1015,"title":{},"body":{"classes/moodleSessions.html":{}}}],["interface",{"_index":244,"title":{"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"interfaces/TaskInCollection.html":{},"interfaces/taskAndNote.html":{}},"body":{"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"classes/User.html":{},"coverage.html":{},"interfaces/taskAndNote.html":{}}}],["interfaces",{"_index":246,"title":{},"body":{"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"interfaces/TaskInCollection.html":{},"overview.html":{},"interfaces/taskAndNote.html":{}}}],["invalid",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"classes/moodleSubmitHelper.html":{}}}],["isvalid",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"classes/moodleSubmitHelper.html":{}}}],["itestresult",{"_index":250,"title":{"interfaces/ITestResult.html":{}},"body":{"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"coverage.html":{}}}],["join",{"_index":997,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":290,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":153,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":253,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtconstants",{"_index":151,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":294,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":149,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":154,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["jwtservice(null",{"_index":332,"title":{},"body":{"guards/RolesGuard.html":{}}}],["jwtstrategy",{"_index":142,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1004,"title":{},"body":{"index.html":{}}}],["kann",{"_index":298,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["key",{"_index":1024,"title":{},"body":{"classes/moodleSessions.html":{}}}],["legend",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":1010,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":988,"title":{},"body":{"index.html":{}}}],["local",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":147,"title":{},"body":{"modules/AuthModule.html":{}}}],["localauthguard",{"_index":101,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":143,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["lodash",{"_index":919,"title":{},"body":{"dependencies.html":{}}}],["lodash.isnumber",{"_index":921,"title":{},"body":{"dependencies.html":{}}}],["logged",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["logic",{"_index":271,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["login",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["login(@res",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(res",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginmoodleuserandgettask",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginmoodleuserandgettask(username",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginmoodleuserandgettask(username,usermail,taskid):promise",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["lti",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["lti.provider(config.moodle_consumer_key",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["ltisessioninitiate",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["ltisessioninitiate(request",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["ltisessioninitiate(request):promise",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["löschen",{"_index":694,"title":{},"body":{"injectables/TaskService.html":{}}}],["mail",{"_index":830,"title":{},"body":{"injectables/UsersService.html":{}}}],["mail}).exec",{"_index":868,"title":{},"body":{"injectables/UsersService.html":{}}}],["man",{"_index":441,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["map",{"_index":755,"title":{},"body":{"classes/User.html":{},"classes/moodleSessions.html":{},"interfaces/taskAndNote.html":{}}}],["map([[taskcollectionid,solvedtasksincollection",{"_index":732,"title":{},"body":{"injectables/TaskService.html":{}}}],["map([[taskorcollectionid,note",{"_index":745,"title":{},"body":{"injectables/TaskService.html":{}}}],["marktaskincollectionassubmitted",{"_index":584,"title":{},"body":{"injectables/TaskService.html":{}}}],["marktaskincollectionassubmitted(usermail",{"_index":609,"title":{},"body":{"injectables/TaskService.html":{}}}],["marktaskincollectionassubmitted(usermail:string,taskcollectionid:string,taskid:string,note:number):promise",{"_index":722,"title":{},"body":{"injectables/TaskService.html":{}}}],["marktaskorcollectionassubmitted",{"_index":585,"title":{},"body":{"injectables/TaskService.html":{}}}],["marktaskorcollectionassubmitted(usermail",{"_index":611,"title":{},"body":{"injectables/TaskService.html":{}}}],["marktaskorcollectionassubmitted(usermail:string,taskorcollectionid:string,note:number):promise",{"_index":735,"title":{},"body":{"injectables/TaskService.html":{}}}],["matching",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"overview.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["message:\"task",{"_index":492,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["metadata",{"_index":930,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["miscellaneous",{"_index":937,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":653,"title":{},"body":{"injectables/TaskService.html":{},"index.html":{}}}],["mitschicken",{"_index":449,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["mode",{"_index":980,"title":{},"body":{"index.html":{}}}],["model",{"_index":587,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["module",{"_index":33,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":35,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongoose",{"_index":371,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"interfaces/taskAndNote.html":{}}}],["mongoosemodule",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature([{name",{"_index":571,"title":{},"body":{"modules/TaskModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forroot(config.mongodb_path",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["moodle",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TaskController.html":{}}}],["moodlelogin",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{}}}],["moodlelogin(request",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["moodlesessions",{"_index":183,"title":{"classes/moodleSessions.html":{}},"body":{"injectables/AuthService.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"coverage.html":{},"classes/moodleSessions.html":{}}}],["moodlesessions.getinstance",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["moodlesessions.instance",{"_index":1034,"title":{},"body":{"classes/moodleSessions.html":{}}}],["moodlesubmithelper",{"_index":436,"title":{"classes/moodleSubmitHelper.html":{}},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"coverage.html":{},"classes/moodleSubmitHelper.html":{}}}],["moodleuser",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["moodleuser,solved",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["moodleuser.solvedtasksincollection",{"_index":704,"title":{},"body":{"injectables/TaskService.html":{}}}],["moodleuser.solvedtasksorcollections",{"_index":742,"title":{},"body":{"injectables/TaskService.html":{}}}],["moodleuser.solvedtasksorcollections.has(taskid",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["more",{"_index":1000,"title":{},"body":{"index.html":{}}}],["muss",{"_index":442,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["mytaskrunner",{"_index":465,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["mytaskrunner.runtests(task",{"_index":557,"title":{},"body":{"controllers/TaskController.html":{}}}],["mytaskrunner.submittask(task",{"_index":467,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["myśliwiec",{"_index":1005,"title":{},"body":{"index.html":{}}}],["nach",{"_index":545,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["name",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{}}}],["name,userid,mail,token,taskid",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["name:username,userid:userid,mail:usermail,token:access_token",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["nest",{"_index":968,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1009,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":905,"title":{},"body":{"dependencies.html":{}}}],["nestjs/core",{"_index":322,"title":{},"body":{"guards/RolesGuard.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":150,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"interfaces/taskAndNote.html":{}}}],["nestjs/passport",{"_index":146,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":911,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/moodleSessions.html":{}}}],["new:true",{"_index":667,"title":{},"body":{"injectables/TaskService.html":{}}}],["newtaskcollection",{"_index":685,"title":{},"body":{"injectables/TaskService.html":{}}}],["newtaskcollection.tasks",{"_index":686,"title":{},"body":{"injectables/TaskService.html":{}}}],["newtasksforcollection",{"_index":679,"title":{},"body":{"injectables/TaskService.html":{}}}],["newtasksforcollection.length",{"_index":684,"title":{},"body":{"injectables/TaskService.html":{}}}],["newtasksforcollection.push(task",{"_index":682,"title":{},"body":{"injectables/TaskService.html":{}}}],["nicht",{"_index":299,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["node.js",{"_index":957,"title":{},"body":{"index.html":{}}}],["note",{"_index":466,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/moodleSubmitHelper.html":{},"interfaces/taskAndNote.html":{}}}],["notevil",{"_index":924,"title":{},"body":{"dependencies.html":{}}}],["npm",{"_index":973,"title":{},"body":{"index.html":{}}}],["null",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TaskService.html":{}}}],["number",{"_index":392,"title":{},"body":{"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"miscellaneous/functions.html":{},"classes/moodleSubmitHelper.html":{},"interfaces/taskAndNote.html":{}}}],["nur",{"_index":443,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["obj",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["object",{"_index":1100,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objekt",{"_index":652,"title":{},"body":{"injectables/TaskService.html":{}}}],["ok",{"_index":68,"title":{},"body":{"injectables/AppService.html":{},"controllers/TaskCollectionController.html":{},"classes/moodleSubmitHelper.html":{}}}],["old",{"_index":848,"title":{},"body":{"injectables/UsersService.html":{}}}],["open",{"_index":989,"title":{},"body":{"index.html":{}}}],["opentests",{"_index":349,"title":{},"body":{"classes/Task.html":{}}}],["optional",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["out",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["outcome",{"_index":1046,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["overview",{"_index":1049,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":903,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":482,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["param('taskcollectionid",{"_index":459,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["param('taskid",{"_index":460,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["param('token",{"_index":559,"title":{},"body":{"controllers/TaskController.html":{}}}],["parameters",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["pass",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["passed",{"_index":251,"title":{},"body":{"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{}}}],["passport",{"_index":289,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":145,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":291,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":292,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":311,"title":{},"body":{"injectables/LocalStrategy.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/taskAndNote.html":{}}}],["patch",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["pathtofile",{"_index":1085,"title":{},"body":{"classes/taskRunner.html":{}}}],["payload",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":303,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":304,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["placeholder",{"_index":476,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["please",{"_index":998,"title":{},"body":{"index.html":{}}}],["plugin",{"_index":1070,"title":{},"body":{"classes/taskRunner.html":{}}}],["plugin.default.getopentests(task.dataforplugin,task.opentests,input",{"_index":1073,"title":{},"body":{"classes/taskRunner.html":{}}}],["plugin.default.submit(task.dataforplugin,task.closedtests,input",{"_index":1077,"title":{},"body":{"classes/taskRunner.html":{}}}],["plugincode",{"_index":350,"title":{},"body":{"classes/Task.html":{},"classes/taskRunner.html":{}}}],["plugindirectory:string",{"_index":1080,"title":{},"body":{"classes/taskRunner.html":{}}}],["plugindirectory=plugin.directory",{"_index":1084,"title":{},"body":{"classes/taskRunner.html":{}}}],["plugindirectorypath",{"_index":899,"title":{},"body":{"coverage.html":{},"classes/taskRunner.html":{},"miscellaneous/variables.html":{}}}],["plugindirectorypath+plugindirectory+'/'+pluginfilename",{"_index":1086,"title":{},"body":{"classes/taskRunner.html":{}}}],["pluginfilename:string",{"_index":1079,"title":{},"body":{"classes/taskRunner.html":{}}}],["pluginfilename=plugin.mainfile",{"_index":1083,"title":{},"body":{"classes/taskRunner.html":{}}}],["plugins",{"_index":1064,"title":{},"body":{"classes/taskRunner.html":{},"miscellaneous/variables.html":{}}}],["plugins.foreach(plugin",{"_index":1081,"title":{},"body":{"classes/taskRunner.html":{}}}],["plugins/plugins.json",{"_index":1065,"title":{},"body":{"classes/taskRunner.html":{}}}],["post",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["post('/create",{"_index":408,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["post('/login",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/moodlelogin",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/register",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/searchtask",{"_index":528,"title":{},"body":{"controllers/TaskController.html":{}}}],["post('/submit/:id",{"_index":420,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["post('/submittask/:taskcollectionid/:taskid",{"_index":424,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["post('/test/:id",{"_index":519,"title":{},"body":{"controllers/TaskController.html":{}}}],["prefix",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["primär",{"_index":544,"title":{},"body":{"controllers/TaskController.html":{}}}],["private",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"classes/moodleSessions.html":{},"classes/taskRunner.html":{}}}],["production",{"_index":982,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":956,"title":{},"body":{"index.html":{}}}],["project",{"_index":990,"title":{},"body":{"index.html":{}}}],["promise",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"classes/taskRunner.html":{}}}],["prop",{"_index":355,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"classes/User.html":{},"interfaces/taskAndNote.html":{}}}],["properties",{"_index":248,"title":{},"body":{"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"classes/moodleSessions.html":{},"interfaces/taskAndNote.html":{}}}],["provide",{"_index":815,"title":{},"body":{"modules/UsersModule.html":{}}}],["provider",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["provider.body.custom_taskid",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["provider.body.ext_user_username",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["provider.body.lis_person_contact_email_primary",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["provider.body.user_id",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["provider.valid_request(request",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["providers",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["public",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserDTO.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{}}}],["put",{"_index":432,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["put('/changepassword",{"_index":777,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('/update",{"_index":428,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["put(userdto",{"_index":838,"title":{},"body":{"injectables/UsersService.html":{}}}],["putuser",{"_index":775,"title":{},"body":{"controllers/UsersController.html":{}}}],["putuser(res",{"_index":787,"title":{},"body":{"controllers/UsersController.html":{}}}],["query\",searchquery",{"_index":660,"title":{},"body":{"injectables/TaskService.html":{}}}],["read",{"_index":999,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["reflect",{"_index":929,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":319,"title":{},"body":{"guards/RolesGuard.html":{}}}],["register",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(res",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["removesession",{"_index":1019,"title":{},"body":{"classes/moodleSessions.html":{}}}],["removesession(key",{"_index":1029,"title":{},"body":{"classes/moodleSessions.html":{}}}],["repository",{"_index":971,"title":{},"body":{"index.html":{}}}],["req",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["request",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["request\"+err",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["require(\"ims",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["requiredroles",{"_index":328,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":337,"title":{},"body":{"guards/RolesGuard.html":{}}}],["res",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["res.cookie('session',returnobj",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(httpstatus.internal_server_error).json",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{}}}],["res.status(httpstatus.not_found).json",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["res.status(httpstatus.not_modified).json",{"_index":553,"title":{},"body":{"controllers/TaskController.html":{}}}],["res.status(httpstatus.ok).json",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["res.status(httpstatus.ok).json(returnobj",{"_index":491,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["res.status(httpstatus.ok).json(runnedtests",{"_index":558,"title":{},"body":{"controllers/TaskController.html":{}}}],["res.status(httpstatus.unauthorized).json",{"_index":479,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["reset",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.redirect('http://localhost:8080/solvefullscreen/alreadysubmitted",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.redirect('http://localhost:8080/solvefullscreen?exerciseid='+taskid+'&token='+token",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["rest",{"_index":664,"title":{},"body":{"injectables/TaskService.html":{}}}],["result",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"overview.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"overview.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["returnobj",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["rimraf",{"_index":932,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":323,"title":{},"body":{"guards/RolesGuard.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"interfaces/taskAndNote.html":{},"miscellaneous/variables.html":{}}}],["role':userdto.role}).exec",{"_index":845,"title":{},"body":{"injectables/UsersService.html":{}}}],["role.enum",{"_index":324,"title":{},"body":{"guards/RolesGuard.html":{}}}],["role:'test",{"_index":797,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles",{"_index":790,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":795,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles(role.user",{"_index":798,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles.decorator",{"_index":326,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles_key",{"_index":325,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":315,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["run",{"_index":977,"title":{},"body":{"index.html":{}}}],["runnedtests",{"_index":556,"title":{},"body":{"controllers/TaskController.html":{}}}],["running",{"_index":1067,"title":{},"body":{"classes/taskRunner.html":{}}}],["runtests",{"_index":1056,"title":{},"body":{"classes/taskRunner.html":{}}}],["runtests(task",{"_index":1060,"title":{},"body":{"classes/taskRunner.html":{}}}],["runtests(task:any,input:any):promise",{"_index":1066,"title":{},"body":{"classes/taskRunner.html":{}}}],["rxjs",{"_index":933,"title":{},"body":{"dependencies.html":{}}}],["saltrounds",{"_index":850,"title":{},"body":{"injectables/UsersService.html":{}}}],["save",{"_index":861,"title":{},"body":{"injectables/UsersService.html":{}}}],["scalable",{"_index":961,"title":{},"body":{"index.html":{}}}],["schema",{"_index":368,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"interfaces/taskAndNote.html":{}}}],["schemafactory",{"_index":369,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"classes/User.html":{},"interfaces/taskAndNote.html":{}}}],["schemafactory.createforclass(task",{"_index":375,"title":{},"body":{"classes/Task.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(taskcollection",{"_index":396,"title":{},"body":{"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":759,"title":{},"body":{"classes/User.html":{},"interfaces/taskAndNote.html":{},"miscellaneous/variables.html":{}}}],["search",{"_index":659,"title":{},"body":{"injectables/TaskService.html":{}}}],["searchbyname",{"_index":657,"title":{},"body":{"injectables/TaskService.html":{}}}],["searchbytag",{"_index":656,"title":{},"body":{"injectables/TaskService.html":{}}}],["searchquery",{"_index":527,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["searchstring",{"_index":548,"title":{},"body":{"controllers/TaskController.html":{}}}],["searchtask",{"_index":509,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["searchtask(@res",{"_index":549,"title":{},"body":{"controllers/TaskController.html":{}}}],["searchtask(res",{"_index":526,"title":{},"body":{"controllers/TaskController.html":{}}}],["searchtask(searchquery",{"_index":614,"title":{},"body":{"injectables/TaskService.html":{}}}],["secret",{"_index":155,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["secretkey",{"_index":1101,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":302,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["send",{"_index":451,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["senden",{"_index":561,"title":{},"body":{"controllers/TaskController.html":{}}}],["server",{"_index":962,"title":{},"body":{"index.html":{}}}],["service",{"_index":1047,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["session",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{}}}],["session.body.ext_user_username",{"_index":471,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["session.body.lis_person_contact_email_primary",{"_index":472,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["session.body.user_id",{"_index":470,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["session.outcome_service.send_replace_result(grade/100",{"_index":1044,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["sessions",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"classes/moodleSessions.html":{}}}],["sessions.addsession(access_token,provider",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["sessions.getsession(authtoken",{"_index":468,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["setmetadata(roles_key",{"_index":1102,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shared",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["side",{"_index":963,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":157,"title":{},"body":{"modules/AuthModule.html":{}}}],["solved",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["solvedtask.note/100",{"_index":719,"title":{},"body":{"injectables/TaskService.html":{}}}],["solvedtasksincollection",{"_index":707,"title":{},"body":{"injectables/TaskService.html":{},"classes/User.html":{}}}],["solvedtasksincollection.delete(taskorcollectionid",{"_index":740,"title":{},"body":{"injectables/TaskService.html":{}}}],["solvedtasksincollection.foreach(solvedtask",{"_index":717,"title":{},"body":{"injectables/TaskService.html":{}}}],["solvedtasksincollection.foreach(submittedtask",{"_index":727,"title":{},"body":{"injectables/TaskService.html":{}}}],["solvedtasksincollection.has(taskorcollectionid",{"_index":739,"title":{},"body":{"injectables/TaskService.html":{}}}],["solvedtasksincollection.push(taskandnoteobj",{"_index":730,"title":{},"body":{"injectables/TaskService.html":{}}}],["solvedtasksincollectionmap",{"_index":703,"title":{},"body":{"injectables/TaskService.html":{}}}],["solvedtasksincollectionmap.get(taskcollectionid",{"_index":708,"title":{},"body":{"injectables/TaskService.html":{}}}],["solvedtasksincollectionmap.has(taskcollectionid",{"_index":706,"title":{},"body":{"injectables/TaskService.html":{}}}],["solvedtasksincollectionmap.set(taskcollectionid,solvedtasksincollection",{"_index":731,"title":{},"body":{"injectables/TaskService.html":{}}}],["solvedtasksorcollections",{"_index":750,"title":{},"body":{"classes/User.html":{},"interfaces/taskAndNote.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{}}}],["sponsors",{"_index":993,"title":{},"body":{"index.html":{}}}],["src/.../auth.service.ts",{"_index":1095,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../codingpluginmain.ts",{"_index":946,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":1094,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":945,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../role.enum.ts",{"_index":939,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":1097,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../task.schema.ts",{"_index":1091,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../taskcollection.schema.ts",{"_index":1090,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../taskrunner.ts",{"_index":1096,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../testplugin.ts",{"_index":947,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user.schema.ts",{"_index":1092,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:10",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":64,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:4",{"_index":65,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:14",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:29",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:46",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":144,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.service.ts:10",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:16",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:28",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:38",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:69",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/constants.ts",{"_index":881,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/jwt",{"_index":254,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":282,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:17",{"_index":286,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":284,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/local",{"_index":305,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts",{"_index":307,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts:12",{"_index":312,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:7",{"_index":309,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/moodlesessions.ts",{"_index":883,"title":{},"body":{"coverage.html":{},"classes/moodleSessions.html":{}}}],["src/auth/moodlesessions.ts:17",{"_index":1023,"title":{},"body":{"classes/moodleSessions.html":{}}}],["src/auth/moodlesessions.ts:2",{"_index":1021,"title":{},"body":{"classes/moodleSessions.html":{}}}],["src/auth/moodlesessions.ts:21",{"_index":1030,"title":{},"body":{"classes/moodleSessions.html":{}}}],["src/auth/moodlesessions.ts:25",{"_index":1028,"title":{},"body":{"classes/moodleSessions.html":{}}}],["src/auth/moodlesessions.ts:3",{"_index":1020,"title":{},"body":{"classes/moodleSessions.html":{}}}],["src/auth/moodlesessions.ts:9",{"_index":1026,"title":{},"body":{"classes/moodleSessions.html":{}}}],["src/auth/roles/role.enum",{"_index":789,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/auth/roles/role.enum.ts",{"_index":940,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/auth/roles/roles.decorator",{"_index":791,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/auth/roles/roles.decorator.ts",{"_index":885,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/roles/roles.guard",{"_index":814,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/roles/roles.guard.ts",{"_index":317,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/roles/roles.guard.ts:11",{"_index":321,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/roles/roles.guard.ts:8",{"_index":320,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/main.ts",{"_index":886,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/plugins/codingplugin/codingplugininterfaces.ts",{"_index":247,"title":{},"body":{"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"coverage.html":{}}}],["src/plugins/codingplugin/codingpluginmain.ts",{"_index":888,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/plugins/testplugin/testplugin.ts",{"_index":892,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/task/moodlesubmithelper.ts",{"_index":893,"title":{},"body":{"coverage.html":{},"classes/moodleSubmitHelper.html":{}}}],["src/task/moodlesubmithelper.ts:1",{"_index":1039,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["src/task/moodlesubmithelper.ts:4",{"_index":1042,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["src/task/task.controller.ts",{"_index":502,"title":{},"body":{"controllers/TaskController.html":{},"coverage.html":{}}}],["src/task/task.controller.ts:119",{"_index":531,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:32",{"_index":513,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:44",{"_index":516,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:49",{"_index":525,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:54",{"_index":522,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:64",{"_index":529,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:73",{"_index":533,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:87",{"_index":515,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:99",{"_index":520,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.module.ts",{"_index":565,"title":{},"body":{"modules/TaskModule.html":{}}}],["src/task/task.schema.ts",{"_index":341,"title":{},"body":{"classes/Task.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/task/task.schema.ts:23",{"_index":366,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:26",{"_index":362,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:29",{"_index":357,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:32",{"_index":359,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:35",{"_index":367,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:38",{"_index":365,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:41",{"_index":358,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:44",{"_index":364,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:47",{"_index":360,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:50",{"_index":356,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:53",{"_index":363,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:56",{"_index":361,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:7",{"_index":354,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.service.ts",{"_index":575,"title":{},"body":{"injectables/TaskService.html":{},"coverage.html":{}}}],["src/task/task.service.ts:100",{"_index":619,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:107",{"_index":596,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:117",{"_index":597,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:125",{"_index":607,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:159",{"_index":610,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:16",{"_index":595,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:191",{"_index":613,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:22",{"_index":593,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:28",{"_index":601,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:33",{"_index":600,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:38",{"_index":603,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:48",{"_index":605,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:58",{"_index":615,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:63",{"_index":617,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:70",{"_index":608,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:83",{"_index":599,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:9",{"_index":590,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/taskcollection.controller.ts",{"_index":398,"title":{},"body":{"controllers/TaskCollectionController.html":{},"coverage.html":{}}}],["src/task/taskcollection.controller.ts:116",{"_index":417,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["src/task/taskcollection.controller.ts:126",{"_index":429,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["src/task/taskcollection.controller.ts:136",{"_index":412,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["src/task/taskcollection.controller.ts:31",{"_index":409,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["src/task/taskcollection.controller.ts:40",{"_index":414,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["src/task/taskcollection.controller.ts:45",{"_index":425,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["src/task/taskcollection.controller.ts:81",{"_index":421,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["src/task/taskcollection.schema.ts",{"_index":377,"title":{},"body":{"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/task/taskcollection.schema.ts:12",{"_index":380,"title":{},"body":{"classes/TaskCollection.html":{}}}],["src/task/taskcollection.schema.ts:24",{"_index":387,"title":{},"body":{"classes/TaskCollection.html":{}}}],["src/task/taskcollection.schema.ts:27",{"_index":384,"title":{},"body":{"classes/TaskCollection.html":{}}}],["src/task/taskcollection.schema.ts:30",{"_index":388,"title":{},"body":{"classes/TaskCollection.html":{}}}],["src/task/taskcollection.schema.ts:33",{"_index":382,"title":{},"body":{"classes/TaskCollection.html":{}}}],["src/task/taskcollection.schema.ts:36",{"_index":385,"title":{},"body":{"classes/TaskCollection.html":{}}}],["src/task/taskcollection.schema.ts:39",{"_index":381,"title":{},"body":{"classes/TaskCollection.html":{}}}],["src/task/taskcollection.schema.ts:42",{"_index":383,"title":{},"body":{"classes/TaskCollection.html":{}}}],["src/task/taskcollection.schema.ts:45",{"_index":386,"title":{},"body":{"classes/TaskCollection.html":{}}}],["src/task/taskrunner.ts",{"_index":897,"title":{},"body":{"coverage.html":{},"classes/taskRunner.html":{},"miscellaneous/variables.html":{}}}],["src/task/taskrunner.ts:14",{"_index":1063,"title":{},"body":{"classes/taskRunner.html":{}}}],["src/task/taskrunner.ts:21",{"_index":1059,"title":{},"body":{"classes/taskRunner.html":{}}}],["src/task/taskrunner.ts:4",{"_index":1057,"title":{},"body":{"classes/taskRunner.html":{}}}],["src/task/taskrunner.ts:7",{"_index":1061,"title":{},"body":{"classes/taskRunner.html":{}}}],["src/users/user.dto",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/users/user.dto.ts",{"_index":760,"title":{},"body":{"classes/UserDTO.html":{},"coverage.html":{}}}],["src/users/user.dto.ts:3",{"_index":762,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/users/user.dto.ts:5",{"_index":763,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/users/user.dto.ts:6",{"_index":767,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/users/user.dto.ts:7",{"_index":764,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/users/user.dto.ts:8",{"_index":765,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/users/user.dto.ts:9",{"_index":766,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/users/user.schema.ts",{"_index":748,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"interfaces/taskAndNote.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/user.schema.ts:14",{"_index":752,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.schema.ts:17",{"_index":758,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.schema.ts:20",{"_index":751,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.schema.ts:23",{"_index":753,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.schema.ts:26",{"_index":757,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.schema.ts:30",{"_index":756,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.schema.ts:33",{"_index":754,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":769,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:15",{"_index":786,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:22",{"_index":783,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:27",{"_index":778,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:39",{"_index":781,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:49",{"_index":788,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:61",{"_index":785,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":810,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/users/users.service.ts",{"_index":817,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:14",{"_index":839,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:21",{"_index":825,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:31",{"_index":832,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:37",{"_index":827,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:51",{"_index":829,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:63",{"_index":835,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:67",{"_index":837,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:71",{"_index":833,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:9",{"_index":823,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":978,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":981,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":983,"title":{},"body":{"index.html":{}}}],["started",{"_index":955,"title":{"index.html":{}},"body":{}}],["starter",{"_index":970,"title":{},"body":{"index.html":{}}}],["statements",{"_index":875,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1014,"title":{},"body":{"classes/moodleSessions.html":{}}}],["status",{"_index":67,"title":{},"body":{"injectables/AppService.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["stay",{"_index":1001,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":288,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/LocalStrategy.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/moodleSessions.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{},"miscellaneous/variables.html":{}}}],["string.substring(string.indexof",{"_index":1098,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sub",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["submission",{"_index":423,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["submit",{"_index":403,"title":{},"body":{"controllers/TaskCollectionController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["submit(data",{"_index":954,"title":{},"body":{"miscellaneous/functions.html":{}}}],["submit(taskcollectionid",{"_index":418,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["submithelper",{"_index":483,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["submithelper.submitnotetomoodle(session,note",{"_index":486,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["submitnotetomoodle",{"_index":1038,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["submitnotetomoodle(session",{"_index":1040,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["submitnotetomoodle(session:any,grade:number",{"_index":1043,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["submittask",{"_index":510,"title":{},"body":{"controllers/TaskController.html":{},"classes/taskRunner.html":{}}}],["submittask(task",{"_index":1062,"title":{},"body":{"classes/taskRunner.html":{}}}],["submittask(task:any,input:any):promise",{"_index":1074,"title":{},"body":{"classes/taskRunner.html":{}}}],["submittask(taskid",{"_index":530,"title":{},"body":{"controllers/TaskController.html":{}}}],["submittaskincollection",{"_index":404,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["submittaskincollection(taskcollectionid",{"_index":422,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["submitted",{"_index":474,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/moodleSubmitHelper.html":{}}}],["submittedresult",{"_index":1076,"title":{},"body":{"classes/taskRunner.html":{}}}],["submitting:\",task.closedtests,\"for",{"_index":1075,"title":{},"body":{"classes/taskRunner.html":{}}}],["successful",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["successfully",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["suche",{"_index":543,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["super",{"_index":293,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super.canactivate(context",{"_index":277,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["super.login(request",{"_index":275,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":478,"title":{},"body":{"controllers/TaskCollectionController.html":{},"index.html":{},"modules.html":{}}}],["svg",{"_index":1012,"title":{},"body":{"modules.html":{}}}],["synchronisieren",{"_index":647,"title":{},"body":{"injectables/TaskService.html":{}}}],["table",{"_index":902,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":901,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":351,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{}}}],["task",{"_index":339,"title":{"classes/Task.html":{}},"body":{"classes/Task.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"coverage.html":{},"classes/taskRunner.html":{}}}],["task._id",{"_index":715,"title":{},"body":{"injectables/TaskService.html":{}}}],["task.controller",{"_index":566,"title":{},"body":{"modules/TaskModule.html":{}}}],["task.name",{"_index":572,"title":{},"body":{"modules/TaskModule.html":{}}}],["task.schema",{"_index":534,"title":{},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{}}}],["task.service",{"_index":431,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{}}}],["task.weighting",{"_index":713,"title":{},"body":{"injectables/TaskService.html":{}}}],["task/task.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["task:\",taskdto",{"_index":627,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskalreadysubmittedflag",{"_index":726,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskandnote",{"_index":622,"title":{"interfaces/taskAndNote.html":{}},"body":{"injectables/TaskService.html":{},"classes/User.html":{},"coverage.html":{},"interfaces/taskAndNote.html":{}}}],["taskandnoteobj:taskandnote",{"_index":723,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcollection",{"_index":376,"title":{"classes/TaskCollection.html":{}},"body":{"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["taskcollection.controller",{"_index":567,"title":{},"body":{"modules/TaskModule.html":{}}}],["taskcollection.name",{"_index":573,"title":{},"body":{"modules/TaskModule.html":{}}}],["taskcollection.schema",{"_index":433,"title":{},"body":{"controllers/TaskCollectionController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{}}}],["taskcollection.tasks",{"_index":673,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcollectioncontroller",{"_index":397,"title":{"controllers/TaskCollectionController.html":{}},"body":{"controllers/TaskCollectionController.html":{},"modules/TaskModule.html":{},"coverage.html":{}}}],["taskcollectiondocument",{"_index":389,"title":{},"body":{"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{},"miscellaneous/typealiases.html":{}}}],["taskcollectiondto",{"_index":407,"title":{},"body":{"controllers/TaskCollectionController.html":{},"injectables/TaskService.html":{}}}],["taskcollectionid",{"_index":413,"title":{},"body":{"controllers/TaskCollectionController.html":{},"injectables/TaskService.html":{}}}],["taskcollectionid.match(/^[0",{"_index":649,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcollectionid}).exec",{"_index":651,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcollectionmodel",{"_index":588,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcollections",{"_index":669,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcollections.foreach((taskcollection:any",{"_index":678,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcollections.foreach(taskcollection",{"_index":672,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcollectionschema",{"_index":395,"title":{},"body":{"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["taskcollectionsfound",{"_index":677,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcollectionsfound.push(taskcollection",{"_index":676,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcollectionsfound:taskcollection",{"_index":671,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcontroller",{"_index":501,"title":{"controllers/TaskController.html":{}},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{},"coverage.html":{}}}],["taskdocument",{"_index":372,"title":{},"body":{"classes/Task.html":{},"injectables/TaskService.html":{},"miscellaneous/typealiases.html":{}}}],["taskdto",{"_index":427,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["taskdto._id",{"_index":663,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskergebnis",{"_index":560,"title":{},"body":{"controllers/TaskController.html":{}}}],["taskid",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"interfaces/taskAndNote.html":{}}}],["taskid,note:note",{"_index":724,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskid.match(/^[0",{"_index":640,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskid.tostring",{"_index":681,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskid}).exec",{"_index":645,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskid},{...rest",{"_index":666,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskincollection",{"_index":379,"title":{"interfaces/TaskInCollection.html":{}},"body":{"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"coverage.html":{}}}],["taskmodel",{"_index":591,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskmodule",{"_index":46,"title":{"modules/TaskModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules.html":{},"overview.html":{}}}],["taskname",{"_index":393,"title":{},"body":{"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{}}}],["taskorcollectionid",{"_index":612,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskrunner",{"_index":434,"title":{"classes/taskRunner.html":{}},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"coverage.html":{},"classes/taskRunner.html":{}}}],["tasks",{"_index":378,"title":{},"body":{"classes/TaskCollection.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{}}}],["tasks.foreach(task",{"_index":674,"title":{},"body":{"injectables/TaskService.html":{}}}],["tasks[]title",{"_index":646,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskschema",{"_index":374,"title":{},"body":{"classes/Task.html":{},"modules/TaskModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["taskservice",{"_index":430,"title":{"injectables/TaskService.html":{}},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"coverage.html":{},"overview.html":{}}}],["tasksincollectionarray",{"_index":710,"title":{},"body":{"injectables/TaskService.html":{}}}],["tasksincollectionarray.foreach(task",{"_index":712,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskssolvedmap",{"_index":741,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskssolvedmap.set(taskorcollectionid,note",{"_index":744,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskweightening",{"_index":716,"title":{},"body":{"injectables/TaskService.html":{}}}],["test",{"_index":796,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["test:covsupport",{"_index":987,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":986,"title":{},"body":{"index.html":{}}}],["testn",{"_index":846,"title":{},"body":{"injectables/UsersService.html":{}}}],["testresult",{"_index":1072,"title":{},"body":{"classes/taskRunner.html":{}}}],["testresults",{"_index":249,"title":{},"body":{"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{}}}],["tests",{"_index":949,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["tests:\",task.opentests,\"for",{"_index":1068,"title":{},"body":{"classes/taskRunner.html":{}}}],["thanks",{"_index":992,"title":{},"body":{"index.html":{}}}],["that.usermodel(userdto",{"_index":863,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.appservice.getstatus",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(userdto",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.loginmoodleuserandgettask(name,mail,taskid",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.ltisessioninitiate(request",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(username",{"_index":313,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.deletetasksincollection(taskid",{"_index":695,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.findalltaskcollections",{"_index":670,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.getplugin(task.plugincode",{"_index":1071,"title":{},"body":{"classes/taskRunner.html":{}}}],["this.getsingletaskcollection(taskcollectionid",{"_index":709,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.jwtservice.sign(payload",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":329,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.sessions",{"_index":1031,"title":{},"body":{"classes/moodleSessions.html":{}}}],["this.sessions.delete(key",{"_index":1036,"title":{},"body":{"classes/moodleSessions.html":{}}}],["this.sessions.get(key",{"_index":1037,"title":{},"body":{"classes/moodleSessions.html":{}}}],["this.sessions.set(key,session",{"_index":1035,"title":{},"body":{"classes/moodleSessions.html":{}}}],["this.taskcollectionmodel(taskcollectiondto",{"_index":633,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskcollectionmodel.find({}).exec",{"_index":638,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskcollectionmodel.findbyid({'_id",{"_index":650,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskcollectionmodel.findbyidandremove(taskcollectionid).exec",{"_index":697,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskcollectionmodel.findoneandupdate({_id",{"_index":689,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskmodel(taskdto",{"_index":629,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskmodel.find({searchquery}).exec",{"_index":661,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskmodel.find({}).exec",{"_index":636,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskmodel.findbyid({'_id",{"_index":644,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskmodel.findbyidandremove(taskid).exec",{"_index":696,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskmodel.findoneandupdate({_id",{"_index":665,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskservice.createcollection(taskcollectiondto",{"_index":456,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["this.taskservice.createtask(taskdto",{"_index":537,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.deletetask(taskid",{"_index":555,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.deletetaskcollection(taskcollectionid",{"_index":499,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["this.taskservice.findalltaskcollections",{"_index":458,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["this.taskservice.findalltasks",{"_index":539,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.getsingletask(taskid",{"_index":461,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["this.taskservice.getsingletaskcollection(taskcollectionid",{"_index":490,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["this.taskservice.gettaskcollectionnote(usermail,taskcollectionid",{"_index":484,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["this.taskservice.gettaskcollectionsfortask(taskid",{"_index":541,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.marktaskincollectionassubmitted(usermail,taskcollectionid,taskid,note",{"_index":473,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["this.taskservice.marktaskorcollectionassubmitted(usermail,taskcollectionid,note",{"_index":487,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["this.taskservice.marktaskorcollectionassubmitted(usermail,taskid,note",{"_index":562,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.searchtask(searchquery",{"_index":550,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.updatetask(taskdto",{"_index":552,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.updatetaskcollection(taskdto",{"_index":495,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["this.updatetaskcollection(newtaskcollection",{"_index":687,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.usermodel.find().exec",{"_index":871,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyidandremove(userdto._id).exec",{"_index":857,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyidandupdate(userdto._id,{'password",{"_index":855,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyidandupdate(userdto._id,{'username':userdto.username",{"_index":843,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone({'email",{"_index":699,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["this.usermodel.findone({'username",{"_index":869,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findoneandupdate({'email",{"_index":733,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.usersservice.changepassword(userdto",{"_index":800,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create(userdto",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.usersservice.createmoodleuser(usermail,username",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.delete(data.user",{"_index":804,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":799,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findmoodleuser(usermail",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findone('simon",{"_index":806,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(user.username",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findone(username",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.put(userdto",{"_index":805,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":278,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["timestamp",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["title",{"_index":352,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{}}}],["todo",{"_index":439,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["token",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"guards/RolesGuard.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["totalpoints",{"_index":711,"title":{},"body":{"injectables/TaskService.html":{}}}],["touch",{"_index":1002,"title":{},"body":{"index.html":{}}}],["true",{"_index":297,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TaskService.html":{}}}],["twitter",{"_index":1008,"title":{},"body":{"index.html":{}}}],["type",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type:string",{"_index":394,"title":{},"body":{"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{}}}],["typealiases",{"_index":1088,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typescript",{"_index":969,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":264,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["und",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["unit",{"_index":984,"title":{},"body":{"index.html":{}}}],["up",{"_index":737,"title":{},"body":{"injectables/TaskService.html":{}}}],["update",{"_index":662,"title":{},"body":{"injectables/TaskService.html":{}}}],["updated",{"_index":497,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["updatedtaskcollection",{"_index":496,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["updatetask",{"_index":511,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["updatetask(taskdto",{"_index":616,"title":{},"body":{"injectables/TaskService.html":{}}}],["updatetask(taskid",{"_index":532,"title":{},"body":{"controllers/TaskController.html":{}}}],["updatetaskcollection",{"_index":405,"title":{},"body":{"controllers/TaskCollectionController.html":{},"injectables/TaskService.html":{}}}],["updatetaskcollection(@param('id",{"_index":493,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["updatetaskcollection(taskdto",{"_index":618,"title":{},"body":{"injectables/TaskService.html":{}}}],["updatetaskcollection(taskid",{"_index":426,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["useclass",{"_index":816,"title":{},"body":{"modules/UsersModule.html":{}}}],["useguards",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":438,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["useguards(localauthguard",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@post('/login",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":122,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"interfaces/taskAndNote.html":{}}}],["user,userdocument",{"_index":840,"title":{},"body":{"injectables/UsersService.html":{}}}],["user,userschema",{"_index":811,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.dto",{"_index":792,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.name",{"_index":574,"title":{},"body":{"modules/TaskModule.html":{},"modules/UsersModule.html":{}}}],["user.password",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.roles?.includes(role",{"_index":338,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.schema",{"_index":812,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user:moodleuser",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdocument",{"_index":621,"title":{},"body":{"injectables/TaskService.html":{},"classes/User.html":{},"interfaces/taskAndNote.html":{},"miscellaneous/typealiases.html":{}}}],["userdto",{"_index":78,"title":{"classes/UserDTO.html":{}},"body":{"controllers/AuthController.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userdto.password",{"_index":849,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.password}).exec",{"_index":856,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.role",{"_index":858,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto:any",{"_index":866,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["userinput",{"_index":950,"title":{},"body":{"miscellaneous/functions.html":{}}}],["usermail",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["usermail}).exec",{"_index":700,"title":{},"body":{"injectables/TaskService.html":{}}}],["usermail},{...rest",{"_index":734,"title":{},"body":{"injectables/TaskService.html":{}}}],["usermodel",{"_index":589,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"injectables/UsersService.html":{},"interfaces/taskAndNote.html":{}}}],["username}).exec",{"_index":870,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.controller",{"_index":813,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":793,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/user.schema",{"_index":569,"title":{},"body":{"modules/TaskModule.html":{},"injectables/TaskService.html":{}}}],["users/users.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{}}}],["userschema",{"_index":568,"title":{},"body":{"modules/TaskModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"interfaces/taskAndNote.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":768,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":47,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":105,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uuid4",{"_index":935,"title":{},"body":{"dependencies.html":{}}}],["validate",{"_index":283,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":285,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":310,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validateduser",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateduser.password",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateduser.username",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":915,"title":{},"body":{"dependencies.html":{}}}],["value",{"_index":941,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["variable",{"_index":879,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1093,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":1025,"title":{},"body":{"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{}}}],["vorkommenden",{"_index":692,"title":{},"body":{"injectables/TaskService.html":{}}}],["watch",{"_index":979,"title":{},"body":{"index.html":{}}}],["website",{"_index":1006,"title":{},"body":{"index.html":{}}}],["weighting",{"_index":391,"title":{},"body":{"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{}}}],["you'd",{"_index":996,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getStatus\n                        \n                        \n                    \n                \n            \n            \n                \ngetStatus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Request, Post, UseGuards} from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(\n    private readonly appService: AppService) {}\n\n  @Get()\n  getStatus(): string {\n    return this.appService.getStatus();\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nTaskModule\n\nTaskModule\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            TaskModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TaskModule } from './task/task.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\nimport * as config from './config.json'\n\n@Module({\n  imports: [TaskModule, MongooseModule.forRoot(config.mongodb_path), AuthModule, UsersModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getStatus\n                        \n                        \n                    \n                \n            \n            \n                \ngetStatus()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n@Injectable()\nexport class AppService {\n  getStatus(): string {\n    return 'Backend STATUS OK :-)';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                moodleLogin\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(res, userDTO: UserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('/login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDTO\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            moodleLogin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    moodleLogin(request, response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/moodleLogin')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            register\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    register(res, userDTO: UserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/register')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDTO\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { AuthService } from './auth.service';\nimport { Controller, Post, Request, Body, Get, Param, Patch, Delete, Res, HttpStatus, UseGuards, Req} from '@nestjs/common';\nimport { LocalAuthGuard } from './local-auth.guard';\nimport { UserDTO } from 'src/users/user.dto';\nimport { UsersService } from 'src/users/users.service';\nimport { timeStamp } from 'console';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService, private readonly usersService: UsersService) {}\n\n    @UseGuards(LocalAuthGuard)\n    @Post('/login')\n    async login(@Res() res, @Body() userDTO: UserDTO) {\n      const returnObj = await this.authService.login(userDTO)\n       res.cookie('session',returnObj)\n      if(returnObj) {return res.status(HttpStatus.OK).json({\n        message: 'User logged In successful!',\n        token: returnObj\n      })} else {\n        return res.status(HttpStatus.NOT_FOUND).json({\n          message: 'Could Not Login User',\n        })\n      }\n      //return this.authService.login(userDTO)\n    }\n\n    @Post('/moodleLogin')\n    async moodleLogin(\n      @Req() request,\n      @Res() response\n    ) {\n        const {name,userId,mail,token,taskId} = await this.authService.ltiSessionInitiate(request)\n\n        const {moodleUser,solved} = await this.authService.loginMoodleUserAndGetTask(name,mail,taskId)\n\n        if(solved) {\n          return response.redirect('http://localhost:8080/solvefullscreen/alreadySubmitted')\n        } else {\n          return response.redirect('http://localhost:8080/solvefullscreen?exerciseId='+taskId+'&token='+token)\n        }\n\n      }\n\n    @Post('/register')\n    async register(    @Res() res,\n    @Body() userDTO: UserDTO, ) {\n\n        const returnObj = await this.usersService.create(userDTO);\n        if(returnObj) {return res.status(HttpStatus.OK).json({\n            message: 'User added successfully!',\n            returnObj\n          })\n        } else {\n          return res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({\n            message: 'User not added!',\n          })\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './local.strategy';\nimport { AuthController } from './auth.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [UsersModule, PassportModule, JwtModule.register({\n    secret: jwtConstants.secret,\n    signOptions: { expiresIn: '6000s' },\n  })],\n  controllers: [AuthController],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  exports: [AuthService]\n})\nexport class AuthModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                loginMoodleUserAndGetTask\n                            \n                            \n                                    Async\n                                ltiSessionInitiate\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            loginMoodleUserAndGetTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loginMoodleUserAndGetTask(userName, userMail, taskId)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userName\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userMail\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            ltiSessionInitiate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ltiSessionInitiate(request)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Req, Res } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcryptjs';\nimport moodleSessions from './moodleSessions'\nimport * as config from '../config.json'\n\nvar lti = require(\"ims-lti\");\n@Injectable()\nexport class AuthService {\n\n  constructor( private usersService: UsersService,\n               private jwtService: JwtService\n              ) {}\n\n  async validateUser(username: string, pass: string): Promise {\n    const user = await this.usersService.findOne(username);\n    //console.log(user)\n    const dbPassword = await user.password;\n    const matching = await bcrypt.compare(pass,dbPassword);\n    if(matching) {\n      return await user;\n    }\n    else return null;\n  }\n\n\n  async login(user: any) {\n    const validatedUser = await this.usersService.findOne(user.username)\n    //console.log(validatedUser)\n    const payload = { username: validatedUser.username, sub: validatedUser.password};\n    console.log(this.jwtService.decode( this.jwtService.sign(payload)))\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n\n  async ltiSessionInitiate(request):Promise {\n    let provider = new lti.Provider(config.moodle_consumer_key, config.moodle_consumer_secret); //Shared und public Secret aus moodle\n    let taskId;\n    let userId;\n    let userName;\n    let userMail;\n    let access_token;\n    provider.valid_request(request, (err, isValid) => {\n      if (!isValid) {\n        console.log(\"[LOG] INVALID LTI REQUEST\"+err)\n\n        return \"INVALID: \"+err\n      }\n      console.log(\"[LOG] LTI Session initiated:\",provider)\n      if(provider.body.custom_taskId) taskId = provider.body.custom_taskId\n      userId = provider.body.user_id\n      userName = provider.body.ext_user_username\n      userMail = provider.body.lis_person_contact_email_primary\n\n      const payload = {'obj': userMail}\n      access_token = this.jwtService.sign(payload)\n\n      const sessions = moodleSessions.getInstance();\n      sessions.addSession(access_token,provider)\n\n    })\n\n    return {name:userName,userId:userId,mail:userMail,token:access_token, taskId: taskId}\n\n  }\n\n  async loginMoodleUserAndGetTask(userName,userMail,taskId):Promise {\n    const moodleUser = await this.usersService.findMoodleUser(userMail)\n    let solved = false;\n    if(!moodleUser) {\n      this.usersService.createMoodleUser(userMail,userName)\n    } else {\n      //Has The User already solved it?\n      if(moodleUser.solvedTasksOrCollections) solved = moodleUser.solvedTasksOrCollections.has(taskId)\n\n    }\n      return {user:moodleUser, solved: solved}\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IFeedback.html":{"url":"interfaces/IFeedback.html","title":"interface - IFeedback","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IFeedback\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/plugins/codingPlugin/codingPluginInterfaces.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        message\n                                \n                                \n                                        testResults\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        testResults\n                                    \n                                \n                                \n                                    \n                                        testResults:         ITestResult[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ITestResult[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ITestResult {\n    passed: boolean,\n    message: string\n}\n\nexport interface IFeedback {\n    message: string,\n    testResults : ITestResult[]\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITestResult.html":{"url":"interfaces/ITestResult.html","title":"interface - ITestResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITestResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/plugins/codingPlugin/codingPluginInterfaces.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        message\n                                \n                                \n                                        passed\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        passed\n                                    \n                                \n                                \n                                    \n                                        passed:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ITestResult {\n    passed: boolean,\n    message: string\n}\n\nexport interface IFeedback {\n    message: string,\n    testResults : ITestResult[]\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-auth.guard.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleRequest\n                        \n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user, info)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-auth.guard.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    ExecutionContext,\n    Injectable,\n    UnauthorizedException,\n  } from '@nestjs/common';\n  import { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n    canActivate(context: ExecutionContext) {\n        // Add your custom authentication logic here\n        // for example, call super.logIn(request) to establish a session.\n        return super.canActivate(context);\n      }\n    \n      handleRequest(err, user, info) {\n        // You can throw an exception based on either \"info\" or \"err\" arguments\n        if (err || !user) {\n          throw err || new UnauthorizedException();\n        }\n        return user;\n      }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { jwtConstants } from './constants';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: true, //Kann nicht ablaufen!!! FIXME\n      secretOrKey: jwtConstants.secret,\n      session: true\n    });\n  }\n\n  async validate(payload: any) {\n    return { userId: payload.sub, username: payload.username };\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/local.strategy.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super();\n  }\n\n  async validate(username: string, password: string): Promise {\n    const user = await this.authService.validateUser(username, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/roles/roles.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/roles/roles.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/roles/roles.guard.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { JwtService } from '@nestjs/jwt';\nimport { Role } from './role.enum';\nimport { ROLES_KEY } from './roles.decorator';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!requiredRoles) {\n      return true;\n    }\n    const jwtService = new JwtService(null);\n    const token = context.switchToHttp().getRequest().headers.authorization\n    console.log(token) \n    console.log(jwtService.decode(token))\n    //const { user } = context.switchToHttp().getRequest();\n    //return requiredRoles.some((role) => user.roles?.includes(role));\n    //return false;\n    return true;\n  }\n}\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Task.html":{"url":"classes/Task.html","title":"class - Task","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/task.schema.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                closedTests\n                            \n                            \n                                content\n                            \n                            \n                                course\n                            \n                            \n                                creator\n                            \n                            \n                                dataForPlugin\n                            \n                            \n                                date\n                            \n                            \n                                description\n                            \n                            \n                                openTests\n                            \n                            \n                                pluginCode\n                            \n                            \n                                tags\n                            \n                            \n                                title\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(title: string, description: string, content: string, creator: string, type: string, tags, course: string, pluginCode: string, dataForPlugin: any, closedTests, openTests)\n                    \n                \n                        \n                            \n                                Defined in src/task/task.schema.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        title\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        description\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        content\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        creator\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tags\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        course\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pluginCode\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dataForPlugin\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        closedTests\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        openTests\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            closedTests\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            content\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            course\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            creator\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dataForPlugin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:56\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            openTests\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pluginCode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tags\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:35\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type TaskDocument = Task & Document;\n\n@Schema()\nexport class Task {\n  constructor(\n    title: string,\n    description: string,\n    content: string,\n    creator: string,\n    type: string,\n    tags: [],\n    course: string,\n    pluginCode: string,\n    dataForPlugin: any,\n    closedTests: [],\n    openTests: [],\n  ) {}\n\n  @Prop()\n  title: string;\n\n  @Prop()\n  description: string;\n\n  @Prop()\n  content: string;\n\n  @Prop()\n  creator: string;\n\n  @Prop()\n  type: string;\n\n  @Prop()\n  tags: [];\n\n  @Prop()\n  course: string;\n\n  @Prop()\n  pluginCode: string;\n\n  @Prop()\n  dataForPlugin:any;\n\n  @Prop()\n  closedTests: [];\n\n  @Prop()\n  openTests: [];\n\n  @Prop()\n  date: Date;\n\n}\n\nexport const TaskSchema = SchemaFactory.createForClass(Task);\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskCollection.html":{"url":"classes/TaskCollection.html","title":"class - TaskCollection","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskCollection\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/taskcollection.schema.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                course\n                            \n                            \n                                creator\n                            \n                            \n                                date\n                            \n                            \n                                description\n                            \n                            \n                                tags\n                            \n                            \n                                tasks\n                            \n                            \n                                title\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(title: string, description: string, type: string, creator: string, tags, course: string, tasks: TaskInCollection[])\n                    \n                \n                        \n                            \n                                Defined in src/task/taskcollection.schema.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        title\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        description\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        creator\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tags\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        course\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tasks\n                                                  \n                                                        \n                                                                        TaskInCollection[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            course\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/taskcollection.schema.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            creator\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/taskcollection.schema.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/taskcollection.schema.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/taskcollection.schema.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tags\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/taskcollection.schema.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tasks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskInCollection[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/taskcollection.schema.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/taskcollection.schema.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/taskcollection.schema.ts:30\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type TaskCollectionDocument = TaskCollection & Document;\n\ninterface TaskInCollection {\n  _id: string,\n  weighting: number,\n  taskName: string\n}\n@Schema()\nexport class TaskCollection {\n  constructor(\n    title: string,\n    description: string,\n    type:string,\n    creator: string,\n    tags: [],\n    course: string,\n    tasks: TaskInCollection[],\n  ) {}\n\n  @Prop()\n  title: string;\n\n  @Prop()\n  description: string;\n\n  @Prop()\n  type: string;\n\n  @Prop()\n  creator: string;\n\n  @Prop()\n  tags: [];\n\n  @Prop()\n  course: string;\n\n  @Prop()\n  date: Date;\n\n  @Prop()\n  tasks: TaskInCollection[];\n\n}\n\nexport const TaskCollectionSchema = SchemaFactory.createForClass(TaskCollection);\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TaskCollectionController.html":{"url":"controllers/TaskCollectionController.html","title":"controller - TaskCollectionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TaskCollectionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/taskcollection.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                taskcollection\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createNewTaskCollection\n                            \n                            \n                                    Async\n                                deleteTaskCollection\n                            \n                            \n                                getAllTaskCollections\n                            \n                            \n                                    Async\n                                getTaskCollection\n                            \n                            \n                                    Async\n                                submit\n                            \n                            \n                                    Async\n                                submitTaskInCollection\n                            \n                            \n                                    Async\n                                updateTaskCollection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createNewTaskCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createNewTaskCollection(res, taskCollectionDTO: TaskCollection)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')\n                \n            \n\n            \n                \n                    Defined in src/task/taskcollection.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskCollectionDTO\n                                    \n                                                TaskCollection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTaskCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTaskCollection(taskCollectionID: string, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/task/taskcollection.controller.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskCollectionID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllTaskCollections\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllTaskCollections()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/task/taskcollection.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTaskCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTaskCollection(taskCollectionID: string, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/task/taskcollection.controller.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskCollectionID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            submit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    submit(taskCollectionID: string, headers, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/submit/:id')\n                \n            \n\n            \n                \n                    Defined in src/task/taskcollection.controller.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskCollectionID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    headers\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            submitTaskInCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    submitTaskInCollection(taskCollectionID: string, taskID: string, headers, submission: any, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/submitTask/:taskcollectionID/:taskID')\n                \n            \n\n            \n                \n                    Defined in src/task/taskcollection.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskCollectionID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    headers\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    submission\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTaskCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTaskCollection(taskID: string, taskDTO: TaskCollection, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/update')\n                \n            \n\n            \n                \n                    Defined in src/task/taskcollection.controller.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskDTO\n                                    \n                                                TaskCollection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { TaskService } from './task.service';\nimport {\n  Controller,\n  Post,\n  Body,\n  Get,\n  Param,\n  Headers,\n  Put,\n  Delete,\n  Res,\n  HttpStatus,\n  UseGuards,\n} from '@nestjs/common';\nimport { TaskCollection } from './taskcollection.schema';\nimport taskRunner from './taskrunner';\nimport moodleSessions from '../auth/moodleSessions';\nimport { JwtAuthGuard } from 'src/auth/jwt-auth.guard';\nimport moodleSubmitHelper from './moodleSubmitHelper'\n\n@Controller('taskcollection')\n//@UseGuards(JwtAuthGuard)\nexport class TaskCollectionController {\n  constructor(private readonly taskService: TaskService) {}\n\n  //TODO: Funktioniert!! man muss nur aus dem Frontend das beim Login übermittelte Token mitschicken\n  // https://stackoverflow.com/questions/44072750/how-to-send-basic-auth-with-axios ? ausprobieren..\n  //@UseGuards(JwtAuthGuard)\n\n  @Post('/create')\n  async createNewTaskCollection(@Res() res, @Body() taskCollectionDTO: TaskCollection) {\n    const returnObj = await this.taskService.createCollection(taskCollectionDTO);\n    return res.status(HttpStatus.OK).json({\n      message: 'Task created successfully!',\n      task: returnObj,\n    });\n  }\n\n  @Get()\n  getAllTaskCollections() {\n    return this.taskService.findAllTaskCollections();\n  }\n\n  @Post('/submitTask/:taskcollectionID/:taskID')\n  async submitTaskInCollection(\n    @Param('taskcollectionID') taskCollectionID: string,\n    @Param('taskID') taskID: string,\n    @Headers() headers,\n    @Body() submission: any,\n    @Res() res\n  ) {\n    let task = await this.taskService.getSingleTask(taskID);\n    if(task) {\n      const authToken = headers.authorization;\n      let mytaskrunner = new taskRunner();\n      const note = await mytaskrunner.submitTask(task, submission);\n      const sessions = moodleSessions.getInstance()\n      const session = sessions.getSession(authToken)\n      if(session) {\n        let userId = session.body.user_id\n        let userName = session.body.ext_user_username\n        let userMail = session.body.lis_person_contact_email_primary\n        this.taskService.markTaskInCollectionAsSubmitted(userMail,taskCollectionID,taskID,note)\n        return res.status(HttpStatus.OK).json({\n          message: 'Task submitted',\n          feedback: \"OK\", //Placeholder for future submission Feedback support\n        })\n      } else {\n        return res.status(HttpStatus.UNAUTHORIZED).json({\n          message: 'Session Error. Task not submitted',\n        })\n      }\n    } else {\n      return res.status(HttpStatus.NOT_FOUND).json({\n        message: 'Error. Task not found',\n      })\n    }\n  }\n\n  @Post('/submit/:id')\n  async submit(\n    @Param('id') taskCollectionID: string,\n    @Headers() headers,\n    @Res() res\n  ) {\n    const authToken = headers.authorization;\n    const sessions = moodleSessions.getInstance()\n    const session = sessions.getSession(authToken)\n    if(session) {\n      let userId = session.body.user_id\n      let userName = session.body.ext_user_username\n      let userMail = session.body.lis_person_contact_email_primary\n      let submitHelper = new moodleSubmitHelper();\n      const note = await this.taskService.getTaskCollectionNote(userMail,taskCollectionID)\n      if(note) {\n        let status = submitHelper.submitNoteToMoodle(session,note)\n        this.taskService.markTaskOrCollectionAsSubmitted(userMail,taskCollectionID,note)\n        return res.status(HttpStatus.OK).json({\n          message: 'Task Collection submitted:',\n          feedback: status,\n        })\n      } else {\n        return res.status(HttpStatus.UNAUTHORIZED).json({\n          message: 'Session Error. Task not submitted',\n        })\n      }\n\n    } else {\n      return res.status(HttpStatus.UNAUTHORIZED).json({\n        message: 'Session Error. Task not submitted',\n      })\n    }\n  }\n\n  @Get(':id')\n  async getTaskCollection(@Param('id') taskCollectionID: string, @Res() res) {\n    const returnObj = await this.taskService.getSingleTaskCollection(taskCollectionID)\n    if(returnObj) return res.status(HttpStatus.OK).json(returnObj)\n    else return res.status(HttpStatus.NOT_FOUND).json({\n      message:\"Task Collection not found\"\n    })\n\n  }\n\n  @Put('/update')\n async  updateTaskCollection(@Param('id') taskID: string, @Body() taskDTO: TaskCollection, @Res() res) {\n    if(await this.taskService.updateTaskCollection(taskDTO)) return res.status(HttpStatus.OK).json({\n      message: 'updatedTaskCollection'\n    })\n    else return res.status(HttpStatus.NOT_FOUND).json({\n      message: 'not updated'\n    })\n  }\n\n  @Delete(':id')\n  async deleteTaskCollection(@Param('id') taskCollectionID: string, @Res() res) {\n    if(await this.taskService.deleteTaskCollection(taskCollectionID)) return res.status(HttpStatus.OK).json({\n      message: 'deleted TaskCollection'\n    })\n    else return res.status(HttpStatus.NOT_FOUND).json({\n      message: 'not deleted'\n    })\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TaskController.html":{"url":"controllers/TaskController.html","title":"controller - TaskController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TaskController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/task.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                task\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createNewTask\n                            \n                            \n                                    Async\n                                deleteTask\n                            \n                            \n                                getAllTasks\n                            \n                            \n                                    Async\n                                getOpenTests\n                            \n                            \n                                    Async\n                                getTask\n                            \n                            \n                                    Async\n                                getTaskCollectionsForTask\n                            \n                            \n                                    Async\n                                searchTask\n                            \n                            \n                                    Async\n                                submitTask\n                            \n                            \n                                    Async\n                                updateTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createNewTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createNewTask(res, taskDTO: Task)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')\n                \n            \n\n            \n                \n                    Defined in src/task/task.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskDTO\n                                    \n                                                Task\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTask(taskID: string, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/task/task.controller.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllTasks\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllTasks()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/task/task.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getOpenTests\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOpenTests(taskID: string, input: any, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/test/:id')\n                \n            \n\n            \n                \n                    Defined in src/task/task.controller.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTask(taskID: string, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/task/task.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTaskCollectionsForTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTaskCollectionsForTask(taskID: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/getTaskCollections/:id')\n                \n            \n\n            \n                \n                    Defined in src/task/task.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            searchTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    searchTask(res, searchQuery: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/searchTask')\n                \n            \n\n            \n                \n                    Defined in src/task/task.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    searchQuery\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            submitTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    submitTask(taskID: string, headers, input: any, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/submit/:id')\n                \n            \n\n            \n                \n                    Defined in src/task/task.controller.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    headers\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTask(taskID: string, taskDTO: Task, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/update')\n                \n            \n\n            \n                \n                    Defined in src/task/task.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskDTO\n                                    \n                                                Task\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { TaskService } from './task.service';\nimport { UsersService } from '../users/users.service'\nimport {\n  Controller,\n  Post,\n  Body,\n  Headers,\n  Get,\n  Param,\n  Patch,\n  Put,\n  Delete,\n  Res,\n  HttpStatus,\n  UseGuards,\n} from '@nestjs/common';\nimport { Task } from './task.schema';\nimport moodleSessions from '../auth/moodleSessions'\nimport { JwtAuthGuard } from 'src/auth/jwt-auth.guard';\nimport taskRunner from './taskrunner';\nimport moodleSubmitHelper from './moodleSubmitHelper'\n\n@Controller('task')\n//@UseGuards(JwtAuthGuard)\nexport class TaskController {\n  constructor(private readonly taskService: TaskService) {}\n\n  //TODO: Funktioniert!! man muss nur aus dem Frontend das beim Login übermittelte Token mitschicken\n  // https://stackoverflow.com/questions/44072750/how-to-send-basic-auth-with-axios ? ausprobieren..\n  //@UseGuards(JwtAuthGuard)\n  @Post('/create')\n  async createNewTask(@Res() res, @Body() taskDTO: Task) {\n\n    const returnObj = await this.taskService.createTask(taskDTO);\n    if (returnObj) {return res.status(HttpStatus.OK).json({\n      message: 'Task created successfully!',\n      task: returnObj,\n    })} else return  res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({\n      message: 'Could not create Task!',\n    })\n  }\n\n  @Get()\n  getAllTasks() {\n    return this.taskService.findAllTasks();\n  }\n\n  @Get('/getTaskCollections/:id')\n  async getTaskCollectionsForTask(@Param('id') taskID: string) {\n    return await this.taskService.getTaskCollectionsForTask(taskID);\n  }\n\n  @Get(':id')\n  async getTask(@Param('id') taskID: string, @Res() res) {\n    const returnObj = await this.taskService.getSingleTask(taskID);\n    if(returnObj) return res.status(HttpStatus.OK).json(returnObj);\n    else return res.status(HttpStatus.NOT_FOUND).json({\n      message: 'no Task found'\n    })\n  }\n\n  // Suche primär nach Tags und dann nach Name -> erhalte Searchstring\n  @Post('/searchTask')\n  async searchTask(@Res() res, @Body() searchQuery: any) {\n    const returnObj = await this.taskService.searchTask(searchQuery);\n    return res.status(HttpStatus.OK).json({\n      message: 'Gefundene Tasks:',\n      task: returnObj,\n    });\n  }\n\n  @Put('/update')\n  async updateTask(\n    @Param('id') taskID: string,\n    @Body() taskDTO: Task,\n    @Res() res\n  ) {\n    if(await this.taskService.updateTask(taskDTO)) return res.status(HttpStatus.OK).json({\n      message: 'updated Task'\n    });\n    else return res.status(HttpStatus.NOT_MODIFIED).json({\n      message: 'not deleted'\n    });\n  }\n\n  @Delete(':id')\n  async deleteTask(@Param('id') taskID: string, @Res() res) {\n\n    if(await this.taskService.deleteTask(taskID)) return res.status(HttpStatus.OK).json({\n      message: 'deleted Task'\n    });\n    else return res.status(HttpStatus.NOT_FOUND).json({\n      message: 'not deleted'\n    });\n\n  }\n\n  @Post('/test/:id')\n  async getOpenTests(\n    @Param('id') taskID: string,\n    @Body() input: any,\n    //@Headers() headers,\n    @Res() res,\n  ) {\n\n    let task = await this.taskService.getSingleTask(taskID);\n    if (task) {\n      let mytaskrunner = new taskRunner();\n      let runnedTests = await mytaskrunner.runTests(task, input);\n      return res.status(HttpStatus.OK).json(runnedTests);\n    }\n\n    return res.status(HttpStatus.NOT_FOUND).json({\n      message: 'Task not found!',\n    });\n  }\n\n  @Post('/submit/:id')\n  async submitTask(\n    @Param('id') taskID: string,\n    //@Param('token') token: string,\n    @Headers() headers,\n    @Body() input: any,\n    @Res() res,\n  ) {\n    let task = await this.taskService.getSingleTask(taskID);\n    if (task) {\n      let mytaskrunner = new taskRunner();\n      let authToken = headers.authorization;\n      let note = await mytaskrunner.submitTask(task, input);\n      //Taskergebnis an moodle senden\n      const sessions = moodleSessions.getInstance()\n      const session = sessions.getSession(authToken)\n      if(session) {\n        let userId = session.body.user_id\n        let userName = session.body.ext_user_username\n        let userMail = session.body.lis_person_contact_email_primary\n        let submitHelper = new moodleSubmitHelper();\n        let status = submitHelper.submitNoteToMoodle(session,note)\n        this.taskService.markTaskOrCollectionAsSubmitted(userMail,taskID,note)\n        return res.status(HttpStatus.OK).json({\n          message: 'Task submitted:',\n          feedback: status,\n        });\n      } else {\n        return res.status(HttpStatus.UNAUTHORIZED).json({\n          message: 'Session Error. Task not submitted',\n        });\n      }\n\n    }\n    return res.status(HttpStatus.NOT_FOUND).json({\n      message: 'Task not found!',\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TaskInCollection.html":{"url":"interfaces/TaskInCollection.html","title":"interface - TaskInCollection","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TaskInCollection\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/taskcollection.schema.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        _id\n                                \n                                \n                                        taskName\n                                \n                                \n                                        weighting\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        taskName\n                                    \n                                \n                                \n                                    \n                                        taskName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        weighting\n                                    \n                                \n                                \n                                    \n                                        weighting:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type TaskCollectionDocument = TaskCollection & Document;\n\ninterface TaskInCollection {\n  _id: string,\n  weighting: number,\n  taskName: string\n}\n@Schema()\nexport class TaskCollection {\n  constructor(\n    title: string,\n    description: string,\n    type:string,\n    creator: string,\n    tags: [],\n    course: string,\n    tasks: TaskInCollection[],\n  ) {}\n\n  @Prop()\n  title: string;\n\n  @Prop()\n  description: string;\n\n  @Prop()\n  type: string;\n\n  @Prop()\n  creator: string;\n\n  @Prop()\n  tags: [];\n\n  @Prop()\n  course: string;\n\n  @Prop()\n  date: Date;\n\n  @Prop()\n  tasks: TaskInCollection[];\n\n}\n\nexport const TaskCollectionSchema = SchemaFactory.createForClass(TaskCollection);\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TaskModule.html":{"url":"modules/TaskModule.html","title":"module - TaskModule","body":"\n                   \n\n\n\n\n    Modules\n    TaskModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TaskModule\n\n\n\ncluster_TaskModule_providers\n\n\n\n\nTaskService\n\nTaskService\n\n\n\nTaskModule\n\nTaskModule\n\nTaskModule -->\n\nTaskService->TaskModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/task/task.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TaskService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TaskController\n                        \n                        \n                            TaskCollectionController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { TaskService } from './task.service';\nimport { TaskController } from './task.controller';\nimport { TaskCollectionController } from './taskcollection.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Module } from '@nestjs/common';\nimport { Task, TaskSchema } from './task.schema';\nimport { User, UserSchema } from '../users/user.schema';\nimport { TaskCollection, TaskCollectionSchema} from './taskcollection.schema'\nimport { APP_GUARD } from '@nestjs/core';\nimport { UsersService } from '../users/users.service'\n@Module({\n  imports: [MongooseModule.forFeature([{name: Task.name, schema: TaskSchema}]),\n            MongooseModule.forFeature([{name: TaskCollection.name, schema: TaskCollectionSchema}]),\n            MongooseModule.forFeature([{name: User.name, schema: UserSchema}])\n           ],\n  controllers: [TaskController, TaskCollectionController],\n  providers: [TaskService]\n})\nexport class TaskModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TaskService.html":{"url":"injectables/TaskService.html","title":"injectable - TaskService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TaskService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/task.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCollection\n                            \n                            \n                                    Async\n                                createTask\n                            \n                            \n                                    Async\n                                deleteTask\n                            \n                            \n                                    Async\n                                deleteTaskCollection\n                            \n                            \n                                    Private\n                                    Async\n                                deleteTasksInCollection\n                            \n                            \n                                    Async\n                                findAllTaskCollections\n                            \n                            \n                                    Async\n                                findAllTasks\n                            \n                            \n                                    Async\n                                getSingleTask\n                            \n                            \n                                    Async\n                                getSingleTaskCollection\n                            \n                            \n                                    Async\n                                getTaskCollectionNote\n                            \n                            \n                                    Async\n                                getTaskCollectionsForTask\n                            \n                            \n                                    Async\n                                markTaskInCollectionAsSubmitted\n                            \n                            \n                                    Async\n                                markTaskOrCollectionAsSubmitted\n                            \n                            \n                                    Async\n                                searchTask\n                            \n                            \n                                    Async\n                                updateTask\n                            \n                            \n                                    Async\n                                updateTaskCollection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskModel: Model, taskCollectionModel: Model, userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/task/task.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        taskCollectionModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createCollection(taskCollectionDto: TaskCollection)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskCollectionDto\n                                    \n                                                TaskCollection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTask(taskDto: Task)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskDto\n                                    \n                                                Task\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTask(taskId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTaskCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTaskCollection(taskCollectionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskCollectionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            deleteTasksInCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTasksInCollection(taskId)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAllTaskCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllTaskCollections()\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAllTasks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllTasks()\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSingleTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSingleTask(taskId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSingleTaskCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSingleTaskCollection(taskCollectionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskCollectionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTaskCollectionNote\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTaskCollectionNote(usermail: string, taskCollectionID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    usermail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskCollectionID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTaskCollectionsForTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTaskCollectionsForTask(taskId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            markTaskInCollectionAsSubmitted\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    markTaskInCollectionAsSubmitted(usermail: string, taskCollectionID: string, taskID: string, note: number)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:159\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    usermail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskCollectionID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    note\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            markTaskOrCollectionAsSubmitted\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    markTaskOrCollectionAsSubmitted(usermail: string, taskOrCollectionId: string, note: number)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:191\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    usermail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskOrCollectionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    note\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            searchTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    searchTask(searchQuery: any)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    searchQuery\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTask(taskDto: any)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskDto\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTaskCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTaskCollection(taskDto: any)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskDto\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Task, TaskDocument } from './task.schema';\nimport { User, UserDocument, taskAndNote } from '../users/user.schema';\nimport { TaskCollection, TaskCollectionDocument } from './taskcollection.schema'\n\n@Injectable()\nexport class TaskService {\n  constructor (\n    @InjectModel('Task') private taskModel: Model,\n    @InjectModel('TaskCollection') private taskCollectionModel: Model,\n    @InjectModel('User') private userModel: Model\n  ) {}\n\n  async createTask(taskDto: Task): Promise {\n    console.log(\"[LOG] Creating New Task:\",taskDto)\n    const createdTask = new this.taskModel(taskDto);\n    return createdTask.save();\n  }\n\n  async createCollection(taskCollectionDto: TaskCollection): Promise {\n    console.log(\"[LOG] Creating New Task Collection:\",taskCollectionDto)\n    const createdTaskCollection = new this.taskCollectionModel(taskCollectionDto);\n    return createdTaskCollection.save();\n  }\n\n  async findAllTasks(): Promise {\n    console.log(\"[LOG] Getting all Tasks\")\n    return this.taskModel.find({}).exec();\n  }\n\n  async findAllTaskCollections(): Promise {\n    console.log(\"[LOG] Getting all Task Collections\")\n    return this.taskCollectionModel.find({}).exec();\n  }\n\n  async getSingleTask(taskId: string): Promise {\n    console.log(\"[LOG] Getting Task with ID:\",taskId)\n    if (taskId.match(/^[0-9a-fA-F]{24}$/)) {\n      return this.taskModel.findById({'_id': taskId}).exec();\n    } else {\n      return null;\n    }\n  }\n\n\t//TODO: TaskCollection tasks[]title synchronisieren\n  async getSingleTaskCollection(taskCollectionId: string): Promise {\n    console.log(\"[LOG] Getting Task Collection with ID:\",taskCollectionId)\n    if (taskCollectionId.match(/^[0-9a-fA-F]{24}$/)) {\n      return this.taskCollectionModel.findById({'_id': taskCollectionId}).exec();\n    } else {\n      return null;\n    }\n  }\n\n  // Objekt mit 2 Arrays: Suche nach Tags und Suche nach Name: TODO: SearchByTag, SearchByName\n  async searchTask(searchQuery: any):Promise {\n    console.log(\"[LOG] Search Task with query\",searchQuery);\n    return this.taskModel.find({searchQuery}).exec();\n  }\n\n  async updateTask(taskDto: any): Promise {\n    console.log(\"[LOG] Update Task \",taskDto)\n    const taskID = taskDto._id\n    let {_id, ...rest} = taskDto\n    return this.taskModel.findOneAndUpdate({_id: taskID},{...rest}, {new:true})\n  }\n\n  async getTaskCollectionsForTask(taskId: string): Promise {\n    console.log(\"[LOG] Finding TaskCollections for task \",taskId)\n    const taskCollections = await this.findAllTaskCollections();\n    let taskCollectionsFound:TaskCollection[] = []\n    taskCollections.forEach(taskCollection => {\n      const tasks = taskCollection.tasks\n      tasks.forEach(task => {\n        if(task._id === taskId) taskCollectionsFound.push(taskCollection)\n      })\n    })\n    return taskCollectionsFound\n  }\n\n  private async deleteTasksInCollection(taskId) {\n    const taskCollections = await this.findAllTaskCollections();\n    taskCollections.forEach((taskCollection:any) => {\n      const tasks = taskCollection.tasks\n      const newTasksForCollection = []\n      tasks.forEach(task => {\n        if(!(task._id.toString() === taskId.toString())) newTasksForCollection.push(task)\n      })\n      if(tasks.length != newTasksForCollection.length) {\n        let newTaskCollection = taskCollection\n        newTaskCollection.tasks = newTasksForCollection;\n        this.updateTaskCollection(newTaskCollection)\n      }\n\n    })\n  }\n\n  async updateTaskCollection(taskDto: any): Promise {\n    console.log(\"[LOG] Update Task Collection\",taskDto)\n    const taskID = taskDto._id\n    let {_id, ...rest} = taskDto\n    return this.taskCollectionModel.findOneAndUpdate({_id: taskID},{...rest}, {new:true})\n  }\n\n  async deleteTask(taskId: string): Promise {\n    if (taskId.match(/^[0-9a-fA-F]{24}$/)) {\n      //Cleanup: Task in den vorkommenden Collections auch löschen\n      this.deleteTasksInCollection(taskId)\n      return this.taskModel.findByIdAndRemove(taskId).exec();\n    } else {\n      return null;\n    }\n  }\n\n  async deleteTaskCollection(taskCollectionId: string): Promise {\n    if (taskCollectionId.match(/^[0-9a-fA-F]{24}$/)) {\n      return this.taskCollectionModel.findByIdAndRemove(taskCollectionId).exec();\n    } else {\n      return null;\n    }\n  }\n\n  async getTaskCollectionNote(usermail:string,taskCollectionID:string):Promise {\n    let moodleUser = await this.userModel.findOne({'email': usermail}).exec()\n    let note = 0\n    if(moodleUser) {\n      const solvedTasksInCollectionMap = moodleUser.solvedTasksInCollection\n\n      if(solvedTasksInCollectionMap && solvedTasksInCollectionMap.has(taskCollectionID)) {\n        const solvedTasksInCollection = solvedTasksInCollectionMap.get(taskCollectionID)\n        const taskCollection = await this.getSingleTaskCollection(taskCollectionID)\n        const tasksInCollectionArray = taskCollection.tasks\n        let totalPoints = 0\n        tasksInCollectionArray.forEach(task => {\n          const weighting = +task.weighting\n          totalPoints += +weighting\n        })\n        let archievedPoints = 0\n        tasksInCollectionArray.forEach(task => {\n          const taskID = task._id\n          const taskweightening = task.weighting\n          solvedTasksInCollection.forEach(solvedTask => {\n            if(solvedTask.taskID == taskID) {\n              archievedPoints += (taskweightening * (solvedTask.note/100))\n            }\n          })\n        })\n        note = archievedPoints/totalPoints *100\n      }\n\n    } else {\n      return null\n    }\n    return note\n  }\n\n  async markTaskInCollectionAsSubmitted(usermail:string,taskCollectionID:string,taskID:string,note:number):Promise {\n    let moodleUser = await this.userModel.findOne({'email': usermail}).exec()\n    if(moodleUser) {\n      let solvedTasksInCollectionMap = moodleUser.solvedTasksInCollection\n      let solvedTasksInCollection = []\n      let taskAndNoteObj:taskAndNote = {taskID: taskID,note:note}\n      if(solvedTasksInCollectionMap) {\n        if(solvedTasksInCollectionMap.has(taskCollectionID)) {\n          solvedTasksInCollection = solvedTasksInCollectionMap.get(taskCollectionID)\n          let taskAlreadySubmittedFlag = false;\n          solvedTasksInCollection.forEach(submittedTask => {\n            if(submittedTask.taskID == taskID) { taskAlreadySubmittedFlag = true }\n          })\n          if(!taskAlreadySubmittedFlag) {\n            solvedTasksInCollection.push(taskAndNoteObj)\n            solvedTasksInCollectionMap.set(taskCollectionID,solvedTasksInCollection)\n          }\n        } else {\n          solvedTasksInCollection.push(taskAndNoteObj)\n          solvedTasksInCollectionMap.set(taskCollectionID,solvedTasksInCollection)\n        }\n      } else {\n        solvedTasksInCollection.push(taskAndNoteObj)\n        solvedTasksInCollectionMap = new Map([[taskCollectionID,solvedTasksInCollection]])\n      }\n      moodleUser.solvedTasksInCollection = solvedTasksInCollectionMap\n      let {_id, ...rest} = moodleUser\n      return this.userModel.findOneAndUpdate({'email': usermail},{...rest}, {new:true})\n    } else return null\n\n  }\n\n  async markTaskOrCollectionAsSubmitted(usermail:string,taskOrCollectionId:string,note:number):Promise {\n    let moodleUser = await this.userModel.findOne({'email': usermail}).exec()\n    if(moodleUser) {\n      //Clean Up User Tasks In Collection Submitted\n      let solvedTasksInCollection = moodleUser.solvedTasksInCollection\n      if(solvedTasksInCollection && solvedTasksInCollection.has(taskOrCollectionId)) {\n        solvedTasksInCollection.delete(taskOrCollectionId)\n      }\n      let tasksSolvedMap = moodleUser.solvedTasksOrCollections\n      if(tasksSolvedMap) {\n        tasksSolvedMap.set(taskOrCollectionId,note)\n      } else {\n        tasksSolvedMap = new Map([[taskOrCollectionId,note]])\n      }\n\n      moodleUser.solvedTasksOrCollections = tasksSolvedMap\n      moodleUser.solvedTasksInCollection = solvedTasksInCollection\n      //Filter id\n      let {_id, ...rest} = moodleUser\n      return this.userModel.findOneAndUpdate({'email': usermail},{...rest}, {new:true})\n    } else return null\n\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.schema.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                role\n                            \n                            \n                                solvedTasksInCollection\n                            \n                            \n                                solvedTasksOrCollections\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.schema.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.schema.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.schema.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.schema.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            solvedTasksInCollection\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Map\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.schema.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            solvedTasksOrCollections\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.schema.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.schema.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type UserDocument = User & Document;\n\nexport interface taskAndNote {\n  taskID: string,\n  note: number\n}\n@Schema()\nexport class User {\n\n  @Prop()\n  name: string;\n\n  @Prop()\n  username: string;\n\n  @Prop()\n  email: string;\n\n  @Prop()\n  password: string;\n\n  @Prop()\n  solvedTasksOrCollections: Map;\n\n  //;\n\n  @Prop()\n  role: string;\n\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDTO.html":{"url":"classes/UserDTO.html","title":"class - UserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                _id\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                password\n                            \n                            \n                                    Public\n                                role\n                            \n                            \n                                    Public\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_id: string, username: string, email: string, password: string, role: string)\n                    \n                \n                        \n                            \n                                Defined in src/users/user.dto.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        username\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        email\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        password\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        role\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            _id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserDTO {\n    constructor(\n      public _id: string,\n      public username: string,\n      public email: string, \n      public password: string, \n      public role: string\n      ) {}\n  }\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                getAllUsers\n                            \n                            \n                                getTestUser\n                            \n                            \n                                getUser\n                            \n                            \n                                    Async\n                                putUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            changePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    changePassword(res, userDTO: UserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/changePassword')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDTO\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(res, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllUsers\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/getUsers')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTestUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetTestUser()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/testUser')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetUser()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { user: string; role: string; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            putUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    putUser(res, userDTO: UserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDTO\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, Get, Param, Patch, Put, Delete, Res, HttpStatus, UseGuards } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { JwtAuthGuard } from 'src/auth/jwt-auth.guard';\nimport { Role } from 'src/auth/roles/role.enum';\nimport { Roles } from 'src/auth/roles/roles.decorator';\nimport { UserDTO } from './user.dto';\nimport { UsersService } from './users.service';\n@Controller('user')\nexport class UsersController {\n\n  constructor(private readonly usersService: UsersService) {}\n    @Get()\n    //@UseGuards(JwtAuthGuard)\n    //@Roles(Role.Admin)\n    getUser() {\n      return {user: 'test', role:'test'}\n    }\n\n    @Get('/getUsers')\n    //@UseGuards(JwtAuthGuard)\n    //@Roles(Role.User)\n    getAllUsers() {\n      return this.usersService.findAll();\n    }\n\n    @Put('/changePassword')\n    async changePassword(\n      @Res() res,\n    @Body() userDTO: UserDTO) {\n        const returnObj = await this.usersService.changePassword(userDTO)\n\n      return res.status(HttpStatus.OK).json({\n        message: 'User Password changed!',\n        user: returnObj\n      })\n    }\n\n    @Delete()\n    async deleteUser(@Res() res, @Body() data: any) {\n      console.log(data.user)\n      const returnObj = await this.usersService.delete(data.user)\n      return res.status(HttpStatus.OK).json({\n        message: 'User Password changed!',\n        user: returnObj\n      })\n    }\n\n    @Put()\n    async putUser(\n      @Res() res,\n    @Body() userDTO: UserDTO) {\n\n      const returnObj = await this.usersService.put(userDTO)\n      return res.status(HttpStatus.OK).json({\n          message: 'User changed successful!',\n          user: returnObj\n        })\n    }\n\n    @Get('/testUser')\n    getTestUser() {\n      return this.usersService.findOne('simon')\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User,UserSchema } from './user.schema';\nimport { UsersController } from './users.controller';\nimport { APP_GUARD } from '@nestjs/core';\nimport { RolesGuard } from 'src/auth/roles/roles.guard';\n\n\n@Module({\n  imports: [MongooseModule.forFeature([{name: User.name, schema: UserSchema}])],\n  controllers: [UsersController],\n  providers: [UsersService,   {\n    provide: APP_GUARD,\n    useClass: RolesGuard,\n  }],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                createMoodleUser\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findMoodleUser\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                put\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            changePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    changePassword(userDto: UserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userDto: UserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createMoodleUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createMoodleUser(mail: string, username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(userDto: UserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findMoodleUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findMoodleUser(mail: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            put\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    put(userDto: UserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { UserDTO } from './user.dto';\nimport { User,UserDocument } from './user.schema';\nimport * as bcrypt from 'bcryptjs';\n\n@Injectable()\nexport class UsersService {\n  constructor(@InjectModel('User') private userModel: Model) {\n\n  }\n\n  async put(userDto: UserDTO) {\n    console.log(\"[LOG] Put User:\")\n    console.log(userDto)\n    return this.userModel.findByIdAndUpdate(userDto._id,{'username':userDto.username, 'email':userDto.email, 'role':userDto.role}).exec(); //TODO: testn\n  }\n\n  //TODO: Check old Password??\n  async changePassword(userDto: UserDTO) {\n    var password = userDto.password;\n    const saltRounds = 10;\n    const hashedPassword = await bcrypt.hash(password,saltRounds);\n    userDto.password = await hashedPassword;\n    console.log(\"[LOG] Change Password User:\");\n    console.log(userDto);\n    return this.userModel.findByIdAndUpdate(userDto._id,{'password': userDto.password}).exec();\n  }\n\n  async delete(userDto: UserDTO) {\n    console.log(\"[LOG] Delete User:\")\n    console.log(userDto)\n    return this.userModel.findByIdAndRemove(userDto._id).exec();\n  }\n\n  async create(userDto: UserDTO): Promise {\n\n    var that = this;\n    var password = userDto.password\n    const saltRounds = 10;\n    const hashedPassword = await bcrypt.hash(password,saltRounds);\n    userDto.password = await hashedPassword;\n    userDto.role = \"user\"; //Erstmal User by default\n    console.log(\"[LOG] Save new User\")\n    console.log(userDto)\n    const createdUser = await new that.userModel(userDto);\n    return createdUser.save()\n  }\n\n  async createMoodleUser(mail:string,username:string) : Promise {\n    var that = this;\n    const userDto:any = {\n      username: username,\n      email: mail,\n      password: \"\",\n      role: \"moodleuser\"\n    }\n    const createdUser = await new that.userModel(userDto);\n    return createdUser.save()\n  }\n\n  async findMoodleUser(mail:string): Promise {\n    return this.userModel.findOne({'email': mail}).exec()\n  }\n\n  async findOne(username: string): Promise {\n    return this.userModel.findOne({'username': username}).exec();\n  }\n\n  async findAll(): Promise {\n    return this.userModel.find().exec();\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            variable\n            lti\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/moodleSessions.ts\n            \n            class\n            moodleSessions\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/roles/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/roles/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/roles/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/plugins/codingPlugin/codingPluginInterfaces.ts\n            \n            interface\n            IFeedback\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/plugins/codingPlugin/codingPluginInterfaces.ts\n            \n            interface\n            ITestResult\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/plugins/codingPlugin/codingPluginMain.ts\n            \n            function\n            codingTests\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/plugins/codingPlugin/codingPluginMain.ts\n            \n            function\n            getNote\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/plugins/codingPlugin/codingPluginMain.ts\n            \n            function\n            getOpenTests\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/plugins/codingPlugin/codingPluginMain.ts\n            \n            function\n            submit\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/plugins/codingPlugin/codingPluginMain.ts\n            \n            variable\n            getBody\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/plugins/testPlugin/testPlugin.ts\n            \n            function\n            getOpenTests\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/plugins/testPlugin/testPlugin.ts\n            \n            function\n            submit\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/task/moodleSubmitHelper.ts\n            \n            class\n            moodleSubmitHelper\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/task/task.controller.ts\n            \n            controller\n            TaskController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/task/task.schema.ts\n            \n            class\n            Task\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/task/task.schema.ts\n            \n            variable\n            TaskSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/task/task.service.ts\n            \n            injectable\n            TaskService\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/task/taskcollection.controller.ts\n            \n            controller\n            TaskCollectionController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/task/taskcollection.schema.ts\n            \n            class\n            TaskCollection\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/task/taskcollection.schema.ts\n            \n            interface\n            TaskInCollection\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/task/taskcollection.schema.ts\n            \n            variable\n            TaskCollectionSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/task/taskrunner.ts\n            \n            class\n            taskRunner\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/task/taskrunner.ts\n            \n            variable\n            pluginDirectoryPath\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/user.dto.ts\n            \n            class\n            UserDTO\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/user.schema.ts\n            \n            interface\n            taskAndNote\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/10)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.6.5\n        \n            @nestjs/config : ^0.5.0\n        \n            @nestjs/core : ^7.5.1\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/mongoose : ^7.0.2\n        \n            @nestjs/passport : ^7.1.3\n        \n            @nestjs/platform-express : ^7.5.1\n        \n            axios : ^0.21.1\n        \n            bcryptjs : ^2.4.3\n        \n            class-validator : ^0.12.2\n        \n            ims-lti : ^3.0.2\n        \n            lodash : ^4.17.20\n        \n            lodash.isnumber : ^3.0.3\n        \n            mongoose : ^5.10.14\n        \n            notevil : ^1.3.3\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.3\n        \n            uuid4 : ^2.0.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Role   (src/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/roles/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 Dozent\n                            \n                        \n                        \n                            \n                                Value : dozent\n                            \n                        \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            codingTests   (src/.../codingPluginMain.ts)\n                        \n                        \n                            getNote   (src/.../codingPluginMain.ts)\n                        \n                        \n                            getOpenTests   (src/.../codingPluginMain.ts)\n                        \n                        \n                            getOpenTests   (src/.../testPlugin.ts)\n                        \n                        \n                            submit   (src/.../codingPluginMain.ts)\n                        \n                        \n                            submit   (src/.../testPlugin.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/plugins/codingPlugin/codingPluginMain.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            codingTests\n                        \n                        \n                    \n                \n            \n            \n                \ncodingTests(inputparams, tests, userInput)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    inputparams\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tests\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userInput\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNote\n                        \n                        \n                    \n                \n            \n            \n                \ngetNote(inputparams, tests, userInput)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    inputparams\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tests\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userInput\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOpenTests\n                        \n                        \n                    \n                \n            \n            \n                \ngetOpenTests(data: any, tests: any, input: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tests\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            submit\n                        \n                        \n                    \n                \n            \n            \n                \nsubmit(data: any, tests: any, input: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tests\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/plugins/testPlugin/testPlugin.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            getOpenTests\n                        \n                        \n                    \n                \n            \n            \n                \ngetOpenTests(data: any, tests: any, input: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tests\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            submit\n                        \n                        \n                    \n                \n            \n            \n                \nsubmit(data: any, tests: any, input: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tests\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TaskModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/moodleSessions.html":{"url":"classes/moodleSessions.html","title":"class - moodleSessions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  moodleSessions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/moodleSessions.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                instance\n                            \n                            \n                                    Private\n                                sessions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addSession\n                            \n                            \n                                    Static\n                                getInstance\n                            \n                            \n                                    Public\n                                getSession\n                            \n                            \n                                    Public\n                                removeSession\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Private\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/moodleSessions.ts:3\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            instance\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         moodleSessions\n\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/moodleSessions.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            sessions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/moodleSessions.ts:3\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addSession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addSession(key: string, session: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/moodleSessions.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    session\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getInstance\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInstance()\n                \n            \n\n\n            \n                \n                    Defined in src/auth/moodleSessions.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         moodleSessions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getSession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSession(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/moodleSessions.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeSession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeSession(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/moodleSessions.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export default class moodleSessions {\n    private static instance: moodleSessions;\n    private sessions : Map //key, session\n\n    private constructor (){\n        this.sessions = new Map(); //key, session\n    }\n\n    public static getInstance():moodleSessions {\n        if(!moodleSessions.instance) {\n            moodleSessions.instance = new moodleSessions();\n        }\n\n        return moodleSessions.instance;\n    }\n\n    public addSession(key : string, session : any) {\n        this.sessions.set(key,session)\n    }\n\n    public removeSession(key : string) {\n        this.sessions.delete(key)\n    }\n\n    public getSession(key : string) {\n        return this.sessions.get(key)\n    }\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/moodleSubmitHelper.html":{"url":"classes/moodleSubmitHelper.html","title":"class - moodleSubmitHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  moodleSubmitHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/moodleSubmitHelper.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                submitNoteToMoodle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/task/moodleSubmitHelper.ts:1\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            submitNoteToMoodle\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    submitNoteToMoodle(session: any, grade: number)\n                \n            \n\n\n            \n                \n                    Defined in src/task/moodleSubmitHelper.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    session\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    grade\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export default class moodleSubmitHelper {\n    constructor() {}\n\n    public submitNoteToMoodle(session:any,grade:number) {\n    session.outcome_service.send_replace_result(grade/100, (err, isValid) => {\n      if (!isValid) {\n        if(!session.outcome_service) {\n          console.log(\"[LOG] No Outcome Service in session!\")\n        }\n        console.log(\"[LOG] INVALID Grade:\")\n        console.log(err)\n\n        return \"INVALID GRADE \"+err\n      }\n      console.log(\"[LOG] Note submitted: \",grade)\n      return ('OK')\n      })\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_TaskModule\n\n\n\ncluster_TaskModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nTaskModule\n\nTaskModule\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nTaskService\n\nTaskService\n\nTaskModule -->\n\nTaskService->TaskModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/taskAndNote.html":{"url":"interfaces/taskAndNote.html","title":"interface - taskAndNote","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  taskAndNote\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.schema.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        note\n                                \n                                \n                                        taskID\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        note\n                                    \n                                \n                                \n                                    \n                                        note:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        taskID\n                                    \n                                \n                                \n                                    \n                                        taskID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type UserDocument = User & Document;\n\nexport interface taskAndNote {\n  taskID: string,\n  note: number\n}\n@Schema()\nexport class User {\n\n  @Prop()\n  name: string;\n\n  @Prop()\n  username: string;\n\n  @Prop()\n  email: string;\n\n  @Prop()\n  password: string;\n\n  @Prop()\n  solvedTasksOrCollections: Map;\n\n  //;\n\n  @Prop()\n  role: string;\n\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/taskRunner.html":{"url":"classes/taskRunner.html","title":"class - taskRunner","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  taskRunner\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/taskrunner.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                getPlugin\n                            \n                            \n                                    Async\n                                runTests\n                            \n                            \n                                    Async\n                                submitTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/task/taskrunner.ts:4\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            getPlugin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPlugin(pluginCode: string)\n                \n            \n\n\n            \n                \n                    Defined in src/task/taskrunner.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pluginCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            runTests\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    runTests(task: any, input: any)\n                \n            \n\n\n            \n                \n                    Defined in src/task/taskrunner.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    task\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            submitTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    submitTask(task: any, input: any)\n                \n            \n\n\n            \n                \n                    Defined in src/task/taskrunner.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    task\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as plugins from '../plugins/plugins.json'\nconst pluginDirectoryPath = \"../plugins/\"\n\nexport default class taskRunner {\n  constructor() {}\n\n  async runTests(task:any,input:any):Promise {\n    console.log(\"[LOG] Running Tests:\",task.openTests,\"for data:\",input)\n    const plugin = await this.getPlugin(task.pluginCode)\n    const testResult = plugin.default.getOpenTests(task.dataForPlugin,task.openTests,input)\n    return testResult\n  }\n\n  async submitTask(task:any,input:any):Promise {\n      console.log(\"[LOG] Submitting:\",task.closedTests,\"for data:\",input)\n      const plugin = await this.getPlugin(task.pluginCode)\n      const submittedResult = plugin.default.submit(task.dataForPlugin,task.closedTests,input)\n      return submittedResult\n  }\n\n  private async getPlugin(pluginCode:string) {\n    let pluginFileName:string\n    let pluginDirectory:string\n    plugins.forEach(plugin=> {\n      if(plugin.name == pluginCode) {\n        pluginFileName=plugin.mainFile\n        pluginDirectory=plugin.directory\n      }\n    })\n    const pathToFile = pluginDirectoryPath+pluginDirectory+'/'+pluginFileName\n    return import(pathToFile)\n  }\n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TaskCollectionDocument   (src/.../taskcollection.schema.ts)\n                        \n                        \n                            TaskDocument   (src/.../task.schema.ts)\n                        \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/task/taskcollection.schema.ts\n    \n    \n        \n            \n                \n                    \n                    TaskCollectionDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/task/task.schema.ts\n    \n    \n        \n            \n                \n                    \n                    TaskDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/users/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            getBody   (src/.../codingPluginMain.ts)\n                        \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                        \n                            lti   (src/.../auth.service.ts)\n                        \n                        \n                            pluginDirectoryPath   (src/.../taskrunner.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            TaskCollectionSchema   (src/.../taskcollection.schema.ts)\n                        \n                        \n                            TaskSchema   (src/.../task.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/plugins/codingPlugin/codingPluginMain.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getBody\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (string) => string.substring(string.indexOf(\"{\") + 1,string.lastIndexOf(\"}\"))\n                        \n                    \n\n\n            \n        \n\n    src/auth/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConstants\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    secret: 'secretKey',\n}\n                        \n                    \n\n\n            \n        \n\n    src/auth/auth.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            lti\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require(\"ims-lti\")\n                        \n                    \n\n\n            \n        \n\n    src/task/taskrunner.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            pluginDirectoryPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"../plugins/\"\n                        \n                    \n\n\n            \n        \n\n    src/auth/roles/roles.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ROLES_KEY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'roles'\n                        \n                    \n\n\n            \n        \n\n    src/task/taskcollection.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TaskCollectionSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(TaskCollection)\n                        \n                    \n\n\n            \n        \n\n    src/task/task.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TaskSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Task)\n                        \n                    \n\n\n            \n        \n\n    src/users/user.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UserSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(User)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
