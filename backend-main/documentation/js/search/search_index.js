var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.259,1,2.226]],["body/controllers/AppController.html",[0,2.089,1,3.694,2,1.836,3,0.391,4,0.344,5,0.344,6,3.844,7,0.391,8,1.471,9,5.287,10,2.132,11,0.027,12,0.9,13,4.559,14,1.121,15,1.1,16,0.795,17,3.373,18,2.741,19,2.741,20,0.97,21,3.31,22,3.844,23,0.391,24,0.093,25,1.384,26,2.307,27,2.741,28,1.121,29,4.559,30,0.018,31,0.022,32,0.018]],["title/modules/AppModule.html",[33,1.456,34,2.226]],["body/modules/AppModule.html",[1,3.688,2,2.016,3,0.329,4,0.29,5,0.29,11,0.027,16,0.923,20,0.818,21,3.445,22,3.242,23,0.329,24,0.078,30,0.015,31,0.02,32,0.015,33,2.412,34,4.432,35,1.945,36,1.945,37,2.311,38,2.311,39,1.945,40,3.345,41,2.311,42,3.242,43,3.242,44,3.242,45,3.767,46,3.767,47,3.445,48,3.009,49,2.311,50,2.311,51,3.844,52,3.317,53,3.844,54,3.844,55,2.845,56,1.441,57,3.844,58,3.242,59,3.242,60,2.845,61,3.844]],["title/injectables/AppService.html",[21,1.847,62,0.769]],["body/injectables/AppService.html",[3,0.405,4,0.356,5,0.356,7,0.405,8,1.503,9,5.351,11,0.027,12,0.932,14,1.161,15,1.124,16,0.674,20,1.005,21,3.131,23,0.405,24,0.096,28,1.161,30,0.019,31,0.023,32,0.019,62,1.303,63,2.047,64,3.982,65,4.722,66,3.494,67,3.494,68,3.494]],["title/controllers/AuthController.html",[0,1.259,69,2.226]],["body/controllers/AuthController.html",[0,1.086,2,1.167,3,0.248,4,0.219,5,0.219,7,0.248,8,1.09,10,2.248,11,0.028,12,0.949,14,1.182,16,0.821,17,3.557,18,1.742,19,1.742,20,0.616,23,0.248,24,0.059,26,1.466,27,2.481,28,1.456,30,0.011,31,0.016,32,0.011,69,2.735,70,2.443,71,1.921,72,1.921,73,2.481,74,3.186,75,4.807,76,4.807,77,2.898,78,3.541,79,2.898,80,2.898,81,1.1,82,0.949,83,0.489,84,1.1,85,3.56,86,2.898,87,4.807,88,4.127,89,2.898,90,2.898,91,4.127,92,2.898,93,2.432,94,2.144,95,3.186,96,1.466,97,2.144,98,1.742,99,1.921,100,3.48,101,1.921,102,2.144,103,1.921,104,2.898,105,1.936,106,2.898,107,2.898,108,2.898,109,2.898,110,1.594,111,2.898,112,2.898,113,2.898,114,1.483,115,3.472,116,2.27,117,4.127,118,2.898,119,3.054,120,2.735,121,2.651,122,1.383,123,2.898,124,2.443,125,1.742,126,2.144,127,2.898,128,2.898,129,2.898,130,2.898,131,2.898,132,2.898,133,2.898,134,2.898,135,4.127,136,2.144,137,2.443]],["title/modules/AuthModule.html",[33,1.456,45,2.019]],["body/modules/AuthModule.html",[2,1.929,3,0.308,4,0.271,5,0.271,11,0.027,16,0.921,20,0.765,23,0.308,24,0.073,30,0.014,31,0.019,32,0.014,33,2.334,35,1.82,36,1.82,37,2.162,38,2.162,39,1.82,40,3.237,41,3.237,45,4.003,47,3.382,48,2.879,49,2.162,50,2.162,52,3.174,58,3.032,69,3.569,93,3.35,94,2.661,138,3.032,139,3.032,140,3.596,141,3.032,142,3.697,143,3.697,144,3.596,145,4.789,146,1.978,147,3.596,148,3.596,149,3.596,150,2.162,151,2.383,152,3.032,153,3.596,154,3.596,155,2.661,156,3.032,157,3.596,158,3.596,159,3.596]],["title/injectables/AuthService.html",[62,0.769,93,1.7]],["body/injectables/AuthService.html",[3,0.218,4,0.192,5,0.192,7,0.218,8,0.991,11,0.028,12,1.037,14,1.212,15,1.086,16,0.785,17,1.881,20,0.541,23,0.218,24,0.052,25,1.14,26,1.899,28,1.353,30,0.01,31,0.018,32,0.01,59,2.143,60,1.881,62,0.859,63,1.102,73,2.507,74,2.487,81,1.203,82,1.037,83,0.529,84,1.203,85,1.528,93,1.899,100,2.143,105,2.215,114,1.654,116,2.384,122,1.301,150,1.528,155,1.881,160,1.881,161,3.752,162,3.752,163,3.752,164,2.541,165,4.209,166,2.541,167,3.752,168,2.541,169,2.541,170,3.483,171,3.024,172,2.541,173,2.278,174,2.962,175,2.541,176,2.541,177,3.752,178,4.461,179,2.541,180,1.881,181,2.143,182,1.881,183,2.064,184,2.143,185,2.962,186,2.143,187,2.541,188,2.541,189,2.541,190,2.541,191,2.541,192,2.541,193,1.881,194,2.541,195,2.541,196,2.541,197,3.164,198,2.541,199,2.541,200,2.541,201,2.541,202,4.461,203,4.461,204,2.541,205,2.541,206,1.024,207,2.541,208,2.541,209,2.541,210,1.881,211,1.685,212,1.881,213,1.685,214,2.487,215,2.541,216,2.777,217,3.164,218,2.256,219,3.164,220,2.541,221,1.286,222,2.541,223,2.541,224,2.541,225,2.541,226,2.541,227,2.541,228,1.881,229,1.685,230,1.881,231,2.541,232,2.541,233,2.541,234,1.881,235,2.541,236,5.255,237,1.881,238,2.541,239,2.541,240,2.541,241,2.541,242,2.541,243,2.541]],["title/interfaces/IFeedback.html",[244,1.259,245,2.019]],["body/interfaces/IFeedback.html",[3,0.399,4,0.352,5,0.352,7,0.399,11,0.027,15,1.247,23,0.484,30,0.018,31,0.022,32,0.018,83,0.67,121,3.275,244,2.117,245,3.396,246,2.802,247,3.449,248,2.449,249,5.328,250,4.188,251,3.931,252,3.449]],["title/interfaces/ITestResult.html",[244,1.259,250,2.226]],["body/interfaces/ITestResult.html",[3,0.399,4,0.352,5,0.352,7,0.399,11,0.027,15,1.247,23,0.484,30,0.018,31,0.022,32,0.018,83,0.67,121,3.275,244,2.117,245,2.802,246,2.802,247,3.449,248,2.449,249,3.931,250,4.029,251,5.328,252,4.498]],["title/injectables/JwtAuthGuard.html",[62,0.769,253,1.847]],["body/injectables/JwtAuthGuard.html",[3,0.525,4,0.292,5,0.292,7,0.332,8,1.328,11,0.027,12,0.993,14,1.237,16,0.718,20,0.824,23,0.332,24,0.079,28,1.237,30,0.015,31,0.02,32,0.015,62,1.152,63,1.68,81,1.152,82,0.993,83,0.46,84,1.152,122,1.618,146,2.131,206,1.561,216,4.375,221,1.961,253,2.767,254,3.358,255,2.867,256,4.242,257,5.031,258,4.242,259,4.985,260,3.875,261,3.268,262,5.031,263,3.875,264,4.242,265,3.268,266,2.568,267,3.875,268,3.875,269,3.875,270,3.875,271,3.875,272,3.268,273,3.875,274,3.875,275,3.875,276,3.875,277,3.875,278,4.242,279,3.875,280,3.875,281,3.875]],["title/injectables/JwtStrategy.html",[62,0.769,142,2.019]],["body/injectables/JwtStrategy.html",[3,0.349,4,0.307,5,0.307,7,0.349,8,1.371,11,0.027,12,1.025,14,1.001,16,0.859,20,0.866,23,0.349,24,0.083,25,1.736,28,1.001,30,0.016,31,0.021,32,0.016,62,1.189,63,1.765,73,2.303,81,0.932,82,0.804,83,0.483,84,0.932,142,3.122,146,2.239,151,2.699,152,3.433,156,3.433,173,1.765,197,3.433,214,2.699,221,2.06,266,2.699,282,3.433,283,4.379,284,4.071,285,5.193,286,4.071,287,4.071,288,3.433,289,3.013,290,3.433,291,3.433,292,3.433,293,3.433,294,4.071,295,4.071,296,4.071,297,3.843,298,4.071,299,4.071,300,4.071,301,4.071,302,4.071,303,4.071,304,4.071]],["title/injectables/LocalAuthGuard.html",[62,0.769,101,2.226]],["body/injectables/LocalAuthGuard.html",[3,0.424,4,0.373,5,0.373,11,0.027,16,0.835,20,1.053,23,0.424,24,0.101,30,0.02,31,0.023,32,0.02,62,1.34,63,2.145,101,3.881,146,2.721,255,3.661,265,4.172,266,3.28,305,4.172,306,4.948]],["title/injectables/LocalStrategy.html",[62,0.769,143,2.019]],["body/injectables/LocalStrategy.html",[3,0.336,4,0.296,5,0.296,7,0.336,8,1.337,11,0.027,12,1,14,0.963,15,1.243,16,0.847,20,0.833,23,0.336,24,0.08,25,1.19,28,0.963,30,0.016,31,0.02,32,0.016,62,1.16,63,1.698,73,2.261,81,1.16,82,1,83,0.601,84,1.16,93,3.186,94,2.898,102,2.898,110,2.154,114,1.109,116,1.698,122,1.482,143,3.046,146,2.154,173,1.698,174,3.046,206,1.578,264,4.272,266,2.596,278,3.303,283,4.272,288,3.303,289,2.898,291,3.303,292,3.303,293,3.303,307,3.303,308,3.917,309,3.917,310,5.066,311,3.265,312,3.917,313,3.917]],["title/guards/RolesGuard.html",[314,2.485,315,2.226]],["body/guards/RolesGuard.html",[3,0.32,4,0.282,5,0.282,7,0.32,8,1.297,11,0.028,12,0.969,14,0.919,16,0.864,20,0.795,23,0.32,24,0.076,25,1.134,28,1.434,30,0.015,31,0.019,32,0.015,62,1.124,81,1.124,82,0.969,83,0.582,84,1.124,110,2.054,114,1.651,122,0.986,125,2.246,150,2.246,165,3.634,206,1.504,237,2.764,252,3.634,256,4.915,258,4.141,259,4.915,261,3.15,297,3.634,315,3.255,316,3.735,317,3.15,318,3.735,319,6.216,320,3.735,321,3.735,322,2.476,323,1.747,324,3.735,325,2.764,326,3.735,327,3.735,328,4.911,329,3.735,330,3.735,331,3.735,332,3.735,333,3.735,334,3.735,335,3.735,336,3.735,337,3.735,338,3.735]],["title/classes/Task.html",[24,0.068,339,1.456]],["body/classes/Task.html",[3,0.238,4,0.21,5,0.21,7,0.238,10,2.962,11,0.027,12,1.262,15,1.354,16,0.572,23,0.403,24,0.057,25,1.217,30,0.011,31,0.016,32,0.011,56,1.042,81,0.637,82,0.549,83,0.778,84,0.637,114,0.788,248,1.737,339,2.036,340,1.3,341,1.843,342,5.675,343,5.675,344,4.2,345,4.2,346,4.594,347,4.032,348,2.654,349,4.786,350,4.786,351,3.412,352,4.032,353,2.345,354,2.781,355,4.054,356,2.781,357,2.781,358,2.781,359,2.781,360,2.781,361,2.781,362,2.781,363,2.781,364,2.781,365,2.781,366,2.781,367,2.781,368,2.028,369,1.672,370,2.409,371,1.3,372,2.058,373,2.781,374,1.843,375,2.345]],["title/classes/TaskCollection.html",[24,0.068,376,1.7]],["body/classes/TaskCollection.html",[3,0.265,4,0.233,5,0.233,7,0.265,10,2.877,11,0.027,12,1.234,15,1.347,16,0.616,23,0.426,24,0.063,25,1.311,30,0.012,31,0.017,32,0.012,56,1.158,81,0.707,82,0.61,83,0.777,84,0.707,114,0.875,244,1.158,248,1.872,340,1.445,344,4.347,345,4.347,347,4.196,348,2.747,351,3.532,352,4.196,353,2.605,355,3.999,368,2.185,369,1.857,370,2.596,371,1.445,376,2.519,377,1.857,378,3.894,379,3.894,380,3.089,381,3.089,382,3.089,383,3.089,384,3.089,385,3.089,386,3.089,387,3.089,388,3.089,389,2.048,390,2.048,391,2.286,392,1.563,393,2.605,394,2.605,395,1.857,396,2.286]],["title/controllers/TaskCollectionController.html",[0,1.259,397,2.226]],["body/controllers/TaskCollectionController.html",[0,0.691,2,0.742,3,0.158,4,0.139,5,0.139,7,0.158,8,0.774,10,2.372,11,0.028,12,1.001,14,1.248,15,1.219,16,0.724,18,1.108,19,1.108,20,0.392,23,0.158,24,0.037,27,1.108,28,1.461,30,0.007,31,0.012,32,0.007,67,2.169,68,1.363,71,1.221,72,1.221,73,2.487,74,1.221,81,1.107,82,0.955,83,0.574,84,1.107,85,3.828,95,2.758,96,0.932,98,1.108,99,1.221,103,1.221,110,1.013,114,1.575,115,2.42,116,1.969,119,1.363,120,3.011,121,2.872,125,1.108,126,3.079,136,1.363,170,1.943,171,2.498,173,1.271,183,1.013,206,1.181,212,1.363,214,1.943,221,2.299,229,1.943,230,2.169,253,1.013,254,1.108,339,2.352,376,2.745,397,1.943,398,1.554,399,2.932,400,2.472,401,4.161,402,2.932,403,2.195,404,3.651,405,2.472,406,1.843,407,3.078,408,2.472,409,1.843,410,1.554,411,2.472,412,1.843,413,4.44,414,1.843,415,1.843,416,2.472,417,1.843,418,1.843,419,4.575,420,2.472,421,1.843,422,1.843,423,3.83,424,2.932,425,1.843,426,1.843,427,2.701,428,2.472,429,1.843,430,1.847,431,1.363,432,1.221,433,1.363,434,2.195,435,1.554,436,2.195,437,1.843,438,2.169,439,1.221,440,1.554,441,1.554,442,1.554,443,1.554,444,1.554,445,1.221,446,1.554,447,1.554,448,1.554,449,1.554,450,1.554,451,1.554,452,1.363,453,1.363,454,1.554,455,1.843,456,1.843,457,1.108,458,1.843,459,1.843,460,1.843,461,1.554,462,1.843,463,2.472,464,2.472,465,1.554,466,1.483,467,1.554,468,2.472,469,2.472,470,2.472,471,2.472,472,2.472,473,1.843,474,3.011,475,2.42,476,1.843,477,1.843,478,1.363,479,3.078,480,3.509,481,2.169,482,1.554,483,1.554,484,1.843,485,1.843,486,1.554,487,1.843,488,2.472,489,1.843,490,1.843,491,1.554,492,1.843,493,1.843,494,2.472,495,1.843,496,1.843,497,1.554,498,1.843,499,1.843,500,2.472]],["title/controllers/TaskController.html",[0,1.259,501,2.226]],["body/controllers/TaskController.html",[0,0.646,2,0.694,3,0.148,4,0.13,5,0.13,7,0.148,8,0.734,10,2.481,11,0.028,12,1.047,14,1.305,15,1.213,16,0.733,18,1.037,19,1.037,20,0.367,23,0.148,24,0.035,27,1.037,28,1.472,30,0.007,31,0.011,32,0.007,67,2.057,71,1.143,72,1.143,73,2.551,74,1.143,81,1.176,82,1.047,83,0.61,84,1.176,85,3.826,95,3.113,96,0.872,97,1.276,98,1.037,99,1.143,103,1.143,105,0.694,110,0.948,114,1.244,115,3.113,116,2.228,119,1.276,120,2.912,121,2.872,125,1.671,126,2.964,136,1.276,137,1.454,170,1.143,171,3.121,173,0.747,180,1.276,183,0.948,206,1.407,210,1.276,212,1.276,213,1.143,214,1.143,221,1.407,229,1.143,230,1.276,253,0.948,254,1.037,339,2.732,351,1.037,378,1.143,408,2.344,411,2.344,416,2.344,419,4.165,420,2.344,427,3.475,428,2.344,430,1.767,431,1.276,432,1.143,434,2.408,435,1.454,436,2.1,438,2.057,439,1.143,440,1.454,441,1.454,442,1.454,443,1.454,444,1.454,445,1.143,446,1.454,447,1.454,448,1.454,449,1.454,450,1.454,451,1.454,452,1.276,453,1.276,454,1.454,457,1.037,461,2.945,463,1.454,464,1.454,465,2.344,466,0.872,467,1.454,468,1.454,469,1.454,470,1.454,471,1.454,472,1.454,474,1.842,475,1.143,479,1.454,480,1.454,481,2.584,482,2.945,483,1.454,486,1.454,491,1.454,494,2.344,497,1.454,500,2.945,501,1.842,502,1.454,503,2.78,504,2.344,505,4.006,506,2.584,507,2.78,508,2.344,509,2.344,510,2.945,511,2.945,512,1.724,513,1.724,514,1.454,515,1.724,516,1.724,517,1.724,518,3.803,519,2.78,520,1.724,521,1.724,522,1.724,523,1.454,524,2.78,525,1.724,526,1.724,527,2.945,528,2.78,529,1.724,530,1.724,531,1.724,532,1.724,533,1.724,534,1.276,535,1.724,536,1.724,537,1.724,538,1.454,539,1.724,540,1.724,541,1.724,542,1.724,543,1.454,544,1.724,545,2.344,546,1.724,547,1.724,548,1.724,549,1.724,550,1.724,551,1.724,552,1.724,553,1.724,554,1.724,555,1.724,556,1.724,557,1.724,558,1.724,559,1.724,560,1.724,561,1.724,562,1.724]],["title/interfaces/TaskInCollection.html",[244,1.259,379,2.226]],["body/interfaces/TaskInCollection.html",[3,0.328,4,0.289,5,0.289,7,0.328,11,0.027,15,1.337,16,0.712,23,0.476,24,0.078,25,1.161,30,0.015,31,0.02,32,0.015,56,1.433,83,0.724,114,1.083,244,1.433,246,2.299,248,2.162,344,3.69,345,3.69,347,3.69,348,2.332,351,2.998,352,3.69,355,3.928,368,2.524,369,2.299,370,2.998,371,1.788,376,2.524,377,2.299,378,3.306,379,3.899,389,2.535,390,3.899,391,4.352,392,2.808,393,4.96,394,3.224,395,2.299,396,2.829]],["title/modules/TaskModule.html",[33,1.456,46,2.019]],["body/modules/TaskModule.html",[2,2.012,3,0.329,4,0.289,5,0.289,11,0.027,16,0.941,20,0.816,23,0.329,24,0.078,30,0.015,31,0.02,32,0.015,33,2.409,35,1.94,36,1.94,37,2.305,38,2.305,39,1.94,40,3.341,41,2.305,46,3.764,48,3.004,49,2.305,50,2.305,52,2.541,55,2.837,56,1.437,105,1.544,122,1.012,180,2.837,322,2.541,339,1.662,368,2.812,374,3.311,376,1.94,395,3.004,397,3.683,430,3.168,431,2.837,433,2.837,501,3.683,534,2.837,563,3.233,564,3.233,565,3.834,566,3.834,567,3.834,568,2.747,569,3.233,570,3.233,571,4.686,572,3.834,573,3.834,574,3.233]],["title/injectables/TaskService.html",[62,0.769,430,1.7]],["body/injectables/TaskService.html",[3,0.107,4,0.094,5,0.094,7,0.107,8,0.56,11,0.028,12,1.106,14,1.359,15,1.216,16,0.57,20,0.265,23,0.107,24,0.025,25,0.644,26,2.023,28,1.45,30,0.005,31,0.008,32,0.005,56,0.467,62,0.486,63,0.54,73,2.627,81,1.246,82,1.091,83,0.635,84,1.246,114,1.565,116,1.733,122,0.56,170,1.837,171,2.942,174,3.643,193,3.158,206,1.61,210,0.921,218,2.92,234,2.718,237,0.921,297,0.921,339,2.275,351,0.749,371,0.582,372,0.921,376,2.16,378,2.17,389,0.825,390,2.17,391,1.57,392,1.657,400,1.789,405,1.789,407,1.05,410,1.789,413,3.371,427,2.958,430,1.074,433,0.921,439,1.406,466,2.16,474,0.825,488,1.789,504,1.789,508,1.789,509,1.789,511,1.789,514,1.789,523,1.789,527,1.05,534,0.921,543,1.789,545,1.789,569,1.05,575,1.05,576,2.122,577,2.122,578,2.122,579,3.274,580,3.274,581,2.122,582,2.122,583,2.122,584,2.122,585,2.122,586,1.245,587,4.096,588,2.772,589,2.338,590,1.245,591,2.122,592,2.122,593,1.245,594,2.122,595,1.245,596,1.245,597,1.245,598,2.122,599,1.245,600,1.245,601,1.245,602,2.122,603,1.245,604,2.122,605,1.245,606,1.245,607,1.245,608,1.245,609,1.245,610,1.245,611,1.245,612,2.122,613,1.245,614,2.122,615,1.245,616,2.122,617,1.245,618,2.122,619,1.245,620,1.05,621,0.825,622,0.749,623,1.245,624,1.245,625,1.245,626,2.122,627,1.245,628,1.245,629,1.245,630,1.245,631,1.245,632,1.245,633,1.245,634,1.245,635,2.761,636,1.245,637,2.122,638,1.245,639,1.245,640,2.122,641,3.274,642,3.274,643,3.274,644,1.245,645,1.245,646,1.245,647,1.245,648,1.245,649,2.122,650,1.245,651,1.245,652,1.245,653,1.05,654,1.245,655,1.245,656,1.245,657,1.245,658,1.245,659,1.245,660,1.245,661,1.245,662,2.122,663,2.122,664,3.274,665,1.245,666,2.122,667,3.274,668,1.245,669,2.772,670,2.122,671,1.245,672,1.245,673,2.772,674,2.122,675,1.245,676,1.245,677,1.245,678,1.245,679,2.122,680,1.245,681,1.245,682,1.245,683,1.245,684,1.245,685,1.245,686,1.245,687,1.245,688,1.245,689,1.245,690,1.245,691,1.245,692,1.245,693,1.245,694,1.245,695,1.245,696,1.245,697,1.245,698,1.245,699,2.338,700,2.772,701,1.837,702,2.772,703,3.274,704,3.673,705,2.122,706,1.245,707,3.097,708,2.122,709,1.245,710,1.245,711,2.122,712,2.122,713,2.122,714,2.122,715,1.245,716,2.122,717,1.245,718,1.245,719,1.245,720,1.245,721,0.825,722,1.245,723,1.245,724,1.245,725,1.245,726,2.122,727,1.245,728,1.245,729,1.245,730,2.772,731,2.122,732,1.245,733,2.122,734,2.122,735,1.245,736,1.245,737,1.245,738,1.245,739,1.245,740,1.245,741,2.772,742,2.122,743,1.245,744,1.245,745,1.245,746,1.245,747,1.245]],["title/classes/User.html",[24,0.068,122,0.887]],["body/classes/User.html",[3,0.306,4,0.269,5,0.269,7,0.306,10,2.93,11,0.027,12,1.237,15,1.296,16,0.68,23,0.491,24,0.073,30,0.014,31,0.019,32,0.014,56,1.338,82,1.059,83,0.755,114,1.011,122,1.416,171,1.963,173,2.325,244,1.338,248,2.066,311,2.95,323,2.509,340,1.669,355,4.02,368,2.411,369,2.146,370,2.865,371,1.669,392,1.806,466,1.806,568,1.963,621,2.366,622,2.146,707,4.018,748,2.146,749,3.556,750,4.524,751,3.569,752,3.569,753,3.569,754,3.569,755,3.97,756,3.569,757,3.569,758,3.569,759,2.641]],["title/classes/UserDTO.html",[24,0.068,78,1.847]],["body/classes/UserDTO.html",[3,0.332,4,0.292,5,0.292,7,0.332,11,0.027,12,1.239,15,1.357,23,0.332,24,0.079,25,1.528,30,0.015,31,0.02,32,0.015,78,2.767,81,0.887,82,0.765,83,0.745,84,0.887,173,2.656,211,4.496,248,2.181,311,3.369,323,2.865,340,1.812,390,3.918,749,4.061,760,3.268,761,3.875,762,3.875,763,3.875,764,3.875,765,3.875,766,3.875,767,3.875]],["title/controllers/UsersController.html",[0,1.259,768,2.226]],["body/controllers/UsersController.html",[0,1.021,2,1.097,3,0.233,4,0.205,5,0.205,7,0.233,8,1.042,10,2.635,11,0.028,12,1.112,14,1.386,15,0.779,16,0.829,18,1.637,19,1.637,20,0.579,23,0.233,24,0.055,27,1.637,28,1.386,30,0.011,31,0.016,32,0.011,71,1.805,73,2.444,78,3.502,81,1.063,82,0.916,83,0.551,84,1.063,85,3.648,95,3.374,96,1.378,97,2.015,98,2.791,99,1.805,103,1.805,105,1.87,110,1.498,114,1.315,115,3.735,116,2.012,120,3.077,121,2.349,122,1.602,124,2.296,150,1.637,165,2.015,253,1.498,254,1.637,311,2.171,323,1.846,432,3.077,438,2.92,768,2.616,769,2.296,770,3.914,771,3.947,772,5.091,773,5.091,774,5.091,775,4.642,776,2.723,777,3.947,778,2.723,779,2.723,780,3.914,781,2.723,782,3.947,783,2.723,784,3.947,785,2.723,786,2.723,787,2.723,788,2.723,789,2.723,790,2.015,791,2.723,792,2.296,793,2.296,794,2.723,795,2.723,796,2.015,797,2.723,798,2.723,799,2.723,800,2.723,801,3.914,802,2.723,803,2.723,804,2.723,805,2.723,806,2.723]],["title/modules/UsersModule.html",[33,1.456,47,1.847]],["body/modules/UsersModule.html",[2,2.051,3,0.338,4,0.298,5,0.298,11,0.027,16,0.916,20,0.84,23,0.338,24,0.08,30,0.016,31,0.02,32,0.016,33,2.443,35,1.998,36,1.998,37,2.374,38,2.374,39,1.998,40,3.389,41,3.389,47,3.531,48,3.062,49,2.374,50,2.374,52,2.618,55,2.922,56,1.48,105,2.703,315,3.375,322,2.618,368,1.998,568,2.172,570,4.294,571,3.33,574,3.33,768,3.736,793,3.33,807,3.33,808,3.33,809,3.33,810,3.949,811,3.949,812,3.33,813,3.949,814,3.949,815,3.949,816,3.949]],["title/injectables/UsersService.html",[62,0.769,105,1.353]],["body/injectables/UsersService.html",[3,0.198,4,0.174,5,0.174,7,0.198,8,0.921,11,0.028,12,1.146,14,1.395,15,1.146,16,0.757,20,0.491,23,0.198,24,0.047,25,0.7,26,1.167,28,1.395,30,0.009,31,0.014,32,0.009,56,0.865,62,0.799,63,1,73,2.654,78,3.507,81,1.299,82,1.12,83,0.673,84,1.299,98,2.531,105,1.406,114,1.56,116,2.299,122,1.401,173,2.186,174,3.559,181,1.945,182,1.707,184,3.958,206,1.696,218,2.822,234,1.707,311,2.773,323,1.079,371,1.079,432,2.79,439,2.313,538,2.943,587,3.958,589,2.943,620,1.945,699,1.945,749,1.529,770,2.943,792,1.945,812,1.945,817,1.945,818,3.49,819,4.694,820,3.49,821,3.49,822,2.307,823,2.307,824,3.49,825,2.307,826,3.49,827,2.307,828,2.307,829,2.307,830,4.21,831,3.49,832,2.307,833,2.307,834,2.307,835,2.307,836,3.49,837,2.307,838,3.49,839,2.307,840,2.307,841,2.307,842,4.694,843,2.307,844,2.307,845,2.307,846,2.307,847,2.307,848,2.307,849,4.694,850,3.49,851,3.49,852,4.694,853,3.49,854,2.307,855,2.307,856,2.307,857,2.307,858,2.307,859,2.307,860,1.387,861,2.307,862,3.49,863,3.49,864,3.49,865,2.307,866,2.307,867,2.307,868,2.307,869,2.307,870,2.307,871,2.307]],["title/coverage.html",[872,3.384]],["body/coverage.html",[0,2.035,1,1.826,5,0.208,6,2.322,11,0.027,21,1.515,24,0.119,30,0.011,31,0.016,32,0.011,39,1.394,62,1.367,64,2.322,69,1.826,70,2.322,78,1.515,83,0.327,93,1.394,101,1.826,105,1.109,122,0.727,142,1.656,143,1.656,151,1.826,160,2.945,183,1.515,185,1.656,206,1.109,244,1.918,245,1.656,247,2.945,250,1.826,253,1.515,254,1.656,255,2.945,282,2.322,305,2.322,307,2.322,314,2.038,315,1.826,317,2.322,325,2.038,339,1.194,341,2.638,374,1.826,376,1.394,377,2.809,379,1.826,395,1.656,397,1.826,398,2.322,403,2.392,430,1.394,434,1.656,436,1.656,501,1.826,502,2.322,506,2.945,568,1.515,575,2.322,622,1.656,701,4.543,721,3.097,748,2.809,760,2.322,768,1.826,769,2.322,790,2.038,817,2.322,872,2.038,873,2.754,874,2.754,875,2.754,876,3.979,877,3.979,878,2.754,879,6.084,880,6.432,881,2.322,882,5.833,883,2.322,884,2.754,885,2.754,886,3.356,887,2.322,888,4.918,889,4.672,890,3.356,891,4.017,892,2.322,893,2.322,894,2.322,895,2.322,896,2.754,897,2.754,898,4.672,899,2.754,900,2.754,901,3.979,902,2.945,903,2.754,904,2.754,905,2.038,906,3.979,907,2.754,908,2.754]],["title/dependencies.html",[36,2.043,909,2.81]],["body/dependencies.html",[11,0.028,20,0.902,24,0.086,30,0.017,31,0.021,32,0.017,36,2.145,56,1.589,102,3.136,146,2.331,150,2.548,182,3.136,185,2.548,289,4.311,290,3.574,322,2.809,371,1.982,453,3.136,910,5.826,911,4.238,912,4.238,913,4.238,914,4.238,915,4.238,916,4.238,917,4.238,918,4.238,919,4.238,920,4.238,921,4.238,922,4.238,923,5.327,924,4.238,925,4.238,926,4.238,927,4.238,928,4.238,929,4.238,930,4.238,931,4.238,932,4.238,933,4.238,934,4.238,935,4.238,936,4.238,937,4.238,938,4.238,939,4.238,940,4.238,941,4.238]],["title/miscellaneous/enumerations.html",[942,1.314,943,3.404]],["body/miscellaneous/enumerations.html",[7,0.431,11,0.026,30,0.02,31,0.023,32,0.02,122,1.562,323,2.766,942,2.354,943,4.245,944,5.034,945,5.034,946,5.296,947,5.915,948,5.915]],["title/miscellaneous/functions.html",[942,1.314,949,3.404]],["body/miscellaneous/functions.html",[7,0.266,11,0.026,14,1.397,28,0.763,30,0.012,31,0.017,32,0.012,39,2.524,66,2.296,81,1.347,82,1.161,83,0.64,84,1.347,121,1.57,122,0.819,228,2.296,245,2.604,339,2.34,346,4.961,348,2.751,392,2.191,403,3.246,423,2.616,445,3.764,452,3.204,457,2.604,466,2.191,475,3.307,506,4.353,518,4.689,701,2.87,721,2.87,780,4.553,796,3.691,887,2.616,888,2.616,890,2.616,891,2.296,892,3.652,893,3.652,942,1.451,949,2.616,950,3.103,951,4.553,952,4.331,953,3.103,954,2.616,955,3.103,956,4.962,957,6.159,958,5.399,959,3.652,960,3.995,961,4.207,962,3.103,963,3.103,964,4.989,965,4.331,966,4.207,967,4.331,968,3.103,969,4.331,970,4.331,971,4.331,972,4.331]],["title/index.html",[7,0.241,635,2.369,973,2.81]],["body/index.html",[4,0.3,11,0.027,30,0.016,31,0.02,32,0.016,272,3.357,348,1.862,478,2.946,653,4.317,796,3.788,872,2.946,954,5.333,956,3.788,960,2.946,974,3.982,975,3.982,976,5.12,977,3.982,978,3.982,979,3.982,980,3.982,981,3.982,982,3.982,983,3.982,984,3.982,985,3.982,986,5.659,987,3.982,988,3.982,989,3.982,990,3.982,991,6.433,992,3.982,993,3.982,994,3.982,995,3.982,996,3.982,997,5.12,998,3.982,999,3.982,1000,3.982,1001,3.982,1002,3.982,1003,3.982,1004,3.982,1005,5.12,1006,3.982,1007,3.982,1008,3.982,1009,3.982,1010,3.982,1011,3.982,1012,3.982,1013,3.982,1014,3.982,1015,3.982,1016,3.982,1017,3.982,1018,3.982,1019,3.982,1020,3.982,1021,3.982,1022,3.982,1023,3.982,1024,3.982,1025,3.982,1026,3.982]],["title/modules.html",[35,2.315]],["body/modules.html",[11,0.023,30,0.02,31,0.023,32,0.02,34,3.314,35,2.53,45,3.006,46,3.006,47,2.749,478,4.785,1027,6.467,1028,6.467,1029,6.467]],["title/classes/moodleSessions.html",[24,0.068,183,1.847]],["body/classes/moodleSessions.html",[3,0.222,4,0.195,5,0.195,7,0.222,8,1.004,11,0.028,12,1.129,14,1.361,15,1.182,23,0.222,24,0.053,25,1.369,26,2.97,28,0.935,30,0.01,31,0.015,32,0.01,72,2.52,81,1.032,82,0.89,83,0.628,84,1.032,96,2.514,122,0.683,125,2.286,183,3.044,185,2.987,206,1.531,211,4.036,213,3.508,221,3.425,228,2.813,229,3.508,248,1.648,340,1.21,348,2.323,457,2.286,755,3.676,860,1.555,883,2.181,959,2.181,961,3.206,1030,2.587,1031,2.587,1032,2.587,1033,5.534,1034,5.293,1035,3.802,1036,4.507,1037,3.802,1038,3.802,1039,3.802,1040,2.587,1041,3.802,1042,2.587,1043,3.802,1044,4.968,1045,6.454,1046,3.802,1047,5.534,1048,3.206,1049,2.587,1050,3.802,1051,3.802,1052,3.802,1053,2.587,1054,3.802,1055,3.802,1056,2.587,1057,3.802,1058,2.813,1059,3.802,1060,2.587,1061,2.587,1062,2.587,1063,3.802,1064,2.587,1065,2.587,1066,2.587]],["title/classes/moodleSubmitHelper.html",[24,0.068,436,2.019]],["body/classes/moodleSubmitHelper.html",[3,0.325,4,0.286,5,0.286,7,0.325,8,1.31,11,0.027,12,0.979,14,0.933,23,0.325,24,0.077,25,1.679,28,1.22,30,0.015,31,0.02,32,0.015,68,2.807,81,0.868,82,0.749,83,0.45,84,0.868,96,2.511,211,3.665,213,4.033,216,3.671,217,4.184,218,3.324,219,4.184,221,3.218,340,1.774,348,1.774,392,2.511,403,2.983,436,2.983,466,2.798,474,2.515,701,3.665,721,3.289,860,2.281,895,3.199,1048,3.199,1058,3.671,1067,4.962,1068,3.794,1069,3.794,1070,6.523,1071,3.794,1072,4.962,1073,3.794,1074,3.794,1075,3.794,1076,3.199,1077,3.794,1078,3.794,1079,3.794,1080,3.794,1081,3.794]],["title/overview.html",[1082,3.857]],["body/overview.html",[2,1.552,11,0.027,21,3.064,30,0.015,31,0.02,32,0.015,33,1.671,34,4.375,35,1.95,36,1.95,37,2.317,38,2.317,39,1.95,40,2.317,41,2.317,42,3.25,43,3.25,44,3.25,45,4.021,46,3.677,47,3.511,48,3.014,49,2.317,50,2.317,63,1.671,93,3.23,105,2.571,138,3.25,139,3.25,141,3.25,142,3.35,143,3.35,246,2.317,314,2.852,340,1.802,430,2.819,563,3.25,564,3.25,807,3.25,808,3.25,809,3.25,1076,3.25,1082,3.25,1083,5.013,1084,3.854,1085,3.854,1086,3.854]],["title/interfaces/taskAndNote.html",[244,1.259,622,2.019]],["body/interfaces/taskAndNote.html",[3,0.355,4,0.312,5,0.312,7,0.355,11,0.027,15,1.296,16,0.749,23,0.519,24,0.084,30,0.016,31,0.021,32,0.016,56,1.552,82,0.817,83,0.684,114,1.173,122,1.386,171,3.333,173,1.795,244,1.552,246,2.49,248,2.275,311,2.277,323,1.936,355,3.902,368,2.656,369,2.49,370,3.156,371,1.936,392,2.917,466,3.067,568,2.277,621,2.745,622,3.156,748,2.49,749,2.745,750,3.492,755,3.064,759,3.064]],["title/classes/taskRunner.html",[24,0.068,434,2.019]],["body/classes/taskRunner.html",[3,0.212,4,0.187,5,0.331,7,0.212,8,0.972,11,0.027,12,0.96,14,1.425,15,0.727,16,0.627,23,0.212,24,0.05,25,1.334,26,2.223,28,1.34,30,0.022,31,0.015,32,0.01,60,1.832,66,2.724,73,2.385,81,1.006,82,1.026,83,0.521,84,1.006,96,2.63,114,1.543,116,1.596,174,2.213,193,4.381,218,2.213,339,2.612,340,1.158,348,2.054,349,4.101,350,4.383,403,2.213,434,2.213,445,3.611,457,3.275,475,2.44,481,3.599,510,3.104,518,4.459,801,2.088,860,1.489,902,1.832,905,1.832,956,3.599,960,2.724,966,5.544,1058,2.724,1087,3.681,1088,3.681,1089,2.476,1090,2.476,1091,2.476,1092,3.681,1093,3.681,1094,3.681,1095,3.681,1096,2.476,1097,2.476,1098,3.681,1099,6.19,1100,4.864,1101,4.864,1102,2.476,1103,2.476,1104,3.104,1105,2.476,1106,3.681,1107,3.681,1108,2.476,1109,2.476,1110,2.476,1111,3.681,1112,3.681,1113,3.681,1114,3.681,1115,2.476,1116,2.476,1117,2.476,1118,3.681,1119,2.476,1120,2.476,1121,2.476,1122,2.476,1123,2.476,1124,2.476,1125,2.476,1126,2.476,1127,2.476,1128,2.476,1129,2.476]],["title/miscellaneous/typealiases.html",[942,1.314,1130,4.037]],["body/miscellaneous/typealiases.html",[7,0.436,11,0.024,30,0.02,31,0.024,32,0.02,83,0.603,341,3.372,372,4.403,377,3.059,389,3.944,621,3.944,748,3.059,942,2.379,1131,5.087,1132,4.29,1133,4.29,1134,4.29]],["title/miscellaneous/variables.html",[942,1.314,1135,3.404]],["body/miscellaneous/variables.html",[7,0.341,11,0.027,15,1.117,30,0.016,31,0.02,32,0.016,83,0.671,151,3.393,155,2.946,160,2.946,185,3.402,186,3.357,323,1.862,325,3.788,341,2.639,374,3.393,375,3.357,377,2.394,395,3.078,396,2.946,568,2.815,748,2.394,759,2.946,790,4.572,860,3.958,881,3.357,886,3.357,891,2.946,894,4.317,902,2.946,905,3.788,942,1.862,946,5.551,951,3.357,1104,3.357,1132,3.357,1133,3.357,1134,3.357,1135,3.357,1136,3.982,1137,3.982,1138,3.982,1139,5.12,1140,3.982,1141,3.982,1142,3.982,1143,3.982,1144,3.982]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"overview.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":701,"title":{},"body":{"injectables/TaskService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"classes/moodleSubmitHelper.html":{}}}],["0.1.13",{"_index":936,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":921,"title":{},"body":{"dependencies.html":{}}}],["0.21.1",{"_index":918,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":931,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":912,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":880,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":898,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":899,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":900,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":876,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":882,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":877,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":878,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":906,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":901,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":1076,"title":{},"body":{"classes/moodleSubmitHelper.html":{},"overview.html":{}}}],["1,string.lastindexof",{"_index":1141,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":933,"title":{},"body":{"dependencies.html":{}}}],["1.3.3",{"_index":930,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":889,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":897,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":851,"title":{},"body":{"injectables/UsersService.html":{}}}],["100",{"_index":721,"title":{},"body":{"injectables/TaskService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"classes/moodleSubmitHelper.html":{}}}],["2",{"_index":654,"title":{},"body":{"injectables/TaskService.html":{}}}],["2.0.2",{"_index":941,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":919,"title":{},"body":{"dependencies.html":{}}}],["2/5",{"_index":904,"title":{},"body":{"coverage.html":{}}}],["3.0.2",{"_index":923,"title":{},"body":{"dependencies.html":{}}}],["3.0.3",{"_index":927,"title":{},"body":{"dependencies.html":{}}}],["33",{"_index":896,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1083,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":932,"title":{},"body":{"dependencies.html":{}}}],["4.17.21",{"_index":925,"title":{},"body":{"dependencies.html":{}}}],["4/8",{"_index":885,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":903,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":1084,"title":{},"body":{"overview.html":{}}}],["5.12.2",{"_index":928,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":884,"title":{},"body":{"coverage.html":{}}}],["6.6.6",{"_index":939,"title":{},"body":{"dependencies.html":{}}}],["6000s",{"_index":159,"title":{},"body":{"modules/AuthModule.html":{}}}],["7",{"_index":1086,"title":{},"body":{"overview.html":{}}}],["7.1.5",{"_index":915,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":913,"title":{},"body":{"dependencies.html":{}}}],["7.2.4",{"_index":914,"title":{},"body":{"dependencies.html":{}}}],["7.6.15",{"_index":910,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1085,"title":{},"body":{"overview.html":{}}}],["9a",{"_index":641,"title":{},"body":{"injectables/TaskService.html":{}}}],["_id",{"_index":390,"title":{},"body":{"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{},"classes/UserDTO.html":{}}}],["ablaufen",{"_index":300,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["access",{"_index":1047,"title":{},"body":{"classes/moodleSessions.html":{}}}],["access_token",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["add",{"_index":268,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["added",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["adds",{"_index":1043,"title":{},"body":{"classes/moodleSessions.html":{}}}],["addsession",{"_index":1035,"title":{},"body":{"classes/moodleSessions.html":{}}}],["addsession(key",{"_index":1041,"title":{},"body":{"classes/moodleSessions.html":{}}}],["admin",{"_index":948,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["aliases",{"_index":1131,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["amazing",{"_index":1010,"title":{},"body":{"index.html":{}}}],["angular",{"_index":985,"title":{},"body":{"index.html":{}}}],["any):promise",{"_index":658,"title":{},"body":{"injectables/TaskService.html":{}}}],["app",{"_index":993,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":570,"title":{},"body":{"modules/TaskModule.html":{},"modules/UsersModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":982,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":34,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":21,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["archievedpoints",{"_index":714,"title":{},"body":{"injectables/TaskService.html":{}}}],["archievedpoints/totalpoints",{"_index":720,"title":{},"body":{"injectables/TaskService.html":{}}}],["arguments",{"_index":281,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["arrays",{"_index":655,"title":{},"body":{"injectables/TaskService.html":{}}}],["async",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/taskRunner.html":{}}}],["auch",{"_index":693,"title":{},"body":{"injectables/TaskService.html":{}}}],["aus",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["ausprobieren",{"_index":454,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["auth",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"classes/moodleSessions.html":{}}}],["auth.controller",{"_index":148,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":255,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:10",{"_index":260,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:16",{"_index":263,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/moodlesessions",{"_index":435,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["authcontroller",{"_index":69,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":270,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard",{"_index":265,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":267,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":306,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":45,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1019,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":93,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authtoken",{"_index":463,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["await",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/taskRunner.html":{}}}],["axios",{"_index":453,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"dependencies.html":{}}}],["backend",{"_index":66,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/functions.html":{},"classes/taskRunner.html":{}}}],["backers",{"_index":1011,"title":{},"body":{"index.html":{}}}],["based",{"_index":280,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["basic",{"_index":452,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"miscellaneous/functions.html":{}}}],["bcrypt",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["bcrypt.compare(pass,dbpassword",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(password,saltrounds",{"_index":853,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcryptjs",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["beim",{"_index":447,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["bermittelte",{"_index":448,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["body",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":252,"title":{},"body":{"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1029,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1027,"title":{},"body":{"modules.html":{}}}],["building",{"_index":977,"title":{},"body":{"index.html":{}}}],["call",{"_index":274,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["canactivate",{"_index":256,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":258,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["change",{"_index":854,"title":{},"body":{"injectables/UsersService.html":{}}}],["changed",{"_index":801,"title":{},"body":{"controllers/UsersController.html":{},"classes/taskRunner.html":{}}}],["changepassword",{"_index":770,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["changepassword(res",{"_index":776,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword(userdto",{"_index":824,"title":{},"body":{"injectables/UsersService.html":{}}}],["check",{"_index":847,"title":{},"body":{"injectables/UsersService.html":{}}}],["class",{"_index":24,"title":{"classes/Task.html":{},"classes/TaskCollection.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{}}}],["classes",{"_index":340,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"overview.html":{},"classes/taskRunner.html":{}}}],["clean",{"_index":736,"title":{},"body":{"injectables/TaskService.html":{}}}],["cleanup",{"_index":690,"title":{},"body":{"injectables/TaskService.html":{}}}],["closed",{"_index":964,"title":{},"body":{"miscellaneous/functions.html":{}}}],["closedtests",{"_index":342,"title":{},"body":{"classes/Task.html":{}}}],["cluster_appmodule",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":138,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":139,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_taskmodule",{"_index":563,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["cluster_taskmodule_providers",{"_index":564,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":807,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":809,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":808,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["codingtests",{"_index":892,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["codingtests(inputparams",{"_index":955,"title":{},"body":{"miscellaneous/functions.html":{}}}],["collection",{"_index":488,"title":{},"body":{"controllers/TaskCollectionController.html":{},"injectables/TaskService.html":{}}}],["collection\",taskdto",{"_index":688,"title":{},"body":{"injectables/TaskService.html":{}}}],["collection:\",taskcollectiondto",{"_index":631,"title":{},"body":{"injectables/TaskService.html":{}}}],["collections",{"_index":637,"title":{},"body":{"injectables/TaskService.html":{}}}],["config",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["config.json",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/taskRunner.html":{}}}],["config.moodle_consumer_secret",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["console",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(\"[log",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["console.log(data.user",{"_index":803,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(err",{"_index":1081,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["console.log(jwtservice.decode(token",{"_index":335,"title":{},"body":{"guards/RolesGuard.html":{}}}],["console.log(this.jwtservice.decode",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(token",{"_index":334,"title":{},"body":{"guards/RolesGuard.html":{}}}],["console.log(user",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(userdto",{"_index":842,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(validateduser",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{}}}],["constants",{"_index":152,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["construct",{"_index":1031,"title":{},"body":{"classes/moodleSessions.html":{}}}],["constructor",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{},"classes/UserDTO.html":{},"injectables/UsersService.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["constructor(@injectmodel('user",{"_index":841,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(_id",{"_index":761,"title":{},"body":{"classes/UserDTO.html":{}}}],["constructor(authservice",{"_index":308,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(private",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":318,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(taskmodel",{"_index":586,"title":{},"body":{"injectables/TaskService.html":{}}}],["constructor(title",{"_index":353,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{}}}],["constructor(usermodel",{"_index":822,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["content",{"_index":343,"title":{},"body":{"classes/Task.html":{}}}],["context",{"_index":261,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":331,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":330,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":336,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest().headers.authorization",{"_index":333,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('task",{"_index":535,"title":{},"body":{"controllers/TaskController.html":{}}}],["controller('taskcollection",{"_index":437,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["controller('user",{"_index":794,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["course",{"_index":344,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{}}}],["coverage",{"_index":872,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":538,"title":{},"body":{"controllers/TaskController.html":{},"injectables/UsersService.html":{}}}],["create(userdto",{"_index":826,"title":{},"body":{"injectables/UsersService.html":{}}}],["createcollection",{"_index":576,"title":{},"body":{"injectables/TaskService.html":{}}}],["createcollection(taskcollectiondto",{"_index":592,"title":{},"body":{"injectables/TaskService.html":{}}}],["created",{"_index":457,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"miscellaneous/functions.html":{},"classes/moodleSessions.html":{},"classes/taskRunner.html":{}}}],["createdplugin",{"_index":969,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createdtask",{"_index":628,"title":{},"body":{"injectables/TaskService.html":{}}}],["createdtask.save",{"_index":630,"title":{},"body":{"injectables/TaskService.html":{}}}],["createdtaskcollection",{"_index":632,"title":{},"body":{"injectables/TaskService.html":{}}}],["createdtaskcollection.save",{"_index":634,"title":{},"body":{"injectables/TaskService.html":{}}}],["createduser",{"_index":862,"title":{},"body":{"injectables/UsersService.html":{}}}],["createduser.save",{"_index":864,"title":{},"body":{"injectables/UsersService.html":{}}}],["createmoodleuser",{"_index":818,"title":{},"body":{"injectables/UsersService.html":{}}}],["createmoodleuser(mail",{"_index":828,"title":{},"body":{"injectables/UsersService.html":{}}}],["createmoodleuser(mail:string,username:string",{"_index":865,"title":{},"body":{"injectables/UsersService.html":{}}}],["createnewtask",{"_index":503,"title":{},"body":{"controllers/TaskController.html":{}}}],["createnewtask(@res",{"_index":536,"title":{},"body":{"controllers/TaskController.html":{}}}],["createnewtask(res",{"_index":512,"title":{},"body":{"controllers/TaskController.html":{}}}],["createnewtaskcollection",{"_index":399,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["createnewtaskcollection(@res",{"_index":455,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["createnewtaskcollection(res",{"_index":406,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["createtask",{"_index":577,"title":{},"body":{"injectables/TaskService.html":{}}}],["createtask(taskdto",{"_index":594,"title":{},"body":{"injectables/TaskService.html":{}}}],["creating",{"_index":626,"title":{},"body":{"injectables/TaskService.html":{}}}],["creator",{"_index":345,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{}}}],["custom",{"_index":269,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["dann",{"_index":546,"title":{},"body":{"controllers/TaskController.html":{}}}],["das",{"_index":446,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["data",{"_index":780,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["data:\",input",{"_index":1111,"title":{},"body":{"classes/taskRunner.html":{}}}],["dataforplugin",{"_index":346,"title":{},"body":{"classes/Task.html":{},"miscellaneous/functions.html":{}}}],["dataforplugin:any",{"_index":373,"title":{},"body":{"classes/Task.html":{}}}],["date",{"_index":347,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{}}}],["dbpassword",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["declarations",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":860,"title":{},"body":{"injectables/UsersService.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["delete",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete(':id",{"_index":411,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["delete(userdto",{"_index":831,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleted",{"_index":500,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["deletetask",{"_index":504,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["deletetask(@param('id",{"_index":554,"title":{},"body":{"controllers/TaskController.html":{}}}],["deletetask(taskid",{"_index":514,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["deletetaskcollection",{"_index":400,"title":{},"body":{"controllers/TaskCollectionController.html":{},"injectables/TaskService.html":{}}}],["deletetaskcollection(@param('id",{"_index":498,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["deletetaskcollection(taskcollectionid",{"_index":410,"title":{},"body":{"controllers/TaskCollectionController.html":{},"injectables/TaskService.html":{}}}],["deletetasksincollection",{"_index":578,"title":{},"body":{"injectables/TaskService.html":{}}}],["deletetasksincollection(taskid",{"_index":598,"title":{},"body":{"injectables/TaskService.html":{}}}],["deleteuser",{"_index":771,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser(@res",{"_index":802,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser(res",{"_index":779,"title":{},"body":{"controllers/UsersController.html":{}}}],["dem",{"_index":444,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["den",{"_index":691,"title":{},"body":{"injectables/TaskService.html":{}}}],["dependencies",{"_index":36,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":348,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"miscellaneous/functions.html":{},"index.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["developer",{"_index":1100,"title":{},"body":{"classes/taskRunner.html":{}}}],["development",{"_index":994,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1107,"title":{},"body":{"classes/taskRunner.html":{}}}],["document",{"_index":370,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"classes/User.html":{},"interfaces/taskAndNote.html":{}}}],["documentation",{"_index":873,"title":{},"body":{"coverage.html":{}}}],["doesnt",{"_index":1094,"title":{},"body":{"classes/taskRunner.html":{}}}],["dozent",{"_index":947,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["e2e",{"_index":1002,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":978,"title":{},"body":{"index.html":{}}}],["email",{"_index":749,"title":{},"body":{"classes/User.html":{},"classes/UserDTO.html":{},"injectables/UsersService.html":{},"interfaces/taskAndNote.html":{}}}],["email':userdto.email",{"_index":844,"title":{},"body":{"injectables/UsersService.html":{}}}],["enumerations",{"_index":943,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["erhalte",{"_index":547,"title":{},"body":{"controllers/TaskController.html":{}}}],["err",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"classes/moodleSubmitHelper.html":{}}}],["error",{"_index":480,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["erstmal",{"_index":859,"title":{},"body":{"injectables/UsersService.html":{}}}],["establish",{"_index":276,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["evaluation",{"_index":968,"title":{},"body":{"miscellaneous/functions.html":{}}}],["example",{"_index":273,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["exception",{"_index":279,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["executioncontext",{"_index":259,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["exist",{"_index":1095,"title":{},"body":{"classes/taskRunner.html":{}}}],["exists",{"_index":1093,"title":{},"body":{"classes/taskRunner.html":{}}}],["expected",{"_index":971,"title":{},"body":{"miscellaneous/functions.html":{}}}],["expects",{"_index":1075,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["expiresin",{"_index":158,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{}}}],["exports",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":917,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":266,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["extractjwt",{"_index":287,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":295,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["f]{24",{"_index":643,"title":{},"body":{"injectables/TaskService.html":{}}}],["fa",{"_index":642,"title":{},"body":{"injectables/TaskService.html":{}}}],["false",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"injectables/TaskService.html":{}}}],["feedback",{"_index":475,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"miscellaneous/functions.html":{},"classes/taskRunner.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{}}}],["filter",{"_index":746,"title":{},"body":{"injectables/TaskService.html":{}}}],["findall",{"_index":819,"title":{},"body":{"injectables/UsersService.html":{}}}],["findalltaskcollections",{"_index":579,"title":{},"body":{"injectables/TaskService.html":{}}}],["findalltasks",{"_index":580,"title":{},"body":{"injectables/TaskService.html":{}}}],["finding",{"_index":668,"title":{},"body":{"injectables/TaskService.html":{}}}],["findmoodleuser",{"_index":820,"title":{},"body":{"injectables/UsersService.html":{}}}],["findmoodleuser(mail",{"_index":834,"title":{},"body":{"injectables/UsersService.html":{}}}],["findmoodleuser(mail:string",{"_index":867,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone",{"_index":821,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(username",{"_index":836,"title":{},"body":{"injectables/UsersService.html":{}}}],["fixme",{"_index":301,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["format",{"_index":961,"title":{},"body":{"miscellaneous/functions.html":{},"classes/moodleSessions.html":{}}}],["found",{"_index":481,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"classes/taskRunner.html":{}}}],["framework",{"_index":976,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":445,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"miscellaneous/functions.html":{},"classes/taskRunner.html":{}}}],["function",{"_index":888,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":949,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["funktioniert",{"_index":440,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["future",{"_index":477,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["gefundene",{"_index":551,"title":{},"body":{"controllers/TaskController.html":{}}}],["get('/gettaskcollections/:id",{"_index":524,"title":{},"body":{"controllers/TaskController.html":{}}}],["get('/getusers",{"_index":782,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/testuser",{"_index":784,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id",{"_index":416,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["getalltaskcollections",{"_index":401,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["getalltasks",{"_index":505,"title":{},"body":{"controllers/TaskController.html":{}}}],["getallusers",{"_index":772,"title":{},"body":{"controllers/UsersController.html":{}}}],["getbody",{"_index":894,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getinstance",{"_index":1036,"title":{},"body":{"classes/moodleSessions.html":{}}}],["getinstance():moodlesessions",{"_index":1061,"title":{},"body":{"classes/moodleSessions.html":{}}}],["getnote",{"_index":893,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getnote(inputparams",{"_index":963,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getopentests",{"_index":506,"title":{},"body":{"controllers/TaskController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getopentests(data",{"_index":965,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getopentests(taskid",{"_index":517,"title":{},"body":{"controllers/TaskController.html":{}}}],["getplugin",{"_index":1087,"title":{},"body":{"classes/taskRunner.html":{}}}],["getplugin(plugincode",{"_index":1090,"title":{},"body":{"classes/taskRunner.html":{}}}],["getplugin(plugincode:string",{"_index":1120,"title":{},"body":{"classes/taskRunner.html":{}}}],["gets",{"_index":1054,"title":{},"body":{"classes/moodleSessions.html":{}}}],["getsession",{"_index":1037,"title":{},"body":{"classes/moodleSessions.html":{}}}],["getsession(key",{"_index":1052,"title":{},"body":{"classes/moodleSessions.html":{}}}],["getsingletask",{"_index":581,"title":{},"body":{"injectables/TaskService.html":{}}}],["getsingletask(taskid",{"_index":602,"title":{},"body":{"injectables/TaskService.html":{}}}],["getsingletaskcollection",{"_index":582,"title":{},"body":{"injectables/TaskService.html":{}}}],["getsingletaskcollection(taskcollectionid",{"_index":604,"title":{},"body":{"injectables/TaskService.html":{}}}],["getstatus",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gettask",{"_index":507,"title":{},"body":{"controllers/TaskController.html":{}}}],["gettask(@param('id",{"_index":542,"title":{},"body":{"controllers/TaskController.html":{}}}],["gettask(taskid",{"_index":521,"title":{},"body":{"controllers/TaskController.html":{}}}],["gettaskcollection",{"_index":402,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["gettaskcollection(@param('id",{"_index":489,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["gettaskcollection(taskcollectionid",{"_index":415,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["gettaskcollectionnote",{"_index":583,"title":{},"body":{"injectables/TaskService.html":{}}}],["gettaskcollectionnote(usermail",{"_index":606,"title":{},"body":{"injectables/TaskService.html":{}}}],["gettaskcollectionnote(usermail:string,taskcollectionid:string):promise",{"_index":698,"title":{},"body":{"injectables/TaskService.html":{}}}],["gettaskcollectionsfortask",{"_index":508,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["gettaskcollectionsfortask(@param('id",{"_index":540,"title":{},"body":{"controllers/TaskController.html":{}}}],["gettaskcollectionsfortask(taskid",{"_index":523,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["gettestuser",{"_index":773,"title":{},"body":{"controllers/UsersController.html":{}}}],["getting",{"_index":635,"title":{"index.html":{}},"body":{"injectables/TaskService.html":{}}}],["getuser",{"_index":774,"title":{},"body":{"controllers/UsersController.html":{}}}],["given",{"_index":1058,"title":{},"body":{"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["grade",{"_index":1070,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["grow",{"_index":1007,"title":{},"body":{"index.html":{}}}],["guard",{"_index":314,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":316,"title":{},"body":{"guards/RolesGuard.html":{}}}],["handlerequest",{"_index":257,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(err",{"_index":262,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["hashedpassword",{"_index":852,"title":{},"body":{"injectables/UsersService.html":{}}}],["headers",{"_index":419,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["headers.authorization",{"_index":464,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["heavily",{"_index":983,"title":{},"body":{"index.html":{}}}],["here",{"_index":272,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"index.html":{}}}],["https://nestjs.com",{"_index":1023,"title":{},"body":{"index.html":{}}}],["https://stackoverflow.com/questions/44072750/how",{"_index":450,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["httpstatus",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["id",{"_index":747,"title":{},"body":{"injectables/TaskService.html":{}}}],["id:\",taskcollectionid",{"_index":648,"title":{},"body":{"injectables/TaskService.html":{}}}],["id:\",taskid",{"_index":639,"title":{},"body":{"injectables/TaskService.html":{}}}],["identifier",{"_index":874,"title":{},"body":{"coverage.html":{}}}],["if(!(task._id.tostring",{"_index":680,"title":{},"body":{"injectables/TaskService.html":{}}}],["if(!moodlesessions.instance",{"_index":1062,"title":{},"body":{"classes/moodleSessions.html":{}}}],["if(!moodleuser",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["if(!session.outcome_service",{"_index":1078,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["if(!taskalreadysubmittedflag",{"_index":729,"title":{},"body":{"injectables/TaskService.html":{}}}],["if(await",{"_index":494,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["if(matching",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["if(moodleuser",{"_index":702,"title":{},"body":{"injectables/TaskService.html":{}}}],["if(moodleuser.solvedtasksorcollections",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["if(note",{"_index":485,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["if(plugin",{"_index":1113,"title":{},"body":{"classes/taskRunner.html":{}}}],["if(plugin.name",{"_index":1124,"title":{},"body":{"classes/taskRunner.html":{}}}],["if(provider.body.custom_taskid",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["if(returnobj",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["if(session",{"_index":469,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["if(solved",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["if(solvedtask.taskid",{"_index":718,"title":{},"body":{"injectables/TaskService.html":{}}}],["if(solvedtasksincollection",{"_index":738,"title":{},"body":{"injectables/TaskService.html":{}}}],["if(solvedtasksincollectionmap",{"_index":705,"title":{},"body":{"injectables/TaskService.html":{}}}],["if(solvedtasksincollectionmap.has(taskcollectionid",{"_index":725,"title":{},"body":{"injectables/TaskService.html":{}}}],["if(submittedtask.taskid",{"_index":728,"title":{},"body":{"injectables/TaskService.html":{}}}],["if(task",{"_index":462,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["if(task._id",{"_index":675,"title":{},"body":{"injectables/TaskService.html":{}}}],["if(tasks.length",{"_index":683,"title":{},"body":{"injectables/TaskService.html":{}}}],["if(taskssolvedmap",{"_index":743,"title":{},"body":{"injectables/TaskService.html":{}}}],["ifeedback",{"_index":245,"title":{"interfaces/IFeedback.html":{}},"body":{"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["ignoreexpiration",{"_index":296,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":327,"title":{},"body":{"guards/RolesGuard.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{}}}],["import(pathtofile",{"_index":1129,"title":{},"body":{"classes/taskRunner.html":{}}}],["imports",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{}}}],["ims",{"_index":922,"title":{},"body":{"dependencies.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{}}}],["initiated:\",provider",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectable",{"_index":62,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":63,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":620,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["injectmodel('task",{"_index":623,"title":{},"body":{"injectables/TaskService.html":{}}}],["injectmodel('taskcollection",{"_index":624,"title":{},"body":{"injectables/TaskService.html":{}}}],["injectmodel('user",{"_index":625,"title":{},"body":{"injectables/TaskService.html":{}}}],["input",{"_index":518,"title":{},"body":{"controllers/TaskController.html":{},"miscellaneous/functions.html":{},"classes/taskRunner.html":{}}}],["inputparams",{"_index":958,"title":{},"body":{"miscellaneous/functions.html":{}}}],["inspired",{"_index":984,"title":{},"body":{"index.html":{}}}],["installation",{"_index":990,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":992,"title":{},"body":{"index.html":{}}}],["instance",{"_index":1034,"title":{},"body":{"classes/moodleSessions.html":{}}}],["interface",{"_index":244,"title":{"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"interfaces/TaskInCollection.html":{},"interfaces/taskAndNote.html":{}},"body":{"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"classes/User.html":{},"coverage.html":{},"interfaces/taskAndNote.html":{}}}],["interfaces",{"_index":246,"title":{},"body":{"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"interfaces/TaskInCollection.html":{},"overview.html":{},"interfaces/taskAndNote.html":{}}}],["invalid",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"classes/moodleSubmitHelper.html":{}}}],["isvalid",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"classes/moodleSubmitHelper.html":{}}}],["itestresult",{"_index":250,"title":{"interfaces/ITestResult.html":{}},"body":{"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"coverage.html":{}}}],["join",{"_index":1013,"title":{},"body":{"index.html":{}}}],["json",{"_index":1046,"title":{},"body":{"classes/moodleSessions.html":{}}}],["jwt",{"_index":290,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":153,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":253,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtconstants",{"_index":151,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":294,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":149,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":154,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["jwtservice(null",{"_index":332,"title":{},"body":{"guards/RolesGuard.html":{}}}],["jwtstrategy",{"_index":142,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1020,"title":{},"body":{"index.html":{}}}],["kann",{"_index":298,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["key",{"_index":1045,"title":{},"body":{"classes/moodleSessions.html":{}}}],["legend",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":1026,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":1005,"title":{},"body":{"index.html":{}}}],["local",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":147,"title":{},"body":{"modules/AuthModule.html":{}}}],["localauthguard",{"_index":101,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":143,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["lodash",{"_index":924,"title":{},"body":{"dependencies.html":{}}}],["lodash.isnumber",{"_index":926,"title":{},"body":{"dependencies.html":{}}}],["logged",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["logic",{"_index":271,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["login",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["login(@res",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(res",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginmoodleuserandgettask",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginmoodleuserandgettask(username",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginmoodleuserandgettask(username,usermail,taskid):promise",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["lti",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"dependencies.html":{},"classes/moodleSessions.html":{},"miscellaneous/variables.html":{}}}],["lti.provider(config.moodle_consumer_key",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["ltisessioninitiate",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["ltisessioninitiate(request",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["ltisessioninitiate(request):promise",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["löschen",{"_index":694,"title":{},"body":{"injectables/TaskService.html":{}}}],["mail",{"_index":830,"title":{},"body":{"injectables/UsersService.html":{}}}],["mail}).exec",{"_index":868,"title":{},"body":{"injectables/UsersService.html":{}}}],["main",{"_index":953,"title":{},"body":{"miscellaneous/functions.html":{}}}],["man",{"_index":441,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["manager",{"_index":1044,"title":{},"body":{"classes/moodleSessions.html":{}}}],["managment",{"_index":1050,"title":{},"body":{"classes/moodleSessions.html":{}}}],["map",{"_index":755,"title":{},"body":{"classes/User.html":{},"classes/moodleSessions.html":{},"interfaces/taskAndNote.html":{}}}],["map([[taskcollectionid,solvedtasksincollection",{"_index":732,"title":{},"body":{"injectables/TaskService.html":{}}}],["map([[taskorcollectionid,note",{"_index":745,"title":{},"body":{"injectables/TaskService.html":{}}}],["marktaskincollectionassubmitted",{"_index":584,"title":{},"body":{"injectables/TaskService.html":{}}}],["marktaskincollectionassubmitted(usermail",{"_index":609,"title":{},"body":{"injectables/TaskService.html":{}}}],["marktaskincollectionassubmitted(usermail:string,taskcollectionid:string,taskid:string,note:number):promise",{"_index":722,"title":{},"body":{"injectables/TaskService.html":{}}}],["marktaskorcollectionassubmitted",{"_index":585,"title":{},"body":{"injectables/TaskService.html":{}}}],["marktaskorcollectionassubmitted(usermail",{"_index":611,"title":{},"body":{"injectables/TaskService.html":{}}}],["marktaskorcollectionassubmitted(usermail:string,taskorcollectionid:string,note:number):promise",{"_index":735,"title":{},"body":{"injectables/TaskService.html":{}}}],["match",{"_index":1092,"title":{},"body":{"classes/taskRunner.html":{}}}],["matching",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"overview.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["message:\"task",{"_index":492,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["metadata",{"_index":935,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":1101,"title":{},"body":{"classes/taskRunner.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["miscellaneous",{"_index":942,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":653,"title":{},"body":{"injectables/TaskService.html":{},"index.html":{}}}],["mitschicken",{"_index":449,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["mode",{"_index":997,"title":{},"body":{"index.html":{}}}],["model",{"_index":587,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["module",{"_index":33,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":35,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongoose",{"_index":371,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"interfaces/taskAndNote.html":{}}}],["mongoosemodule",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature([{name",{"_index":571,"title":{},"body":{"modules/TaskModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forroot(config.mongodb_path",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["moodle",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TaskController.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{}}}],["moodlelogin",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{}}}],["moodlelogin(request",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["moodlesessions",{"_index":183,"title":{"classes/moodleSessions.html":{}},"body":{"injectables/AuthService.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"coverage.html":{},"classes/moodleSessions.html":{}}}],["moodlesessions.getinstance",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["moodlesessions.instance",{"_index":1063,"title":{},"body":{"classes/moodleSessions.html":{}}}],["moodlesubmithelper",{"_index":436,"title":{"classes/moodleSubmitHelper.html":{}},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"coverage.html":{},"classes/moodleSubmitHelper.html":{}}}],["moodleuser",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["moodleuser,solved",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["moodleuser.solvedtasksincollection",{"_index":704,"title":{},"body":{"injectables/TaskService.html":{}}}],["moodleuser.solvedtasksorcollections",{"_index":742,"title":{},"body":{"injectables/TaskService.html":{}}}],["moodleuser.solvedtasksorcollections.has(taskid",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["more",{"_index":1016,"title":{},"body":{"index.html":{}}}],["muss",{"_index":442,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["mytaskrunner",{"_index":465,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["mytaskrunner.runtests(task",{"_index":557,"title":{},"body":{"controllers/TaskController.html":{}}}],["mytaskrunner.submittask(task",{"_index":467,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["myśliwiec",{"_index":1021,"title":{},"body":{"index.html":{}}}],["nach",{"_index":545,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["name",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{}}}],["name,userid,mail,token,taskid",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["name:username,userid:userid,mail:usermail,token:access_token",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["nest",{"_index":986,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1025,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":911,"title":{},"body":{"dependencies.html":{}}}],["nestjs/core",{"_index":322,"title":{},"body":{"guards/RolesGuard.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":150,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"interfaces/taskAndNote.html":{}}}],["nestjs/passport",{"_index":146,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":916,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/moodleSessions.html":{}}}],["new:true",{"_index":667,"title":{},"body":{"injectables/TaskService.html":{}}}],["newtaskcollection",{"_index":685,"title":{},"body":{"injectables/TaskService.html":{}}}],["newtaskcollection.tasks",{"_index":686,"title":{},"body":{"injectables/TaskService.html":{}}}],["newtasksforcollection",{"_index":679,"title":{},"body":{"injectables/TaskService.html":{}}}],["newtasksforcollection.length",{"_index":684,"title":{},"body":{"injectables/TaskService.html":{}}}],["newtasksforcollection.push(task",{"_index":682,"title":{},"body":{"injectables/TaskService.html":{}}}],["nicht",{"_index":299,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["node.js",{"_index":975,"title":{},"body":{"index.html":{}}}],["note",{"_index":466,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"miscellaneous/functions.html":{},"classes/moodleSubmitHelper.html":{},"interfaces/taskAndNote.html":{}}}],["notevil",{"_index":929,"title":{},"body":{"dependencies.html":{}}}],["npm",{"_index":991,"title":{},"body":{"index.html":{}}}],["null",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TaskService.html":{},"classes/taskRunner.html":{}}}],["number",{"_index":392,"title":{},"body":{"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"miscellaneous/functions.html":{},"classes/moodleSubmitHelper.html":{},"interfaces/taskAndNote.html":{}}}],["nur",{"_index":443,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["obj",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/functions.html":{},"classes/moodleSessions.html":{}}}],["object",{"_index":1142,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objekt",{"_index":652,"title":{},"body":{"injectables/TaskService.html":{}}}],["ok",{"_index":68,"title":{},"body":{"injectables/AppService.html":{},"controllers/TaskCollectionController.html":{},"classes/moodleSubmitHelper.html":{}}}],["old",{"_index":848,"title":{},"body":{"injectables/UsersService.html":{}}}],["open",{"_index":960,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"classes/taskRunner.html":{}}}],["opentests",{"_index":349,"title":{},"body":{"classes/Task.html":{},"classes/taskRunner.html":{}}}],["optional",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["out",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["outcome",{"_index":1079,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["output",{"_index":972,"title":{},"body":{"miscellaneous/functions.html":{}}}],["overview",{"_index":1082,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":909,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["param('id",{"_index":482,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["param('taskcollectionid",{"_index":459,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["param('taskid",{"_index":460,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["param('token",{"_index":559,"title":{},"body":{"controllers/TaskController.html":{}}}],["parameters",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["pass",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["passed",{"_index":251,"title":{},"body":{"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{}}}],["passport",{"_index":289,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":145,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":291,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":292,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":311,"title":{},"body":{"injectables/LocalStrategy.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/taskAndNote.html":{}}}],["patch",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["path",{"_index":1106,"title":{},"body":{"classes/taskRunner.html":{}}}],["pathtofile",{"_index":1127,"title":{},"body":{"classes/taskRunner.html":{}}}],["payload",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":303,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":304,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["placeholder",{"_index":476,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["please",{"_index":1014,"title":{},"body":{"index.html":{}}}],["plugin",{"_index":966,"title":{},"body":{"miscellaneous/functions.html":{},"classes/taskRunner.html":{}}}],["plugin.default.getopentests(task.dataforplugin,task.opentests,input",{"_index":1115,"title":{},"body":{"classes/taskRunner.html":{}}}],["plugin.default.submit(task.dataforplugin,task.closedtests,input",{"_index":1119,"title":{},"body":{"classes/taskRunner.html":{}}}],["plugincode",{"_index":350,"title":{},"body":{"classes/Task.html":{},"classes/taskRunner.html":{}}}],["plugindirectory:string",{"_index":1122,"title":{},"body":{"classes/taskRunner.html":{}}}],["plugindirectory=plugin.directory",{"_index":1126,"title":{},"body":{"classes/taskRunner.html":{}}}],["plugindirectorypath",{"_index":905,"title":{},"body":{"coverage.html":{},"classes/taskRunner.html":{},"miscellaneous/variables.html":{}}}],["plugindirectorypath+plugindirectory+'/'+pluginfilename",{"_index":1128,"title":{},"body":{"classes/taskRunner.html":{}}}],["pluginfilename:string",{"_index":1121,"title":{},"body":{"classes/taskRunner.html":{}}}],["pluginfilename=plugin.mainfile",{"_index":1125,"title":{},"body":{"classes/taskRunner.html":{}}}],["plugins",{"_index":1104,"title":{},"body":{"classes/taskRunner.html":{},"miscellaneous/variables.html":{}}}],["plugins.foreach(plugin",{"_index":1123,"title":{},"body":{"classes/taskRunner.html":{}}}],["plugins/plugins.json",{"_index":1105,"title":{},"body":{"classes/taskRunner.html":{}}}],["post",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["post('/create",{"_index":408,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["post('/login",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/moodlelogin",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/register",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/searchtask",{"_index":528,"title":{},"body":{"controllers/TaskController.html":{}}}],["post('/submit/:id",{"_index":420,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["post('/submittask/:taskcollectionid/:taskid",{"_index":424,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["post('/test/:id",{"_index":519,"title":{},"body":{"controllers/TaskController.html":{}}}],["prefix",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["primär",{"_index":544,"title":{},"body":{"controllers/TaskController.html":{}}}],["private",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"classes/moodleSessions.html":{},"classes/taskRunner.html":{}}}],["production",{"_index":999,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":974,"title":{},"body":{"index.html":{}}}],["project",{"_index":1006,"title":{},"body":{"index.html":{}}}],["promise",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"classes/taskRunner.html":{}}}],["prop",{"_index":355,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"classes/User.html":{},"interfaces/taskAndNote.html":{}}}],["properties",{"_index":248,"title":{},"body":{"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"classes/moodleSessions.html":{},"interfaces/taskAndNote.html":{}}}],["provide",{"_index":815,"title":{},"body":{"modules/UsersModule.html":{}}}],["provider",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["provider.body.custom_taskid",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["provider.body.ext_user_username",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["provider.body.lis_person_contact_email_primary",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["provider.body.user_id",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["provider.valid_request(request",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["providers",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["public",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserDTO.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{}}}],["put",{"_index":432,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["put('/changepassword",{"_index":777,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('/update",{"_index":428,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["put(userdto",{"_index":838,"title":{},"body":{"injectables/UsersService.html":{}}}],["putuser",{"_index":775,"title":{},"body":{"controllers/UsersController.html":{}}}],["putuser(res",{"_index":787,"title":{},"body":{"controllers/UsersController.html":{}}}],["query\",searchquery",{"_index":660,"title":{},"body":{"injectables/TaskService.html":{}}}],["raw",{"_index":1099,"title":{},"body":{"classes/taskRunner.html":{}}}],["read",{"_index":1015,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["reflect",{"_index":934,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":319,"title":{},"body":{"guards/RolesGuard.html":{}}}],["register",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(res",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["remove",{"_index":1059,"title":{},"body":{"classes/moodleSessions.html":{}}}],["removes",{"_index":1057,"title":{},"body":{"classes/moodleSessions.html":{}}}],["removesession",{"_index":1038,"title":{},"body":{"classes/moodleSessions.html":{}}}],["removesession(key",{"_index":1055,"title":{},"body":{"classes/moodleSessions.html":{}}}],["repository",{"_index":989,"title":{},"body":{"index.html":{}}}],["req",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["request",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["request\"+err",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["require(\"ims",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["requiredroles",{"_index":328,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":337,"title":{},"body":{"guards/RolesGuard.html":{}}}],["res",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["res.cookie('session',returnobj",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(httpstatus.internal_server_error).json",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{}}}],["res.status(httpstatus.not_found).json",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["res.status(httpstatus.not_modified).json",{"_index":553,"title":{},"body":{"controllers/TaskController.html":{}}}],["res.status(httpstatus.ok).json",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["res.status(httpstatus.ok).json(returnobj",{"_index":491,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["res.status(httpstatus.ok).json(runnedtests",{"_index":558,"title":{},"body":{"controllers/TaskController.html":{}}}],["res.status(httpstatus.unauthorized).json",{"_index":479,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["reset",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.redirect('http://localhost:8080/solvefullscreen/alreadysubmitted",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.redirect('http://localhost:8080/solvefullscreen?exerciseid='+taskid+'&token='+token",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["rest",{"_index":664,"title":{},"body":{"injectables/TaskService.html":{}}}],["result",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"overview.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"overview.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["returnobj",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["rimraf",{"_index":937,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":323,"title":{},"body":{"guards/RolesGuard.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"interfaces/taskAndNote.html":{},"miscellaneous/variables.html":{}}}],["role':userdto.role}).exec",{"_index":845,"title":{},"body":{"injectables/UsersService.html":{}}}],["role.enum",{"_index":324,"title":{},"body":{"guards/RolesGuard.html":{}}}],["role:'test",{"_index":797,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles",{"_index":790,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":795,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles(role.user",{"_index":798,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles.decorator",{"_index":326,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles_key",{"_index":325,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":315,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["rounded",{"_index":1074,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["run",{"_index":954,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["runned",{"_index":962,"title":{},"body":{"miscellaneous/functions.html":{}}}],["runnedtests",{"_index":556,"title":{},"body":{"controllers/TaskController.html":{}}}],["running",{"_index":1109,"title":{},"body":{"classes/taskRunner.html":{}}}],["runs",{"_index":1098,"title":{},"body":{"classes/taskRunner.html":{}}}],["runtests",{"_index":1088,"title":{},"body":{"classes/taskRunner.html":{}}}],["runtests(task",{"_index":1096,"title":{},"body":{"classes/taskRunner.html":{}}}],["runtests(task:any,input:any):promise",{"_index":1108,"title":{},"body":{"classes/taskRunner.html":{}}}],["rxjs",{"_index":938,"title":{},"body":{"dependencies.html":{}}}],["saltrounds",{"_index":850,"title":{},"body":{"injectables/UsersService.html":{}}}],["save",{"_index":861,"title":{},"body":{"injectables/UsersService.html":{}}}],["scalable",{"_index":979,"title":{},"body":{"index.html":{}}}],["schema",{"_index":368,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"interfaces/taskAndNote.html":{}}}],["schemafactory",{"_index":369,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"classes/User.html":{},"interfaces/taskAndNote.html":{}}}],["schemafactory.createforclass(task",{"_index":375,"title":{},"body":{"classes/Task.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(taskcollection",{"_index":396,"title":{},"body":{"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":759,"title":{},"body":{"classes/User.html":{},"interfaces/taskAndNote.html":{},"miscellaneous/variables.html":{}}}],["search",{"_index":659,"title":{},"body":{"injectables/TaskService.html":{}}}],["searchbyname",{"_index":657,"title":{},"body":{"injectables/TaskService.html":{}}}],["searchbytag",{"_index":656,"title":{},"body":{"injectables/TaskService.html":{}}}],["searchquery",{"_index":527,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["searchstring",{"_index":548,"title":{},"body":{"controllers/TaskController.html":{}}}],["searchtask",{"_index":509,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["searchtask(@res",{"_index":549,"title":{},"body":{"controllers/TaskController.html":{}}}],["searchtask(res",{"_index":526,"title":{},"body":{"controllers/TaskController.html":{}}}],["searchtask(searchquery",{"_index":614,"title":{},"body":{"injectables/TaskService.html":{}}}],["secret",{"_index":155,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["secretkey",{"_index":1143,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":302,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["see",{"_index":970,"title":{},"body":{"miscellaneous/functions.html":{}}}],["send",{"_index":451,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["senden",{"_index":561,"title":{},"body":{"controllers/TaskController.html":{}}}],["server",{"_index":980,"title":{},"body":{"index.html":{}}}],["service",{"_index":1080,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["session",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{}}}],["session.body.ext_user_username",{"_index":471,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["session.body.lis_person_contact_email_primary",{"_index":472,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["session.body.user_id",{"_index":470,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["session.outcome_service.send_replace_result(grade/100",{"_index":1077,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["sessions",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"classes/moodleSessions.html":{}}}],["sessions.addsession(access_token,provider",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["sessions.getsession(authtoken",{"_index":468,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["setmetadata(roles_key",{"_index":1144,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shared",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["side",{"_index":981,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":157,"title":{},"body":{"modules/AuthModule.html":{}}}],["singleton",{"_index":1030,"title":{},"body":{"classes/moodleSessions.html":{}}}],["solved",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["solvedtask.note/100",{"_index":719,"title":{},"body":{"injectables/TaskService.html":{}}}],["solvedtasksincollection",{"_index":707,"title":{},"body":{"injectables/TaskService.html":{},"classes/User.html":{}}}],["solvedtasksincollection.delete(taskorcollectionid",{"_index":740,"title":{},"body":{"injectables/TaskService.html":{}}}],["solvedtasksincollection.foreach(solvedtask",{"_index":717,"title":{},"body":{"injectables/TaskService.html":{}}}],["solvedtasksincollection.foreach(submittedtask",{"_index":727,"title":{},"body":{"injectables/TaskService.html":{}}}],["solvedtasksincollection.has(taskorcollectionid",{"_index":739,"title":{},"body":{"injectables/TaskService.html":{}}}],["solvedtasksincollection.push(taskandnoteobj",{"_index":730,"title":{},"body":{"injectables/TaskService.html":{}}}],["solvedtasksincollectionmap",{"_index":703,"title":{},"body":{"injectables/TaskService.html":{}}}],["solvedtasksincollectionmap.get(taskcollectionid",{"_index":708,"title":{},"body":{"injectables/TaskService.html":{}}}],["solvedtasksincollectionmap.has(taskcollectionid",{"_index":706,"title":{},"body":{"injectables/TaskService.html":{}}}],["solvedtasksincollectionmap.set(taskcollectionid,solvedtasksincollection",{"_index":731,"title":{},"body":{"injectables/TaskService.html":{}}}],["solvedtasksorcollections",{"_index":750,"title":{},"body":{"classes/User.html":{},"interfaces/taskAndNote.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{}}}],["sponsors",{"_index":1009,"title":{},"body":{"index.html":{}}}],["src/.../auth.service.ts",{"_index":1137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../basicexamplepluginmain.ts",{"_index":952,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../codingpluginmain.ts",{"_index":951,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":1136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":950,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../role.enum.ts",{"_index":944,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":1139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../task.schema.ts",{"_index":1133,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../taskcollection.schema.ts",{"_index":1132,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../taskrunner.ts",{"_index":1138,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":1134,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:10",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":64,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:4",{"_index":65,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:14",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:29",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:46",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":144,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.service.ts:10",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:16",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:28",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:38",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:69",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/constants.ts",{"_index":881,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/jwt",{"_index":254,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":282,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:17",{"_index":286,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":284,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/local",{"_index":305,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts",{"_index":307,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts:12",{"_index":312,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:7",{"_index":309,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/moodlesessions.ts",{"_index":883,"title":{},"body":{"coverage.html":{},"classes/moodleSessions.html":{}}}],["src/auth/moodlesessions.ts:10",{"_index":1039,"title":{},"body":{"classes/moodleSessions.html":{}}}],["src/auth/moodlesessions.ts:20",{"_index":1049,"title":{},"body":{"classes/moodleSessions.html":{}}}],["src/auth/moodlesessions.ts:35",{"_index":1042,"title":{},"body":{"classes/moodleSessions.html":{}}}],["src/auth/moodlesessions.ts:44",{"_index":1056,"title":{},"body":{"classes/moodleSessions.html":{}}}],["src/auth/moodlesessions.ts:55",{"_index":1053,"title":{},"body":{"classes/moodleSessions.html":{}}}],["src/auth/moodlesessions.ts:9",{"_index":1040,"title":{},"body":{"classes/moodleSessions.html":{}}}],["src/auth/roles/role.enum",{"_index":789,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/auth/roles/role.enum.ts",{"_index":945,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/auth/roles/roles.decorator",{"_index":791,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/auth/roles/roles.decorator.ts",{"_index":886,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/roles/roles.guard",{"_index":814,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/roles/roles.guard.ts",{"_index":317,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/roles/roles.guard.ts:11",{"_index":321,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/roles/roles.guard.ts:8",{"_index":320,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/main.ts",{"_index":887,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/plugins/basicexampleplugin/basicexamplepluginmain.ts",{"_index":890,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/plugins/codingplugin/codingplugininterfaces.ts",{"_index":247,"title":{},"body":{"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"coverage.html":{}}}],["src/plugins/codingplugin/codingpluginmain.ts",{"_index":891,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/task/moodlesubmithelper.ts",{"_index":895,"title":{},"body":{"coverage.html":{},"classes/moodleSubmitHelper.html":{}}}],["src/task/moodlesubmithelper.ts:1",{"_index":1068,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["src/task/moodlesubmithelper.ts:9",{"_index":1071,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["src/task/task.controller.ts",{"_index":502,"title":{},"body":{"controllers/TaskController.html":{},"coverage.html":{}}}],["src/task/task.controller.ts:119",{"_index":531,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:32",{"_index":513,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:44",{"_index":516,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:49",{"_index":525,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:54",{"_index":522,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:64",{"_index":529,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:73",{"_index":533,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:87",{"_index":515,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:99",{"_index":520,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.module.ts",{"_index":565,"title":{},"body":{"modules/TaskModule.html":{}}}],["src/task/task.schema.ts",{"_index":341,"title":{},"body":{"classes/Task.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/task/task.schema.ts:23",{"_index":366,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:26",{"_index":362,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:29",{"_index":357,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:32",{"_index":359,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:35",{"_index":367,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:38",{"_index":365,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:41",{"_index":358,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:44",{"_index":364,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:47",{"_index":360,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:50",{"_index":356,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:53",{"_index":363,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:56",{"_index":361,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:7",{"_index":354,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.service.ts",{"_index":575,"title":{},"body":{"injectables/TaskService.html":{},"coverage.html":{}}}],["src/task/task.service.ts:100",{"_index":619,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:107",{"_index":596,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:117",{"_index":597,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:125",{"_index":607,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:159",{"_index":610,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:16",{"_index":595,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:191",{"_index":613,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:22",{"_index":593,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:28",{"_index":601,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:33",{"_index":600,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:38",{"_index":603,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:48",{"_index":605,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:58",{"_index":615,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:63",{"_index":617,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:70",{"_index":608,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:83",{"_index":599,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:9",{"_index":590,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/taskcollection.controller.ts",{"_index":398,"title":{},"body":{"controllers/TaskCollectionController.html":{},"coverage.html":{}}}],["src/task/taskcollection.controller.ts:116",{"_index":417,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["src/task/taskcollection.controller.ts:126",{"_index":429,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["src/task/taskcollection.controller.ts:136",{"_index":412,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["src/task/taskcollection.controller.ts:31",{"_index":409,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["src/task/taskcollection.controller.ts:40",{"_index":414,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["src/task/taskcollection.controller.ts:45",{"_index":425,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["src/task/taskcollection.controller.ts:81",{"_index":421,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["src/task/taskcollection.schema.ts",{"_index":377,"title":{},"body":{"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/task/taskcollection.schema.ts:12",{"_index":380,"title":{},"body":{"classes/TaskCollection.html":{}}}],["src/task/taskcollection.schema.ts:24",{"_index":387,"title":{},"body":{"classes/TaskCollection.html":{}}}],["src/task/taskcollection.schema.ts:27",{"_index":384,"title":{},"body":{"classes/TaskCollection.html":{}}}],["src/task/taskcollection.schema.ts:30",{"_index":388,"title":{},"body":{"classes/TaskCollection.html":{}}}],["src/task/taskcollection.schema.ts:33",{"_index":382,"title":{},"body":{"classes/TaskCollection.html":{}}}],["src/task/taskcollection.schema.ts:36",{"_index":385,"title":{},"body":{"classes/TaskCollection.html":{}}}],["src/task/taskcollection.schema.ts:39",{"_index":381,"title":{},"body":{"classes/TaskCollection.html":{}}}],["src/task/taskcollection.schema.ts:42",{"_index":383,"title":{},"body":{"classes/TaskCollection.html":{}}}],["src/task/taskcollection.schema.ts:45",{"_index":386,"title":{},"body":{"classes/TaskCollection.html":{}}}],["src/task/taskrunner.ts",{"_index":902,"title":{},"body":{"coverage.html":{},"classes/taskRunner.html":{},"miscellaneous/variables.html":{}}}],["src/task/taskrunner.ts:16",{"_index":1097,"title":{},"body":{"classes/taskRunner.html":{}}}],["src/task/taskrunner.ts:33",{"_index":1103,"title":{},"body":{"classes/taskRunner.html":{}}}],["src/task/taskrunner.ts:49",{"_index":1091,"title":{},"body":{"classes/taskRunner.html":{}}}],["src/task/taskrunner.ts:5",{"_index":1089,"title":{},"body":{"classes/taskRunner.html":{}}}],["src/users/user.dto",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/users/user.dto.ts",{"_index":760,"title":{},"body":{"classes/UserDTO.html":{},"coverage.html":{}}}],["src/users/user.dto.ts:3",{"_index":762,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/users/user.dto.ts:5",{"_index":763,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/users/user.dto.ts:6",{"_index":767,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/users/user.dto.ts:7",{"_index":764,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/users/user.dto.ts:8",{"_index":765,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/users/user.dto.ts:9",{"_index":766,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/users/user.schema.ts",{"_index":748,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"interfaces/taskAndNote.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/user.schema.ts:14",{"_index":752,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.schema.ts:17",{"_index":758,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.schema.ts:20",{"_index":751,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.schema.ts:23",{"_index":753,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.schema.ts:26",{"_index":757,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.schema.ts:30",{"_index":756,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.schema.ts:33",{"_index":754,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":769,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:15",{"_index":786,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:22",{"_index":783,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:27",{"_index":778,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:39",{"_index":781,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:49",{"_index":788,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:61",{"_index":785,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":810,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/users/users.service.ts",{"_index":817,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:14",{"_index":839,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:21",{"_index":825,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:31",{"_index":832,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:37",{"_index":827,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:51",{"_index":829,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:63",{"_index":835,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:67",{"_index":837,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:71",{"_index":833,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:9",{"_index":823,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":995,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":998,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1000,"title":{},"body":{"index.html":{}}}],["started",{"_index":973,"title":{"index.html":{}},"body":{}}],["starter",{"_index":988,"title":{},"body":{"index.html":{}}}],["statements",{"_index":875,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1033,"title":{},"body":{"classes/moodleSessions.html":{}}}],["status",{"_index":67,"title":{},"body":{"injectables/AppService.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["stay",{"_index":1017,"title":{},"body":{"index.html":{}}}],["store",{"_index":1032,"title":{},"body":{"classes/moodleSessions.html":{}}}],["stored",{"_index":959,"title":{},"body":{"miscellaneous/functions.html":{},"classes/moodleSessions.html":{}}}],["strategy",{"_index":288,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/LocalStrategy.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/moodleSessions.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{},"miscellaneous/variables.html":{}}}],["string.substring(string.indexof",{"_index":1140,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sub",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["submission",{"_index":423,"title":{},"body":{"controllers/TaskCollectionController.html":{},"miscellaneous/functions.html":{}}}],["submit",{"_index":403,"title":{},"body":{"controllers/TaskCollectionController.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["submit(data",{"_index":967,"title":{},"body":{"miscellaneous/functions.html":{}}}],["submit(taskcollectionid",{"_index":418,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["submithelper",{"_index":483,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["submithelper.submitnotetomoodle(session,note",{"_index":486,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["submitnotetomoodle",{"_index":1067,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["submitnotetomoodle(session",{"_index":1069,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["submitnotetomoodle(session:any,grade:number",{"_index":1073,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["submits",{"_index":1072,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["submittask",{"_index":510,"title":{},"body":{"controllers/TaskController.html":{},"classes/taskRunner.html":{}}}],["submittask(task",{"_index":1102,"title":{},"body":{"classes/taskRunner.html":{}}}],["submittask(task:any,input:any):promise",{"_index":1116,"title":{},"body":{"classes/taskRunner.html":{}}}],["submittask(taskid",{"_index":530,"title":{},"body":{"controllers/TaskController.html":{}}}],["submittaskincollection",{"_index":404,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["submittaskincollection(taskcollectionid",{"_index":422,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["submitted",{"_index":474,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/moodleSubmitHelper.html":{}}}],["submittedresult",{"_index":1118,"title":{},"body":{"classes/taskRunner.html":{}}}],["submitting:\",task.closedtests,\"for",{"_index":1117,"title":{},"body":{"classes/taskRunner.html":{}}}],["successful",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["successfully",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["suche",{"_index":543,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["super",{"_index":293,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super.canactivate(context",{"_index":277,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["super.login(request",{"_index":275,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":478,"title":{},"body":{"controllers/TaskCollectionController.html":{},"index.html":{},"modules.html":{}}}],["svg",{"_index":1028,"title":{},"body":{"modules.html":{}}}],["synchronisieren",{"_index":647,"title":{},"body":{"injectables/TaskService.html":{}}}],["system",{"_index":1051,"title":{},"body":{"classes/moodleSessions.html":{}}}],["table",{"_index":908,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":907,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":351,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{}}}],["task",{"_index":339,"title":{"classes/Task.html":{}},"body":{"classes/Task.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"classes/taskRunner.html":{}}}],["task._id",{"_index":715,"title":{},"body":{"injectables/TaskService.html":{}}}],["task.controller",{"_index":566,"title":{},"body":{"modules/TaskModule.html":{}}}],["task.name",{"_index":572,"title":{},"body":{"modules/TaskModule.html":{}}}],["task.schema",{"_index":534,"title":{},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{}}}],["task.service",{"_index":431,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{}}}],["task.weighting",{"_index":713,"title":{},"body":{"injectables/TaskService.html":{}}}],["task/task.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["task:\",taskdto",{"_index":627,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskalreadysubmittedflag",{"_index":726,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskandnote",{"_index":622,"title":{"interfaces/taskAndNote.html":{}},"body":{"injectables/TaskService.html":{},"classes/User.html":{},"coverage.html":{},"interfaces/taskAndNote.html":{}}}],["taskandnoteobj:taskandnote",{"_index":723,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcollection",{"_index":376,"title":{"classes/TaskCollection.html":{}},"body":{"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["taskcollection.controller",{"_index":567,"title":{},"body":{"modules/TaskModule.html":{}}}],["taskcollection.name",{"_index":573,"title":{},"body":{"modules/TaskModule.html":{}}}],["taskcollection.schema",{"_index":433,"title":{},"body":{"controllers/TaskCollectionController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{}}}],["taskcollection.tasks",{"_index":673,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcollectioncontroller",{"_index":397,"title":{"controllers/TaskCollectionController.html":{}},"body":{"controllers/TaskCollectionController.html":{},"modules/TaskModule.html":{},"coverage.html":{}}}],["taskcollectiondocument",{"_index":389,"title":{},"body":{"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{},"miscellaneous/typealiases.html":{}}}],["taskcollectiondto",{"_index":407,"title":{},"body":{"controllers/TaskCollectionController.html":{},"injectables/TaskService.html":{}}}],["taskcollectionid",{"_index":413,"title":{},"body":{"controllers/TaskCollectionController.html":{},"injectables/TaskService.html":{}}}],["taskcollectionid.match(/^[0",{"_index":649,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcollectionid}).exec",{"_index":651,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcollectionmodel",{"_index":588,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcollections",{"_index":669,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcollections.foreach((taskcollection:any",{"_index":678,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcollections.foreach(taskcollection",{"_index":672,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcollectionschema",{"_index":395,"title":{},"body":{"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["taskcollectionsfound",{"_index":677,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcollectionsfound.push(taskcollection",{"_index":676,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcollectionsfound:taskcollection",{"_index":671,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcontroller",{"_index":501,"title":{"controllers/TaskController.html":{}},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{},"coverage.html":{}}}],["taskdocument",{"_index":372,"title":{},"body":{"classes/Task.html":{},"injectables/TaskService.html":{},"miscellaneous/typealiases.html":{}}}],["taskdto",{"_index":427,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["taskdto._id",{"_index":663,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskergebnis",{"_index":560,"title":{},"body":{"controllers/TaskController.html":{}}}],["taskid",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"interfaces/taskAndNote.html":{}}}],["taskid,note:note",{"_index":724,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskid.match(/^[0",{"_index":640,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskid.tostring",{"_index":681,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskid}).exec",{"_index":645,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskid},{...rest",{"_index":666,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskincollection",{"_index":379,"title":{"interfaces/TaskInCollection.html":{}},"body":{"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"coverage.html":{}}}],["taskmodel",{"_index":591,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskmodule",{"_index":46,"title":{"modules/TaskModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules.html":{},"overview.html":{}}}],["taskname",{"_index":393,"title":{},"body":{"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{}}}],["taskorcollectionid",{"_index":612,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskrunner",{"_index":434,"title":{"classes/taskRunner.html":{}},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"coverage.html":{},"classes/taskRunner.html":{}}}],["tasks",{"_index":378,"title":{},"body":{"classes/TaskCollection.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{}}}],["tasks.foreach(task",{"_index":674,"title":{},"body":{"injectables/TaskService.html":{}}}],["tasks[]title",{"_index":646,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskschema",{"_index":374,"title":{},"body":{"classes/Task.html":{},"modules/TaskModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["taskservice",{"_index":430,"title":{"injectables/TaskService.html":{}},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"coverage.html":{},"overview.html":{}}}],["tasksincollectionarray",{"_index":710,"title":{},"body":{"injectables/TaskService.html":{}}}],["tasksincollectionarray.foreach(task",{"_index":712,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskssolvedmap",{"_index":741,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskssolvedmap.set(taskorcollectionid,note",{"_index":744,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskweightening",{"_index":716,"title":{},"body":{"injectables/TaskService.html":{}}}],["test",{"_index":796,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["test:covsupport",{"_index":1004,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1003,"title":{},"body":{"index.html":{}}}],["testn",{"_index":846,"title":{},"body":{"injectables/UsersService.html":{}}}],["testresult",{"_index":1114,"title":{},"body":{"classes/taskRunner.html":{}}}],["testresults",{"_index":249,"title":{},"body":{"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{}}}],["tests",{"_index":956,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"classes/taskRunner.html":{}}}],["tests:\",task.opentests,\"for",{"_index":1110,"title":{},"body":{"classes/taskRunner.html":{}}}],["thanks",{"_index":1008,"title":{},"body":{"index.html":{}}}],["that.usermodel(userdto",{"_index":863,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.appservice.getstatus",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(userdto",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.loginmoodleuserandgettask(name,mail,taskid",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.ltisessioninitiate(request",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(username",{"_index":313,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.deletetasksincollection(taskid",{"_index":695,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.findalltaskcollections",{"_index":670,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.getplugin(task.plugincode",{"_index":1112,"title":{},"body":{"classes/taskRunner.html":{}}}],["this.getsingletaskcollection(taskcollectionid",{"_index":709,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.jwtservice.sign(payload",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":329,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.sessions",{"_index":1060,"title":{},"body":{"classes/moodleSessions.html":{}}}],["this.sessions.delete(key",{"_index":1065,"title":{},"body":{"classes/moodleSessions.html":{}}}],["this.sessions.get(key",{"_index":1066,"title":{},"body":{"classes/moodleSessions.html":{}}}],["this.sessions.set(key,session",{"_index":1064,"title":{},"body":{"classes/moodleSessions.html":{}}}],["this.taskcollectionmodel(taskcollectiondto",{"_index":633,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskcollectionmodel.find({}).exec",{"_index":638,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskcollectionmodel.findbyid({'_id",{"_index":650,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskcollectionmodel.findbyidandremove(taskcollectionid).exec",{"_index":697,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskcollectionmodel.findoneandupdate({_id",{"_index":689,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskmodel(taskdto",{"_index":629,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskmodel.find({searchquery}).exec",{"_index":661,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskmodel.find({}).exec",{"_index":636,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskmodel.findbyid({'_id",{"_index":644,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskmodel.findbyidandremove(taskid).exec",{"_index":696,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskmodel.findoneandupdate({_id",{"_index":665,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskservice.createcollection(taskcollectiondto",{"_index":456,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["this.taskservice.createtask(taskdto",{"_index":537,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.deletetask(taskid",{"_index":555,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.deletetaskcollection(taskcollectionid",{"_index":499,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["this.taskservice.findalltaskcollections",{"_index":458,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["this.taskservice.findalltasks",{"_index":539,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.getsingletask(taskid",{"_index":461,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["this.taskservice.getsingletaskcollection(taskcollectionid",{"_index":490,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["this.taskservice.gettaskcollectionnote(usermail,taskcollectionid",{"_index":484,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["this.taskservice.gettaskcollectionsfortask(taskid",{"_index":541,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.marktaskincollectionassubmitted(usermail,taskcollectionid,taskid,note",{"_index":473,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["this.taskservice.marktaskorcollectionassubmitted(usermail,taskcollectionid,note",{"_index":487,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["this.taskservice.marktaskorcollectionassubmitted(usermail,taskid,note",{"_index":562,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.searchtask(searchquery",{"_index":550,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.updatetask(taskdto",{"_index":552,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.updatetaskcollection(taskdto",{"_index":495,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["this.updatetaskcollection(newtaskcollection",{"_index":687,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.usermodel.find().exec",{"_index":871,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyidandremove(userdto._id).exec",{"_index":857,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyidandupdate(userdto._id,{'password",{"_index":855,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyidandupdate(userdto._id,{'username':userdto.username",{"_index":843,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone({'email",{"_index":699,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["this.usermodel.findone({'username",{"_index":869,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findoneandupdate({'email",{"_index":733,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.usersservice.changepassword(userdto",{"_index":800,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create(userdto",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.usersservice.createmoodleuser(usermail,username",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.delete(data.user",{"_index":804,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":799,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findmoodleuser(usermail",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findone('simon",{"_index":806,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(user.username",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findone(username",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.put(userdto",{"_index":805,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":278,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["timestamp",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["title",{"_index":352,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{}}}],["todo",{"_index":439,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["token",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"guards/RolesGuard.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"classes/moodleSessions.html":{}}}],["totalpoints",{"_index":711,"title":{},"body":{"injectables/TaskService.html":{}}}],["touch",{"_index":1018,"title":{},"body":{"index.html":{}}}],["true",{"_index":297,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TaskService.html":{}}}],["twitter",{"_index":1024,"title":{},"body":{"index.html":{}}}],["type",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type:string",{"_index":394,"title":{},"body":{"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{}}}],["typealiases",{"_index":1130,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typescript",{"_index":987,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":264,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["und",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["unit",{"_index":1001,"title":{},"body":{"index.html":{}}}],["up",{"_index":737,"title":{},"body":{"injectables/TaskService.html":{}}}],["update",{"_index":662,"title":{},"body":{"injectables/TaskService.html":{}}}],["updated",{"_index":497,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["updatedtaskcollection",{"_index":496,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["updatetask",{"_index":511,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["updatetask(taskdto",{"_index":616,"title":{},"body":{"injectables/TaskService.html":{}}}],["updatetask(taskid",{"_index":532,"title":{},"body":{"controllers/TaskController.html":{}}}],["updatetaskcollection",{"_index":405,"title":{},"body":{"controllers/TaskCollectionController.html":{},"injectables/TaskService.html":{}}}],["updatetaskcollection(@param('id",{"_index":493,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["updatetaskcollection(taskdto",{"_index":618,"title":{},"body":{"injectables/TaskService.html":{}}}],["updatetaskcollection(taskid",{"_index":426,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["useclass",{"_index":816,"title":{},"body":{"modules/UsersModule.html":{}}}],["useguards",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":438,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["useguards(localauthguard",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@post('/login",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":122,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"classes/moodleSessions.html":{},"interfaces/taskAndNote.html":{}}}],["user,userdocument",{"_index":840,"title":{},"body":{"injectables/UsersService.html":{}}}],["user,userschema",{"_index":811,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.dto",{"_index":792,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.name",{"_index":574,"title":{},"body":{"modules/TaskModule.html":{},"modules/UsersModule.html":{}}}],["user.password",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.roles?.includes(role",{"_index":338,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.schema",{"_index":812,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user:moodleuser",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdocument",{"_index":621,"title":{},"body":{"injectables/TaskService.html":{},"classes/User.html":{},"interfaces/taskAndNote.html":{},"miscellaneous/typealiases.html":{}}}],["userdto",{"_index":78,"title":{"classes/UserDTO.html":{}},"body":{"controllers/AuthController.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userdto.password",{"_index":849,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.password}).exec",{"_index":856,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.role",{"_index":858,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto:any",{"_index":866,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["userinput",{"_index":957,"title":{},"body":{"miscellaneous/functions.html":{}}}],["usermail",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["usermail}).exec",{"_index":700,"title":{},"body":{"injectables/TaskService.html":{}}}],["usermail},{...rest",{"_index":734,"title":{},"body":{"injectables/TaskService.html":{}}}],["usermodel",{"_index":589,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"injectables/UsersService.html":{},"interfaces/taskAndNote.html":{}}}],["username}).exec",{"_index":870,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.controller",{"_index":813,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":793,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/user.schema",{"_index":569,"title":{},"body":{"modules/TaskModule.html":{},"injectables/TaskService.html":{}}}],["users/users.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{}}}],["userschema",{"_index":568,"title":{},"body":{"modules/TaskModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"interfaces/taskAndNote.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":768,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":47,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":105,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uuid4",{"_index":940,"title":{},"body":{"dependencies.html":{}}}],["validate",{"_index":283,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":285,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":310,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validateduser",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateduser.password",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateduser.username",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":920,"title":{},"body":{"dependencies.html":{}}}],["value",{"_index":946,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["variable",{"_index":879,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1135,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":1048,"title":{},"body":{"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{}}}],["vorkommenden",{"_index":692,"title":{},"body":{"injectables/TaskService.html":{}}}],["watch",{"_index":996,"title":{},"body":{"index.html":{}}}],["website",{"_index":1022,"title":{},"body":{"index.html":{}}}],["weighting",{"_index":391,"title":{},"body":{"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{}}}],["you'd",{"_index":1012,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getStatus\n                        \n                        \n                    \n                \n            \n            \n                \ngetStatus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Request, Post, UseGuards} from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(\n    private readonly appService: AppService) {}\n\n  @Get()\n  getStatus(): string {\n    return this.appService.getStatus();\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nTaskModule\n\nTaskModule\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            TaskModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TaskModule } from './task/task.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\nimport * as config from './config.json'\n\n@Module({\n  imports: [TaskModule, MongooseModule.forRoot(config.mongodb_path), AuthModule, UsersModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getStatus\n                        \n                        \n                    \n                \n            \n            \n                \ngetStatus()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n@Injectable()\nexport class AppService {\n  getStatus(): string {\n    return 'Backend STATUS OK :-)';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                moodleLogin\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(res, userDTO: UserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('/login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDTO\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            moodleLogin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    moodleLogin(request, response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/moodleLogin')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            register\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    register(res, userDTO: UserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/register')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDTO\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { AuthService } from './auth.service';\nimport { Controller, Post, Request, Body, Get, Param, Patch, Delete, Res, HttpStatus, UseGuards, Req} from '@nestjs/common';\nimport { LocalAuthGuard } from './local-auth.guard';\nimport { UserDTO } from 'src/users/user.dto';\nimport { UsersService } from 'src/users/users.service';\nimport { timeStamp } from 'console';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService, private readonly usersService: UsersService) {}\n\n    @UseGuards(LocalAuthGuard)\n    @Post('/login')\n    async login(@Res() res, @Body() userDTO: UserDTO) {\n      const returnObj = await this.authService.login(userDTO)\n       res.cookie('session',returnObj)\n      if(returnObj) {return res.status(HttpStatus.OK).json({\n        message: 'User logged In successful!',\n        token: returnObj\n      })} else {\n        return res.status(HttpStatus.NOT_FOUND).json({\n          message: 'Could Not Login User',\n        })\n      }\n      //return this.authService.login(userDTO)\n    }\n\n    @Post('/moodleLogin')\n    async moodleLogin(\n      @Req() request,\n      @Res() response\n    ) {\n        const {name,userId,mail,token,taskId} = await this.authService.ltiSessionInitiate(request)\n\n        const {moodleUser,solved} = await this.authService.loginMoodleUserAndGetTask(name,mail,taskId)\n\n        if(solved) {\n          return response.redirect('http://localhost:8080/solvefullscreen/alreadySubmitted')\n        } else {\n          return response.redirect('http://localhost:8080/solvefullscreen?exerciseId='+taskId+'&token='+token)\n        }\n\n      }\n\n    @Post('/register')\n    async register(    @Res() res,\n    @Body() userDTO: UserDTO, ) {\n\n        const returnObj = await this.usersService.create(userDTO);\n        if(returnObj) {return res.status(HttpStatus.OK).json({\n            message: 'User added successfully!',\n            returnObj\n          })\n        } else {\n          return res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({\n            message: 'User not added!',\n          })\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './local.strategy';\nimport { AuthController } from './auth.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [UsersModule, PassportModule, JwtModule.register({\n    secret: jwtConstants.secret,\n    signOptions: { expiresIn: '6000s' },\n  })],\n  controllers: [AuthController],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  exports: [AuthService]\n})\nexport class AuthModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                loginMoodleUserAndGetTask\n                            \n                            \n                                    Async\n                                ltiSessionInitiate\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            loginMoodleUserAndGetTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loginMoodleUserAndGetTask(userName, userMail, taskId)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userName\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userMail\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            ltiSessionInitiate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ltiSessionInitiate(request)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Req, Res } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcryptjs';\nimport moodleSessions from './moodleSessions'\nimport * as config from '../config.json'\n\nvar lti = require(\"ims-lti\");\n@Injectable()\nexport class AuthService {\n\n  constructor( private usersService: UsersService,\n               private jwtService: JwtService\n              ) {}\n\n  async validateUser(username: string, pass: string): Promise {\n    const user = await this.usersService.findOne(username);\n    //console.log(user)\n    const dbPassword = await user.password;\n    const matching = await bcrypt.compare(pass,dbPassword);\n    if(matching) {\n      return await user;\n    }\n    else return null;\n  }\n\n\n  async login(user: any) {\n    const validatedUser = await this.usersService.findOne(user.username)\n    //console.log(validatedUser)\n    const payload = { username: validatedUser.username, sub: validatedUser.password};\n    console.log(this.jwtService.decode( this.jwtService.sign(payload)))\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n\n  async ltiSessionInitiate(request):Promise {\n    let provider = new lti.Provider(config.moodle_consumer_key, config.moodle_consumer_secret); //Shared und public Secret aus moodle\n    let taskId;\n    let userId;\n    let userName;\n    let userMail;\n    let access_token;\n    provider.valid_request(request, (err, isValid) => {\n      if (!isValid) {\n        console.log(\"[LOG] INVALID LTI REQUEST\"+err)\n\n        return \"INVALID: \"+err\n      }\n      console.log(\"[LOG] LTI Session initiated:\",provider)\n      if(provider.body.custom_taskId) taskId = provider.body.custom_taskId\n      userId = provider.body.user_id\n      userName = provider.body.ext_user_username\n      userMail = provider.body.lis_person_contact_email_primary\n\n      const payload = {'obj': userMail}\n      access_token = this.jwtService.sign(payload)\n\n      const sessions = moodleSessions.getInstance();\n      sessions.addSession(access_token,provider)\n\n    })\n\n    return {name:userName,userId:userId,mail:userMail,token:access_token, taskId: taskId}\n\n  }\n\n  async loginMoodleUserAndGetTask(userName,userMail,taskId):Promise {\n    const moodleUser = await this.usersService.findMoodleUser(userMail)\n    let solved = false;\n    if(!moodleUser) {\n      this.usersService.createMoodleUser(userMail,userName)\n    } else {\n      //Has The User already solved it?\n      if(moodleUser.solvedTasksOrCollections) solved = moodleUser.solvedTasksOrCollections.has(taskId)\n\n    }\n      return {user:moodleUser, solved: solved}\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IFeedback.html":{"url":"interfaces/IFeedback.html","title":"interface - IFeedback","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IFeedback\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/plugins/codingPlugin/codingPluginInterfaces.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        message\n                                \n                                \n                                        testResults\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        testResults\n                                    \n                                \n                                \n                                    \n                                        testResults:         ITestResult[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ITestResult[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ITestResult {\n    passed: boolean,\n    message: string\n}\n\nexport interface IFeedback {\n    message: string,\n    testResults : ITestResult[]\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITestResult.html":{"url":"interfaces/ITestResult.html","title":"interface - ITestResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITestResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/plugins/codingPlugin/codingPluginInterfaces.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        message\n                                \n                                \n                                        passed\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        passed\n                                    \n                                \n                                \n                                    \n                                        passed:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ITestResult {\n    passed: boolean,\n    message: string\n}\n\nexport interface IFeedback {\n    message: string,\n    testResults : ITestResult[]\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-auth.guard.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleRequest\n                        \n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user, info)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-auth.guard.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    ExecutionContext,\n    Injectable,\n    UnauthorizedException,\n  } from '@nestjs/common';\n  import { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n    canActivate(context: ExecutionContext) {\n        // Add your custom authentication logic here\n        // for example, call super.logIn(request) to establish a session.\n        return super.canActivate(context);\n      }\n    \n      handleRequest(err, user, info) {\n        // You can throw an exception based on either \"info\" or \"err\" arguments\n        if (err || !user) {\n          throw err || new UnauthorizedException();\n        }\n        return user;\n      }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { jwtConstants } from './constants';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: true, //Kann nicht ablaufen!!! FIXME\n      secretOrKey: jwtConstants.secret,\n      session: true\n    });\n  }\n\n  async validate(payload: any) {\n    return { userId: payload.sub, username: payload.username };\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/local.strategy.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super();\n  }\n\n  async validate(username: string, password: string): Promise {\n    const user = await this.authService.validateUser(username, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/roles/roles.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/roles/roles.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/roles/roles.guard.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { JwtService } from '@nestjs/jwt';\nimport { Role } from './role.enum';\nimport { ROLES_KEY } from './roles.decorator';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!requiredRoles) {\n      return true;\n    }\n    const jwtService = new JwtService(null);\n    const token = context.switchToHttp().getRequest().headers.authorization\n    console.log(token) \n    console.log(jwtService.decode(token))\n    //const { user } = context.switchToHttp().getRequest();\n    //return requiredRoles.some((role) => user.roles?.includes(role));\n    //return false;\n    return true;\n  }\n}\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Task.html":{"url":"classes/Task.html","title":"class - Task","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/task.schema.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                closedTests\n                            \n                            \n                                content\n                            \n                            \n                                course\n                            \n                            \n                                creator\n                            \n                            \n                                dataForPlugin\n                            \n                            \n                                date\n                            \n                            \n                                description\n                            \n                            \n                                openTests\n                            \n                            \n                                pluginCode\n                            \n                            \n                                tags\n                            \n                            \n                                title\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(title: string, description: string, content: string, creator: string, type: string, tags, course: string, pluginCode: string, dataForPlugin: any, closedTests, openTests)\n                    \n                \n                        \n                            \n                                Defined in src/task/task.schema.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        title\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        description\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        content\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        creator\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tags\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        course\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pluginCode\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dataForPlugin\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        closedTests\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        openTests\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            closedTests\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            content\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            course\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            creator\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dataForPlugin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:56\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            openTests\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pluginCode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tags\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:35\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type TaskDocument = Task & Document;\n\n@Schema()\nexport class Task {\n  constructor(\n    title: string,\n    description: string,\n    content: string,\n    creator: string,\n    type: string,\n    tags: [],\n    course: string,\n    pluginCode: string,\n    dataForPlugin: any,\n    closedTests: [],\n    openTests: [],\n  ) {}\n\n  @Prop()\n  title: string;\n\n  @Prop()\n  description: string;\n\n  @Prop()\n  content: string;\n\n  @Prop()\n  creator: string;\n\n  @Prop()\n  type: string;\n\n  @Prop()\n  tags: [];\n\n  @Prop()\n  course: string;\n\n  @Prop()\n  pluginCode: string;\n\n  @Prop()\n  dataForPlugin:any;\n\n  @Prop()\n  closedTests: [];\n\n  @Prop()\n  openTests: [];\n\n  @Prop()\n  date: Date;\n\n}\n\nexport const TaskSchema = SchemaFactory.createForClass(Task);\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskCollection.html":{"url":"classes/TaskCollection.html","title":"class - TaskCollection","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskCollection\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/taskcollection.schema.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                course\n                            \n                            \n                                creator\n                            \n                            \n                                date\n                            \n                            \n                                description\n                            \n                            \n                                tags\n                            \n                            \n                                tasks\n                            \n                            \n                                title\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(title: string, description: string, type: string, creator: string, tags, course: string, tasks: TaskInCollection[])\n                    \n                \n                        \n                            \n                                Defined in src/task/taskcollection.schema.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        title\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        description\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        creator\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tags\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        course\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tasks\n                                                  \n                                                        \n                                                                        TaskInCollection[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            course\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/taskcollection.schema.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            creator\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/taskcollection.schema.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/taskcollection.schema.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/taskcollection.schema.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tags\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/taskcollection.schema.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tasks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskInCollection[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/taskcollection.schema.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/taskcollection.schema.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/taskcollection.schema.ts:30\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type TaskCollectionDocument = TaskCollection & Document;\n\ninterface TaskInCollection {\n  _id: string,\n  weighting: number,\n  taskName: string\n}\n@Schema()\nexport class TaskCollection {\n  constructor(\n    title: string,\n    description: string,\n    type:string,\n    creator: string,\n    tags: [],\n    course: string,\n    tasks: TaskInCollection[],\n  ) {}\n\n  @Prop()\n  title: string;\n\n  @Prop()\n  description: string;\n\n  @Prop()\n  type: string;\n\n  @Prop()\n  creator: string;\n\n  @Prop()\n  tags: [];\n\n  @Prop()\n  course: string;\n\n  @Prop()\n  date: Date;\n\n  @Prop()\n  tasks: TaskInCollection[];\n\n}\n\nexport const TaskCollectionSchema = SchemaFactory.createForClass(TaskCollection);\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TaskCollectionController.html":{"url":"controllers/TaskCollectionController.html","title":"controller - TaskCollectionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TaskCollectionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/taskcollection.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                taskcollection\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createNewTaskCollection\n                            \n                            \n                                    Async\n                                deleteTaskCollection\n                            \n                            \n                                getAllTaskCollections\n                            \n                            \n                                    Async\n                                getTaskCollection\n                            \n                            \n                                    Async\n                                submit\n                            \n                            \n                                    Async\n                                submitTaskInCollection\n                            \n                            \n                                    Async\n                                updateTaskCollection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createNewTaskCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createNewTaskCollection(res, taskCollectionDTO: TaskCollection)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')\n                \n            \n\n            \n                \n                    Defined in src/task/taskcollection.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskCollectionDTO\n                                    \n                                                TaskCollection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTaskCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTaskCollection(taskCollectionID: string, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/task/taskcollection.controller.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskCollectionID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllTaskCollections\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllTaskCollections()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/task/taskcollection.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTaskCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTaskCollection(taskCollectionID: string, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/task/taskcollection.controller.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskCollectionID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            submit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    submit(taskCollectionID: string, headers, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/submit/:id')\n                \n            \n\n            \n                \n                    Defined in src/task/taskcollection.controller.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskCollectionID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    headers\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            submitTaskInCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    submitTaskInCollection(taskCollectionID: string, taskID: string, headers, submission: any, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/submitTask/:taskcollectionID/:taskID')\n                \n            \n\n            \n                \n                    Defined in src/task/taskcollection.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskCollectionID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    headers\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    submission\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTaskCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTaskCollection(taskID: string, taskDTO: TaskCollection, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/update')\n                \n            \n\n            \n                \n                    Defined in src/task/taskcollection.controller.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskDTO\n                                    \n                                                TaskCollection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { TaskService } from './task.service';\nimport {\n  Controller,\n  Post,\n  Body,\n  Get,\n  Param,\n  Headers,\n  Put,\n  Delete,\n  Res,\n  HttpStatus,\n  UseGuards,\n} from '@nestjs/common';\nimport { TaskCollection } from './taskcollection.schema';\nimport taskRunner from './taskrunner';\nimport moodleSessions from '../auth/moodleSessions';\nimport { JwtAuthGuard } from 'src/auth/jwt-auth.guard';\nimport moodleSubmitHelper from './moodleSubmitHelper'\n\n@Controller('taskcollection')\n//@UseGuards(JwtAuthGuard)\nexport class TaskCollectionController {\n  constructor(private readonly taskService: TaskService) {}\n\n  //TODO: Funktioniert!! man muss nur aus dem Frontend das beim Login übermittelte Token mitschicken\n  // https://stackoverflow.com/questions/44072750/how-to-send-basic-auth-with-axios ? ausprobieren..\n  //@UseGuards(JwtAuthGuard)\n\n  @Post('/create')\n  async createNewTaskCollection(@Res() res, @Body() taskCollectionDTO: TaskCollection) {\n    const returnObj = await this.taskService.createCollection(taskCollectionDTO);\n    return res.status(HttpStatus.OK).json({\n      message: 'Task created successfully!',\n      task: returnObj,\n    });\n  }\n\n  @Get()\n  getAllTaskCollections() {\n    return this.taskService.findAllTaskCollections();\n  }\n\n  @Post('/submitTask/:taskcollectionID/:taskID')\n  async submitTaskInCollection(\n    @Param('taskcollectionID') taskCollectionID: string,\n    @Param('taskID') taskID: string,\n    @Headers() headers,\n    @Body() submission: any,\n    @Res() res\n  ) {\n    let task = await this.taskService.getSingleTask(taskID);\n    if(task) {\n      const authToken = headers.authorization;\n      let mytaskrunner = new taskRunner();\n      const note = await mytaskrunner.submitTask(task, submission);\n      const sessions = moodleSessions.getInstance()\n      const session = sessions.getSession(authToken)\n      if(session) {\n        let userId = session.body.user_id\n        let userName = session.body.ext_user_username\n        let userMail = session.body.lis_person_contact_email_primary\n        this.taskService.markTaskInCollectionAsSubmitted(userMail,taskCollectionID,taskID,note)\n        return res.status(HttpStatus.OK).json({\n          message: 'Task submitted',\n          feedback: \"OK\", //Placeholder for future submission Feedback support\n        })\n      } else {\n        return res.status(HttpStatus.UNAUTHORIZED).json({\n          message: 'Session Error. Task not submitted',\n        })\n      }\n    } else {\n      return res.status(HttpStatus.NOT_FOUND).json({\n        message: 'Error. Task not found',\n      })\n    }\n  }\n\n  @Post('/submit/:id')\n  async submit(\n    @Param('id') taskCollectionID: string,\n    @Headers() headers,\n    @Res() res\n  ) {\n    const authToken = headers.authorization;\n    const sessions = moodleSessions.getInstance()\n    const session = sessions.getSession(authToken)\n    if(session) {\n      let userId = session.body.user_id\n      let userName = session.body.ext_user_username\n      let userMail = session.body.lis_person_contact_email_primary\n      let submitHelper = new moodleSubmitHelper();\n      const note = await this.taskService.getTaskCollectionNote(userMail,taskCollectionID)\n      if(note) {\n        let status = submitHelper.submitNoteToMoodle(session,note)\n        this.taskService.markTaskOrCollectionAsSubmitted(userMail,taskCollectionID,note)\n        return res.status(HttpStatus.OK).json({\n          message: 'Task Collection submitted:',\n          feedback: status,\n        })\n      } else {\n        return res.status(HttpStatus.UNAUTHORIZED).json({\n          message: 'Session Error. Task not submitted',\n        })\n      }\n\n    } else {\n      return res.status(HttpStatus.UNAUTHORIZED).json({\n        message: 'Session Error. Task not submitted',\n      })\n    }\n  }\n\n  @Get(':id')\n  async getTaskCollection(@Param('id') taskCollectionID: string, @Res() res) {\n    const returnObj = await this.taskService.getSingleTaskCollection(taskCollectionID)\n    if(returnObj) return res.status(HttpStatus.OK).json(returnObj)\n    else return res.status(HttpStatus.NOT_FOUND).json({\n      message:\"Task Collection not found\"\n    })\n\n  }\n\n  @Put('/update')\n async  updateTaskCollection(@Param('id') taskID: string, @Body() taskDTO: TaskCollection, @Res() res) {\n    if(await this.taskService.updateTaskCollection(taskDTO)) return res.status(HttpStatus.OK).json({\n      message: 'updatedTaskCollection'\n    })\n    else return res.status(HttpStatus.NOT_FOUND).json({\n      message: 'not updated'\n    })\n  }\n\n  @Delete(':id')\n  async deleteTaskCollection(@Param('id') taskCollectionID: string, @Res() res) {\n    if(await this.taskService.deleteTaskCollection(taskCollectionID)) return res.status(HttpStatus.OK).json({\n      message: 'deleted TaskCollection'\n    })\n    else return res.status(HttpStatus.NOT_FOUND).json({\n      message: 'not deleted'\n    })\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TaskController.html":{"url":"controllers/TaskController.html","title":"controller - TaskController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TaskController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/task.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                task\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createNewTask\n                            \n                            \n                                    Async\n                                deleteTask\n                            \n                            \n                                getAllTasks\n                            \n                            \n                                    Async\n                                getOpenTests\n                            \n                            \n                                    Async\n                                getTask\n                            \n                            \n                                    Async\n                                getTaskCollectionsForTask\n                            \n                            \n                                    Async\n                                searchTask\n                            \n                            \n                                    Async\n                                submitTask\n                            \n                            \n                                    Async\n                                updateTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createNewTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createNewTask(res, taskDTO: Task)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')\n                \n            \n\n            \n                \n                    Defined in src/task/task.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskDTO\n                                    \n                                                Task\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTask(taskID: string, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/task/task.controller.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllTasks\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllTasks()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/task/task.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getOpenTests\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOpenTests(taskID: string, input: any, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/test/:id')\n                \n            \n\n            \n                \n                    Defined in src/task/task.controller.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTask(taskID: string, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/task/task.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTaskCollectionsForTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTaskCollectionsForTask(taskID: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/getTaskCollections/:id')\n                \n            \n\n            \n                \n                    Defined in src/task/task.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            searchTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    searchTask(res, searchQuery: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/searchTask')\n                \n            \n\n            \n                \n                    Defined in src/task/task.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    searchQuery\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            submitTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    submitTask(taskID: string, headers, input: any, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/submit/:id')\n                \n            \n\n            \n                \n                    Defined in src/task/task.controller.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    headers\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTask(taskID: string, taskDTO: Task, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/update')\n                \n            \n\n            \n                \n                    Defined in src/task/task.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskDTO\n                                    \n                                                Task\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { TaskService } from './task.service';\nimport { UsersService } from '../users/users.service'\nimport {\n  Controller,\n  Post,\n  Body,\n  Headers,\n  Get,\n  Param,\n  Patch,\n  Put,\n  Delete,\n  Res,\n  HttpStatus,\n  UseGuards,\n} from '@nestjs/common';\nimport { Task } from './task.schema';\nimport moodleSessions from '../auth/moodleSessions'\nimport { JwtAuthGuard } from 'src/auth/jwt-auth.guard';\nimport taskRunner from './taskrunner';\nimport moodleSubmitHelper from './moodleSubmitHelper'\n\n@Controller('task')\n//@UseGuards(JwtAuthGuard)\nexport class TaskController {\n  constructor(private readonly taskService: TaskService) {}\n\n  //TODO: Funktioniert!! man muss nur aus dem Frontend das beim Login übermittelte Token mitschicken\n  // https://stackoverflow.com/questions/44072750/how-to-send-basic-auth-with-axios ? ausprobieren..\n  //@UseGuards(JwtAuthGuard)\n  @Post('/create')\n  async createNewTask(@Res() res, @Body() taskDTO: Task) {\n\n    const returnObj = await this.taskService.createTask(taskDTO);\n    if (returnObj) {return res.status(HttpStatus.OK).json({\n      message: 'Task created successfully!',\n      task: returnObj,\n    })} else return  res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({\n      message: 'Could not create Task!',\n    })\n  }\n\n  @Get()\n  getAllTasks() {\n    return this.taskService.findAllTasks();\n  }\n\n  @Get('/getTaskCollections/:id')\n  async getTaskCollectionsForTask(@Param('id') taskID: string) {\n    return await this.taskService.getTaskCollectionsForTask(taskID);\n  }\n\n  @Get(':id')\n  async getTask(@Param('id') taskID: string, @Res() res) {\n    const returnObj = await this.taskService.getSingleTask(taskID);\n    if(returnObj) return res.status(HttpStatus.OK).json(returnObj);\n    else return res.status(HttpStatus.NOT_FOUND).json({\n      message: 'no Task found'\n    })\n  }\n\n  // Suche primär nach Tags und dann nach Name -> erhalte Searchstring\n  @Post('/searchTask')\n  async searchTask(@Res() res, @Body() searchQuery: any) {\n    const returnObj = await this.taskService.searchTask(searchQuery);\n    return res.status(HttpStatus.OK).json({\n      message: 'Gefundene Tasks:',\n      task: returnObj,\n    });\n  }\n\n  @Put('/update')\n  async updateTask(\n    @Param('id') taskID: string,\n    @Body() taskDTO: Task,\n    @Res() res\n  ) {\n    if(await this.taskService.updateTask(taskDTO)) return res.status(HttpStatus.OK).json({\n      message: 'updated Task'\n    });\n    else return res.status(HttpStatus.NOT_MODIFIED).json({\n      message: 'not deleted'\n    });\n  }\n\n  @Delete(':id')\n  async deleteTask(@Param('id') taskID: string, @Res() res) {\n\n    if(await this.taskService.deleteTask(taskID)) return res.status(HttpStatus.OK).json({\n      message: 'deleted Task'\n    });\n    else return res.status(HttpStatus.NOT_FOUND).json({\n      message: 'not deleted'\n    });\n\n  }\n\n  @Post('/test/:id')\n  async getOpenTests(\n    @Param('id') taskID: string,\n    @Body() input: any,\n    //@Headers() headers,\n    @Res() res,\n  ) {\n\n    let task = await this.taskService.getSingleTask(taskID);\n    if (task) {\n      let mytaskrunner = new taskRunner();\n      let runnedTests = await mytaskrunner.runTests(task, input);\n      return res.status(HttpStatus.OK).json(runnedTests);\n    }\n\n    return res.status(HttpStatus.NOT_FOUND).json({\n      message: 'Task not found!',\n    });\n  }\n\n  @Post('/submit/:id')\n  async submitTask(\n    @Param('id') taskID: string,\n    //@Param('token') token: string,\n    @Headers() headers,\n    @Body() input: any,\n    @Res() res,\n  ) {\n    let task = await this.taskService.getSingleTask(taskID);\n    if (task) {\n      let mytaskrunner = new taskRunner();\n      let authToken = headers.authorization;\n      let note = await mytaskrunner.submitTask(task, input);\n      //Taskergebnis an moodle senden\n      const sessions = moodleSessions.getInstance()\n      const session = sessions.getSession(authToken)\n      if(session) {\n        let userId = session.body.user_id\n        let userName = session.body.ext_user_username\n        let userMail = session.body.lis_person_contact_email_primary\n        let submitHelper = new moodleSubmitHelper();\n        let status = submitHelper.submitNoteToMoodle(session,note)\n        this.taskService.markTaskOrCollectionAsSubmitted(userMail,taskID,note)\n        return res.status(HttpStatus.OK).json({\n          message: 'Task submitted:',\n          feedback: status,\n        });\n      } else {\n        return res.status(HttpStatus.UNAUTHORIZED).json({\n          message: 'Session Error. Task not submitted',\n        });\n      }\n\n    }\n    return res.status(HttpStatus.NOT_FOUND).json({\n      message: 'Task not found!',\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TaskInCollection.html":{"url":"interfaces/TaskInCollection.html","title":"interface - TaskInCollection","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TaskInCollection\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/taskcollection.schema.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        _id\n                                \n                                \n                                        taskName\n                                \n                                \n                                        weighting\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        taskName\n                                    \n                                \n                                \n                                    \n                                        taskName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        weighting\n                                    \n                                \n                                \n                                    \n                                        weighting:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type TaskCollectionDocument = TaskCollection & Document;\n\ninterface TaskInCollection {\n  _id: string,\n  weighting: number,\n  taskName: string\n}\n@Schema()\nexport class TaskCollection {\n  constructor(\n    title: string,\n    description: string,\n    type:string,\n    creator: string,\n    tags: [],\n    course: string,\n    tasks: TaskInCollection[],\n  ) {}\n\n  @Prop()\n  title: string;\n\n  @Prop()\n  description: string;\n\n  @Prop()\n  type: string;\n\n  @Prop()\n  creator: string;\n\n  @Prop()\n  tags: [];\n\n  @Prop()\n  course: string;\n\n  @Prop()\n  date: Date;\n\n  @Prop()\n  tasks: TaskInCollection[];\n\n}\n\nexport const TaskCollectionSchema = SchemaFactory.createForClass(TaskCollection);\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TaskModule.html":{"url":"modules/TaskModule.html","title":"module - TaskModule","body":"\n                   \n\n\n\n\n    Modules\n    TaskModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TaskModule\n\n\n\ncluster_TaskModule_providers\n\n\n\n\nTaskService\n\nTaskService\n\n\n\nTaskModule\n\nTaskModule\n\nTaskModule -->\n\nTaskService->TaskModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/task/task.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TaskService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TaskController\n                        \n                        \n                            TaskCollectionController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { TaskService } from './task.service';\nimport { TaskController } from './task.controller';\nimport { TaskCollectionController } from './taskcollection.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Module } from '@nestjs/common';\nimport { Task, TaskSchema } from './task.schema';\nimport { User, UserSchema } from '../users/user.schema';\nimport { TaskCollection, TaskCollectionSchema} from './taskcollection.schema'\nimport { APP_GUARD } from '@nestjs/core';\nimport { UsersService } from '../users/users.service'\n@Module({\n  imports: [MongooseModule.forFeature([{name: Task.name, schema: TaskSchema}]),\n            MongooseModule.forFeature([{name: TaskCollection.name, schema: TaskCollectionSchema}]),\n            MongooseModule.forFeature([{name: User.name, schema: UserSchema}])\n           ],\n  controllers: [TaskController, TaskCollectionController],\n  providers: [TaskService]\n})\nexport class TaskModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TaskService.html":{"url":"injectables/TaskService.html","title":"injectable - TaskService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TaskService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/task.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCollection\n                            \n                            \n                                    Async\n                                createTask\n                            \n                            \n                                    Async\n                                deleteTask\n                            \n                            \n                                    Async\n                                deleteTaskCollection\n                            \n                            \n                                    Private\n                                    Async\n                                deleteTasksInCollection\n                            \n                            \n                                    Async\n                                findAllTaskCollections\n                            \n                            \n                                    Async\n                                findAllTasks\n                            \n                            \n                                    Async\n                                getSingleTask\n                            \n                            \n                                    Async\n                                getSingleTaskCollection\n                            \n                            \n                                    Async\n                                getTaskCollectionNote\n                            \n                            \n                                    Async\n                                getTaskCollectionsForTask\n                            \n                            \n                                    Async\n                                markTaskInCollectionAsSubmitted\n                            \n                            \n                                    Async\n                                markTaskOrCollectionAsSubmitted\n                            \n                            \n                                    Async\n                                searchTask\n                            \n                            \n                                    Async\n                                updateTask\n                            \n                            \n                                    Async\n                                updateTaskCollection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskModel: Model, taskCollectionModel: Model, userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/task/task.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        taskCollectionModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createCollection(taskCollectionDto: TaskCollection)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskCollectionDto\n                                    \n                                                TaskCollection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTask(taskDto: Task)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskDto\n                                    \n                                                Task\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTask(taskId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTaskCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTaskCollection(taskCollectionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskCollectionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            deleteTasksInCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTasksInCollection(taskId)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAllTaskCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllTaskCollections()\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAllTasks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllTasks()\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSingleTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSingleTask(taskId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSingleTaskCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSingleTaskCollection(taskCollectionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskCollectionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTaskCollectionNote\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTaskCollectionNote(usermail: string, taskCollectionID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    usermail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskCollectionID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTaskCollectionsForTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTaskCollectionsForTask(taskId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            markTaskInCollectionAsSubmitted\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    markTaskInCollectionAsSubmitted(usermail: string, taskCollectionID: string, taskID: string, note: number)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:159\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    usermail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskCollectionID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    note\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            markTaskOrCollectionAsSubmitted\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    markTaskOrCollectionAsSubmitted(usermail: string, taskOrCollectionId: string, note: number)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:191\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    usermail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskOrCollectionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    note\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            searchTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    searchTask(searchQuery: any)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    searchQuery\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTask(taskDto: any)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskDto\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTaskCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTaskCollection(taskDto: any)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskDto\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Task, TaskDocument } from './task.schema';\nimport { User, UserDocument, taskAndNote } from '../users/user.schema';\nimport { TaskCollection, TaskCollectionDocument } from './taskcollection.schema'\n\n@Injectable()\nexport class TaskService {\n  constructor (\n    @InjectModel('Task') private taskModel: Model,\n    @InjectModel('TaskCollection') private taskCollectionModel: Model,\n    @InjectModel('User') private userModel: Model\n  ) {}\n\n  async createTask(taskDto: Task): Promise {\n    console.log(\"[LOG] Creating New Task:\",taskDto)\n    const createdTask = new this.taskModel(taskDto);\n    return createdTask.save();\n  }\n\n  async createCollection(taskCollectionDto: TaskCollection): Promise {\n    console.log(\"[LOG] Creating New Task Collection:\",taskCollectionDto)\n    const createdTaskCollection = new this.taskCollectionModel(taskCollectionDto);\n    return createdTaskCollection.save();\n  }\n\n  async findAllTasks(): Promise {\n    console.log(\"[LOG] Getting all Tasks\")\n    return this.taskModel.find({}).exec();\n  }\n\n  async findAllTaskCollections(): Promise {\n    console.log(\"[LOG] Getting all Task Collections\")\n    return this.taskCollectionModel.find({}).exec();\n  }\n\n  async getSingleTask(taskId: string): Promise {\n    console.log(\"[LOG] Getting Task with ID:\",taskId)\n    if (taskId.match(/^[0-9a-fA-F]{24}$/)) {\n      return this.taskModel.findById({'_id': taskId}).exec();\n    } else {\n      return null;\n    }\n  }\n\n\t//TODO: TaskCollection tasks[]title synchronisieren\n  async getSingleTaskCollection(taskCollectionId: string): Promise {\n    console.log(\"[LOG] Getting Task Collection with ID:\",taskCollectionId)\n    if (taskCollectionId.match(/^[0-9a-fA-F]{24}$/)) {\n      return this.taskCollectionModel.findById({'_id': taskCollectionId}).exec();\n    } else {\n      return null;\n    }\n  }\n\n  // Objekt mit 2 Arrays: Suche nach Tags und Suche nach Name: TODO: SearchByTag, SearchByName\n  async searchTask(searchQuery: any):Promise {\n    console.log(\"[LOG] Search Task with query\",searchQuery);\n    return this.taskModel.find({searchQuery}).exec();\n  }\n\n  async updateTask(taskDto: any): Promise {\n    console.log(\"[LOG] Update Task \",taskDto)\n    const taskID = taskDto._id\n    let {_id, ...rest} = taskDto\n    return this.taskModel.findOneAndUpdate({_id: taskID},{...rest}, {new:true})\n  }\n\n  async getTaskCollectionsForTask(taskId: string): Promise {\n    console.log(\"[LOG] Finding TaskCollections for task \",taskId)\n    const taskCollections = await this.findAllTaskCollections();\n    let taskCollectionsFound:TaskCollection[] = []\n    taskCollections.forEach(taskCollection => {\n      const tasks = taskCollection.tasks\n      tasks.forEach(task => {\n        if(task._id === taskId) taskCollectionsFound.push(taskCollection)\n      })\n    })\n    return taskCollectionsFound\n  }\n\n  private async deleteTasksInCollection(taskId) {\n    const taskCollections = await this.findAllTaskCollections();\n    taskCollections.forEach((taskCollection:any) => {\n      const tasks = taskCollection.tasks\n      const newTasksForCollection = []\n      tasks.forEach(task => {\n        if(!(task._id.toString() === taskId.toString())) newTasksForCollection.push(task)\n      })\n      if(tasks.length != newTasksForCollection.length) {\n        let newTaskCollection = taskCollection\n        newTaskCollection.tasks = newTasksForCollection;\n        this.updateTaskCollection(newTaskCollection)\n      }\n\n    })\n  }\n\n  async updateTaskCollection(taskDto: any): Promise {\n    console.log(\"[LOG] Update Task Collection\",taskDto)\n    const taskID = taskDto._id\n    let {_id, ...rest} = taskDto\n    return this.taskCollectionModel.findOneAndUpdate({_id: taskID},{...rest}, {new:true})\n  }\n\n  async deleteTask(taskId: string): Promise {\n    if (taskId.match(/^[0-9a-fA-F]{24}$/)) {\n      //Cleanup: Task in den vorkommenden Collections auch löschen\n      this.deleteTasksInCollection(taskId)\n      return this.taskModel.findByIdAndRemove(taskId).exec();\n    } else {\n      return null;\n    }\n  }\n\n  async deleteTaskCollection(taskCollectionId: string): Promise {\n    if (taskCollectionId.match(/^[0-9a-fA-F]{24}$/)) {\n      return this.taskCollectionModel.findByIdAndRemove(taskCollectionId).exec();\n    } else {\n      return null;\n    }\n  }\n\n  async getTaskCollectionNote(usermail:string,taskCollectionID:string):Promise {\n    let moodleUser = await this.userModel.findOne({'email': usermail}).exec()\n    let note = 0\n    if(moodleUser) {\n      const solvedTasksInCollectionMap = moodleUser.solvedTasksInCollection\n\n      if(solvedTasksInCollectionMap && solvedTasksInCollectionMap.has(taskCollectionID)) {\n        const solvedTasksInCollection = solvedTasksInCollectionMap.get(taskCollectionID)\n        const taskCollection = await this.getSingleTaskCollection(taskCollectionID)\n        const tasksInCollectionArray = taskCollection.tasks\n        let totalPoints = 0\n        tasksInCollectionArray.forEach(task => {\n          const weighting = +task.weighting\n          totalPoints += +weighting\n        })\n        let archievedPoints = 0\n        tasksInCollectionArray.forEach(task => {\n          const taskID = task._id\n          const taskweightening = task.weighting\n          solvedTasksInCollection.forEach(solvedTask => {\n            if(solvedTask.taskID == taskID) {\n              archievedPoints += (taskweightening * (solvedTask.note/100))\n            }\n          })\n        })\n        note = archievedPoints/totalPoints *100\n      }\n\n    } else {\n      return null\n    }\n    return note\n  }\n\n  async markTaskInCollectionAsSubmitted(usermail:string,taskCollectionID:string,taskID:string,note:number):Promise {\n    let moodleUser = await this.userModel.findOne({'email': usermail}).exec()\n    if(moodleUser) {\n      let solvedTasksInCollectionMap = moodleUser.solvedTasksInCollection\n      let solvedTasksInCollection = []\n      let taskAndNoteObj:taskAndNote = {taskID: taskID,note:note}\n      if(solvedTasksInCollectionMap) {\n        if(solvedTasksInCollectionMap.has(taskCollectionID)) {\n          solvedTasksInCollection = solvedTasksInCollectionMap.get(taskCollectionID)\n          let taskAlreadySubmittedFlag = false;\n          solvedTasksInCollection.forEach(submittedTask => {\n            if(submittedTask.taskID == taskID) { taskAlreadySubmittedFlag = true }\n          })\n          if(!taskAlreadySubmittedFlag) {\n            solvedTasksInCollection.push(taskAndNoteObj)\n            solvedTasksInCollectionMap.set(taskCollectionID,solvedTasksInCollection)\n          }\n        } else {\n          solvedTasksInCollection.push(taskAndNoteObj)\n          solvedTasksInCollectionMap.set(taskCollectionID,solvedTasksInCollection)\n        }\n      } else {\n        solvedTasksInCollection.push(taskAndNoteObj)\n        solvedTasksInCollectionMap = new Map([[taskCollectionID,solvedTasksInCollection]])\n      }\n      moodleUser.solvedTasksInCollection = solvedTasksInCollectionMap\n      let {_id, ...rest} = moodleUser\n      return this.userModel.findOneAndUpdate({'email': usermail},{...rest}, {new:true})\n    } else return null\n\n  }\n\n  async markTaskOrCollectionAsSubmitted(usermail:string,taskOrCollectionId:string,note:number):Promise {\n    let moodleUser = await this.userModel.findOne({'email': usermail}).exec()\n    if(moodleUser) {\n      //Clean Up User Tasks In Collection Submitted\n      let solvedTasksInCollection = moodleUser.solvedTasksInCollection\n      if(solvedTasksInCollection && solvedTasksInCollection.has(taskOrCollectionId)) {\n        solvedTasksInCollection.delete(taskOrCollectionId)\n      }\n      let tasksSolvedMap = moodleUser.solvedTasksOrCollections\n      if(tasksSolvedMap) {\n        tasksSolvedMap.set(taskOrCollectionId,note)\n      } else {\n        tasksSolvedMap = new Map([[taskOrCollectionId,note]])\n      }\n\n      moodleUser.solvedTasksOrCollections = tasksSolvedMap\n      moodleUser.solvedTasksInCollection = solvedTasksInCollection\n      //Filter id\n      let {_id, ...rest} = moodleUser\n      return this.userModel.findOneAndUpdate({'email': usermail},{...rest}, {new:true})\n    } else return null\n\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.schema.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                role\n                            \n                            \n                                solvedTasksInCollection\n                            \n                            \n                                solvedTasksOrCollections\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.schema.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.schema.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.schema.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.schema.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            solvedTasksInCollection\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Map\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.schema.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            solvedTasksOrCollections\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.schema.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.schema.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type UserDocument = User & Document;\n\nexport interface taskAndNote {\n  taskID: string,\n  note: number\n}\n@Schema()\nexport class User {\n\n  @Prop()\n  name: string;\n\n  @Prop()\n  username: string;\n\n  @Prop()\n  email: string;\n\n  @Prop()\n  password: string;\n\n  @Prop()\n  solvedTasksOrCollections: Map;\n\n  //;\n\n  @Prop()\n  role: string;\n\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDTO.html":{"url":"classes/UserDTO.html","title":"class - UserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                _id\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                password\n                            \n                            \n                                    Public\n                                role\n                            \n                            \n                                    Public\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_id: string, username: string, email: string, password: string, role: string)\n                    \n                \n                        \n                            \n                                Defined in src/users/user.dto.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        username\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        email\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        password\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        role\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            _id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserDTO {\n    constructor(\n      public _id: string,\n      public username: string,\n      public email: string, \n      public password: string, \n      public role: string\n      ) {}\n  }\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                getAllUsers\n                            \n                            \n                                getTestUser\n                            \n                            \n                                getUser\n                            \n                            \n                                    Async\n                                putUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            changePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    changePassword(res, userDTO: UserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/changePassword')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDTO\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(res, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllUsers\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/getUsers')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTestUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetTestUser()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/testUser')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetUser()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { user: string; role: string; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            putUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    putUser(res, userDTO: UserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDTO\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, Get, Param, Patch, Put, Delete, Res, HttpStatus, UseGuards } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { JwtAuthGuard } from 'src/auth/jwt-auth.guard';\nimport { Role } from 'src/auth/roles/role.enum';\nimport { Roles } from 'src/auth/roles/roles.decorator';\nimport { UserDTO } from './user.dto';\nimport { UsersService } from './users.service';\n@Controller('user')\nexport class UsersController {\n\n  constructor(private readonly usersService: UsersService) {}\n    @Get()\n    //@UseGuards(JwtAuthGuard)\n    //@Roles(Role.Admin)\n    getUser() {\n      return {user: 'test', role:'test'}\n    }\n\n    @Get('/getUsers')\n    //@UseGuards(JwtAuthGuard)\n    //@Roles(Role.User)\n    getAllUsers() {\n      return this.usersService.findAll();\n    }\n\n    @Put('/changePassword')\n    async changePassword(\n      @Res() res,\n    @Body() userDTO: UserDTO) {\n        const returnObj = await this.usersService.changePassword(userDTO)\n\n      return res.status(HttpStatus.OK).json({\n        message: 'User Password changed!',\n        user: returnObj\n      })\n    }\n\n    @Delete()\n    async deleteUser(@Res() res, @Body() data: any) {\n      console.log(data.user)\n      const returnObj = await this.usersService.delete(data.user)\n      return res.status(HttpStatus.OK).json({\n        message: 'User Password changed!',\n        user: returnObj\n      })\n    }\n\n    @Put()\n    async putUser(\n      @Res() res,\n    @Body() userDTO: UserDTO) {\n\n      const returnObj = await this.usersService.put(userDTO)\n      return res.status(HttpStatus.OK).json({\n          message: 'User changed successful!',\n          user: returnObj\n        })\n    }\n\n    @Get('/testUser')\n    getTestUser() {\n      return this.usersService.findOne('simon')\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User,UserSchema } from './user.schema';\nimport { UsersController } from './users.controller';\nimport { APP_GUARD } from '@nestjs/core';\nimport { RolesGuard } from 'src/auth/roles/roles.guard';\n\n\n@Module({\n  imports: [MongooseModule.forFeature([{name: User.name, schema: UserSchema}])],\n  controllers: [UsersController],\n  providers: [UsersService,   {\n    provide: APP_GUARD,\n    useClass: RolesGuard,\n  }],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                createMoodleUser\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findMoodleUser\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                put\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            changePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    changePassword(userDto: UserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userDto: UserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createMoodleUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createMoodleUser(mail: string, username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(userDto: UserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findMoodleUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findMoodleUser(mail: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            put\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    put(userDto: UserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { UserDTO } from './user.dto';\nimport { User,UserDocument } from './user.schema';\nimport * as bcrypt from 'bcryptjs';\n\n@Injectable()\nexport class UsersService {\n  constructor(@InjectModel('User') private userModel: Model) {\n\n  }\n\n  async put(userDto: UserDTO) {\n    console.log(\"[LOG] Put User:\")\n    console.log(userDto)\n    return this.userModel.findByIdAndUpdate(userDto._id,{'username':userDto.username, 'email':userDto.email, 'role':userDto.role}).exec(); //TODO: testn\n  }\n\n  //TODO: Check old Password??\n  async changePassword(userDto: UserDTO) {\n    var password = userDto.password;\n    const saltRounds = 10;\n    const hashedPassword = await bcrypt.hash(password,saltRounds);\n    userDto.password = await hashedPassword;\n    console.log(\"[LOG] Change Password User:\");\n    console.log(userDto);\n    return this.userModel.findByIdAndUpdate(userDto._id,{'password': userDto.password}).exec();\n  }\n\n  async delete(userDto: UserDTO) {\n    console.log(\"[LOG] Delete User:\")\n    console.log(userDto)\n    return this.userModel.findByIdAndRemove(userDto._id).exec();\n  }\n\n  async create(userDto: UserDTO): Promise {\n\n    var that = this;\n    var password = userDto.password\n    const saltRounds = 10;\n    const hashedPassword = await bcrypt.hash(password,saltRounds);\n    userDto.password = await hashedPassword;\n    userDto.role = \"user\"; //Erstmal User by default\n    console.log(\"[LOG] Save new User\")\n    console.log(userDto)\n    const createdUser = await new that.userModel(userDto);\n    return createdUser.save()\n  }\n\n  async createMoodleUser(mail:string,username:string) : Promise {\n    var that = this;\n    const userDto:any = {\n      username: username,\n      email: mail,\n      password: \"\",\n      role: \"moodleuser\"\n    }\n    const createdUser = await new that.userModel(userDto);\n    return createdUser.save()\n  }\n\n  async findMoodleUser(mail:string): Promise {\n    return this.userModel.findOne({'email': mail}).exec()\n  }\n\n  async findOne(username: string): Promise {\n    return this.userModel.findOne({'username': username}).exec();\n  }\n\n  async findAll(): Promise {\n    return this.userModel.find().exec();\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            variable\n            lti\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/moodleSessions.ts\n            \n            class\n            moodleSessions\n            \n                50 %\n                (4/8)\n            \n        \n        \n            \n                \n                src/auth/roles/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/roles/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/roles/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/plugins/basicExamplePlugin/basicExamplePluginMain.ts\n            \n            function\n            getOpenTests\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/plugins/basicExamplePlugin/basicExamplePluginMain.ts\n            \n            function\n            submit\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/plugins/codingPlugin/codingPluginInterfaces.ts\n            \n            interface\n            IFeedback\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/plugins/codingPlugin/codingPluginInterfaces.ts\n            \n            interface\n            ITestResult\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/plugins/codingPlugin/codingPluginMain.ts\n            \n            function\n            codingTests\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/plugins/codingPlugin/codingPluginMain.ts\n            \n            function\n            getNote\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/plugins/codingPlugin/codingPluginMain.ts\n            \n            function\n            getOpenTests\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/plugins/codingPlugin/codingPluginMain.ts\n            \n            function\n            submit\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/plugins/codingPlugin/codingPluginMain.ts\n            \n            variable\n            getBody\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/task/moodleSubmitHelper.ts\n            \n            class\n            moodleSubmitHelper\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/task/task.controller.ts\n            \n            controller\n            TaskController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/task/task.schema.ts\n            \n            class\n            Task\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/task/task.schema.ts\n            \n            variable\n            TaskSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/task/task.service.ts\n            \n            injectable\n            TaskService\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/task/taskcollection.controller.ts\n            \n            controller\n            TaskCollectionController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/task/taskcollection.schema.ts\n            \n            class\n            TaskCollection\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/task/taskcollection.schema.ts\n            \n            interface\n            TaskInCollection\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/task/taskcollection.schema.ts\n            \n            variable\n            TaskCollectionSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/task/taskrunner.ts\n            \n            class\n            taskRunner\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/task/taskrunner.ts\n            \n            variable\n            pluginDirectoryPath\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/user.dto.ts\n            \n            class\n            UserDTO\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/user.schema.ts\n            \n            interface\n            taskAndNote\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/10)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.6.15\n        \n            @nestjs/config : ^0.5.0\n        \n            @nestjs/core : ^7.6.15\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/mongoose : ^7.2.4\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.6.15\n        \n            axios : ^0.21.1\n        \n            bcryptjs : ^2.4.3\n        \n            class-validator : ^0.12.2\n        \n            ims-lti : ^3.0.2\n        \n            lodash : ^4.17.21\n        \n            lodash.isnumber : ^3.0.3\n        \n            mongoose : ^5.12.2\n        \n            notevil : ^1.3.3\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.6\n        \n            uuid4 : ^2.0.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Role   (src/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/roles/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 Dozent\n                            \n                        \n                        \n                            \n                                Value : dozent\n                            \n                        \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            codingTests   (src/.../codingPluginMain.ts)\n                        \n                        \n                            getNote   (src/.../codingPluginMain.ts)\n                        \n                        \n                            getOpenTests   (src/.../basicExamplePluginMain.ts)\n                        \n                        \n                            getOpenTests   (src/.../codingPluginMain.ts)\n                        \n                        \n                            submit   (src/.../basicExamplePluginMain.ts)\n                        \n                        \n                            submit   (src/.../codingPluginMain.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    Main Run Function for Backend\n\n\n                \n            \n        \n    \n    src/plugins/codingPlugin/codingPluginMain.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            codingTests\n                        \n                        \n                    \n                \n            \n            \n                \ncodingTests(inputparams, tests, userInput)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    inputparams\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        inputparams (stored in dataforplugin)\n\n                                    \n                                \n                                \n                                    tests\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        open Tests created\n\n                                    \n                                \n                                \n                                    userInput\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        userInput to test\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IFeedback\n\n                    \n                    \n                        Feedback in IFeedback Format (Message + runned Test Feedback)\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNote\n                        \n                        \n                    \n                \n            \n            \n                \ngetNote(inputparams, tests, userInput)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    inputparams\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        inputparams (stored in dataforplugin)\n\n                                    \n                                \n                                \n                                    tests\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        closed Tests created\n\n                                    \n                                \n                                \n                                    userInput\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        userInput to test\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOpenTests\n                        \n                        \n                    \n                \n            \n            \n                \ngetOpenTests(data: any, tests: any, input: any)\n                \n            \n\n\n\n\n            \n                \n                    Basic getOpenTests For Plugin\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        dataForPlugin from Task\n\n                                    \n                                \n                                \n                                    tests\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        open tests for task\n\n                                    \n                                \n                                \n                                    input\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        userInput\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Return obj to Frontend Plugin\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            submit\n                        \n                        \n                    \n                \n            \n            \n                \nsubmit(data: any, tests: any, input: any)\n                \n            \n\n\n\n\n            \n                \n                    Basic getOpenTests For Plugin\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        dataForPlugin from Task\n\n                                    \n                                \n                                \n                                    tests\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        closed tests for task\n\n                                    \n                                \n                                \n                                    input\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        userInput\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        a note 0-100 for evaluation\n\n                    \n                \n            \n        \n    \n    src/plugins/basicExamplePlugin/basicExamplePluginMain.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            getOpenTests\n                        \n                        \n                    \n                \n            \n            \n                \ngetOpenTests(data: any, tests: any, input: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        dataForPlugin from createdPlugin (see Frontend)\n\n                                    \n                                \n                                \n                                    tests\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        open Tests from Frontend (In Format Input -> Expected Output)\n\n                                    \n                                \n                                \n                                    input\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Feedback for Open Tests\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            submit\n                        \n                        \n                    \n                \n            \n            \n                \nsubmit(data: any, tests: any, input: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        dataForPlugin from createdPlugin (see Frontend)\n\n                                    \n                                \n                                \n                                    tests\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        closed Tests from Frontend (In Format Input -> Expected Output)\n\n                                    \n                                \n                                \n                                    input\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        Note for the user submission (in 0-100 !!)\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TaskModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/moodleSessions.html":{"url":"classes/moodleSessions.html","title":"class - moodleSessions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  moodleSessions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/moodleSessions.ts\n        \n\n            \n                Description\n            \n            \n                Singleton Construct to store moodle Sessions from a User\nSessions a stored in a Map\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                instance\n                            \n                            \n                                    Private\n                                sessions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addSession\n                            \n                            \n                                    Static\n                                getInstance\n                            \n                            \n                                    Public\n                                getSession\n                            \n                            \n                                    Public\n                                removeSession\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Private\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/moodleSessions.ts:10\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            instance\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         moodleSessions\n\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/moodleSessions.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            sessions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/moodleSessions.ts:10\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addSession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addSession(key: string, session: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/moodleSessions.ts:35\n                \n            \n\n\n            \n                \n                    Adds a Session to the session manager\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Session Key (Json Token created by auth) to access session\n\n                                    \n                                \n                                \n                                    session\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Moodle Session (Obj from lti)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getInstance\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInstance()\n                \n            \n\n\n            \n                \n                    Defined in src/auth/moodleSessions.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         moodleSessions\n\n                    \n                    \n                        the Instance of the moodle Session managment system\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getSession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSession(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/moodleSessions.ts:55\n                \n            \n\n\n            \n                \n                    Gets A Session from the session Manager\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Key to access session to get\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Session (Lti Format )\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeSession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeSession(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/moodleSessions.ts:44\n                \n            \n\n\n            \n                \n                    Removes a session for the given key\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        key to access session to remove\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export default class moodleSessions {\n    private static instance: moodleSessions;\n    private sessions : Map //key, session\n\n    private constructor (){\n        this.sessions = new Map(); //key, session\n    }\n\n    /**\n     *\n     * @returns the Instance of the moodle Session managment system\n     */\n    public static getInstance():moodleSessions {\n        if(!moodleSessions.instance) {\n            moodleSessions.instance = new moodleSessions();\n        }\n\n        return moodleSessions.instance;\n    }\n\n    /**\n     *\n     * Adds a Session to the session manager\n     *\n     * @param key Session Key (Json Token created by auth) to access session\n     * @param session Moodle Session (Obj from lti)\n     */\n    public addSession(key : string, session : any) {\n        this.sessions.set(key,session)\n    }\n\n    /**\n     * Removes a session for the given key\n     *\n     * @param key key to access session to remove\n     */\n    public removeSession(key : string) {\n        this.sessions.delete(key)\n    }\n\n    /**\n     *\n     * Gets A Session from the session Manager\n     *\n     * @param key Key to access session to get\n     * @returns Session (Lti Format )\n     */\n    public getSession(key : string) {\n        return this.sessions.get(key)\n    }\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/moodleSubmitHelper.html":{"url":"classes/moodleSubmitHelper.html","title":"class - moodleSubmitHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  moodleSubmitHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/moodleSubmitHelper.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                submitNoteToMoodle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/task/moodleSubmitHelper.ts:1\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            submitNoteToMoodle\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    submitNoteToMoodle(session: any, grade: number)\n                \n            \n\n\n            \n                \n                    Defined in src/task/moodleSubmitHelper.ts:9\n                \n            \n\n\n            \n                \n                    Submits a note to a given moodle session\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    session\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        moodle session to submit to\n\n                                    \n                                \n                                \n                                    grade\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        grade (in 0-100)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export default class moodleSubmitHelper {\n    constructor() {}\n\n    /**\n     * Submits a note to a given moodle session\n     * @param session moodle session to submit to\n     * @param grade grade (in 0-100)\n     */\n    public submitNoteToMoodle(session:any,grade:number) {\n    //Grade must be rounded as moodle expects 0-1\n    session.outcome_service.send_replace_result(grade/100, (err, isValid) => {\n      if (!isValid) {\n        if(!session.outcome_service) {\n          console.log(\"[LOG] No Outcome Service in session!\")\n        }\n        console.log(\"[LOG] INVALID Grade:\")\n        console.log(err)\n\n        return \"INVALID GRADE \"+err\n      }\n      console.log(\"[LOG] Note submitted: \",grade)\n      return ('OK')\n      })\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_TaskModule\n\n\n\ncluster_TaskModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nTaskModule\n\nTaskModule\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nTaskService\n\nTaskService\n\nTaskModule -->\n\nTaskService->TaskModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/taskAndNote.html":{"url":"interfaces/taskAndNote.html","title":"interface - taskAndNote","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  taskAndNote\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.schema.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        note\n                                \n                                \n                                        taskID\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        note\n                                    \n                                \n                                \n                                    \n                                        note:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        taskID\n                                    \n                                \n                                \n                                    \n                                        taskID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type UserDocument = User & Document;\n\nexport interface taskAndNote {\n  taskID: string,\n  note: number\n}\n@Schema()\nexport class User {\n\n  @Prop()\n  name: string;\n\n  @Prop()\n  username: string;\n\n  @Prop()\n  email: string;\n\n  @Prop()\n  password: string;\n\n  @Prop()\n  solvedTasksOrCollections: Map;\n\n  //;\n\n  @Prop()\n  role: string;\n\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/taskRunner.html":{"url":"classes/taskRunner.html","title":"class - taskRunner","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  taskRunner\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/taskrunner.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                getPlugin\n                            \n                            \n                                    Async\n                                runTests\n                            \n                            \n                                    Async\n                                submitTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/task/taskrunner.ts:5\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            getPlugin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPlugin(pluginCode: string)\n                \n            \n\n\n            \n                \n                    Defined in src/task/taskrunner.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pluginCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        pluginCode (like Name) for created Plugin (must match in frontend and backend)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        Import of the given file (if it exists) or null (if it doesnt exist)\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            runTests\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    runTests(task: any, input: any)\n                \n            \n\n\n            \n                \n                    Defined in src/task/taskrunner.ts:16\n                \n            \n\n\n            \n                \n                    Runs the Tests for a Plugin and returns the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    task\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        raw Task created by plugin developer\n\n                                    \n                                \n                                \n                                    input\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        raw input from frontend\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        raw open tests result from plugin openTests method\nor null if the plugin is not found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            submitTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    submitTask(task: any, input: any)\n                \n            \n\n\n            \n                \n                    Defined in src/task/taskrunner.ts:33\n                \n            \n\n\n            \n                \n                    Submit a Task for a Plugin\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    task\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        raw Task created by plugin developer\n\n                                    \n                                \n                                \n                                    input\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        raw input from frontend\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        raw feedback result from plugin openTests method\nor null if the plugin is not found\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as plugins from '../plugins/plugins.json'\n//Path to Plugin Directory (this is not in the config.json because the directory path should not be changed)\nconst pluginDirectoryPath = \"../plugins/\"\n\nexport default class taskRunner {\n  constructor() {}\n\n  /**\n   *  Runs the Tests for a Plugin and returns the result\n   *\n   * @param task raw Task created by plugin developer\n   * @param input raw input from frontend\n   * @returns raw open tests result from plugin openTests method\n   *          or null if the plugin is not found\n   */\n  async runTests(task:any,input:any):Promise {\n    console.log(\"[LOG] Running Tests:\",task.openTests,\"for data:\",input)\n    const plugin = await this.getPlugin(task.pluginCode)\n    if(plugin) {\n      const testResult = plugin.default.getOpenTests(task.dataForPlugin,task.openTests,input)\n      return testResult\n    } else return null\n  }\n\n  /**\n   *  Submit a Task for a Plugin\n   *\n   * @param task raw Task created by plugin developer\n   * @param input raw input from frontend\n   * @returns raw feedback result from plugin openTests method\n   *          or null if the plugin is not found\n   */\n  async submitTask(task:any,input:any):Promise {\n      console.log(\"[LOG] Submitting:\",task.closedTests,\"for data:\",input)\n      const plugin = await this.getPlugin(task.pluginCode)\n      if(plugin) {\n        const submittedResult = plugin.default.submit(task.dataForPlugin,task.closedTests,input)\n        return submittedResult\n      } else return null\n\n  }\n\n  /**\n   *\n   * @param pluginCode pluginCode (like Name) for created Plugin (must match in frontend and backend)\n   * @returns Import of the given file (if it exists) or null (if it doesnt exist)\n   *\n   */\n  private async getPlugin(pluginCode:string) {\n    let pluginFileName:string\n    let pluginDirectory:string\n    plugins.forEach(plugin=> {\n      if(plugin.name == pluginCode) {\n        pluginFileName=plugin.mainFile\n        pluginDirectory=plugin.directory\n        const pathToFile = pluginDirectoryPath+pluginDirectory+'/'+pluginFileName\n        return import(pathToFile)\n      }\n    })\n    return null\n\n  }\n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TaskCollectionDocument   (src/.../taskcollection.schema.ts)\n                        \n                        \n                            TaskDocument   (src/.../task.schema.ts)\n                        \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/task/taskcollection.schema.ts\n    \n    \n        \n            \n                \n                    \n                    TaskCollectionDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/task/task.schema.ts\n    \n    \n        \n            \n                \n                    \n                    TaskDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/users/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            getBody   (src/.../codingPluginMain.ts)\n                        \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                        \n                            lti   (src/.../auth.service.ts)\n                        \n                        \n                            pluginDirectoryPath   (src/.../taskrunner.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            TaskCollectionSchema   (src/.../taskcollection.schema.ts)\n                        \n                        \n                            TaskSchema   (src/.../task.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/plugins/codingPlugin/codingPluginMain.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getBody\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (string) => string.substring(string.indexOf(\"{\") + 1,string.lastIndexOf(\"}\"))\n                        \n                    \n\n\n            \n        \n\n    src/auth/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConstants\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    secret: 'secretKey',\n}\n                        \n                    \n\n\n            \n        \n\n    src/auth/auth.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            lti\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require(\"ims-lti\")\n                        \n                    \n\n\n            \n        \n\n    src/task/taskrunner.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            pluginDirectoryPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"../plugins/\"\n                        \n                    \n\n\n            \n        \n\n    src/auth/roles/roles.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ROLES_KEY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'roles'\n                        \n                    \n\n\n            \n        \n\n    src/task/taskcollection.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TaskCollectionSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(TaskCollection)\n                        \n                    \n\n\n            \n        \n\n    src/task/task.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TaskSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Task)\n                        \n                    \n\n\n            \n        \n\n    src/users/user.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UserSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(User)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
