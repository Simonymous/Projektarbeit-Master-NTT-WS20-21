var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.259,1,2.226]],["body/controllers/AppController.html",[0,2.109,1,3.73,2,1.865,3,0.397,4,0.397,5,0.349,6,3.905,7,0.397,8,1.486,9,5.316,10,2.166,11,0.027,12,0.914,13,4.631,14,1.139,15,1.111,16,0.803,17,3.427,18,2.784,19,2.784,20,0.985,21,3.333,22,3.905,23,0.397,24,0.094,25,1.406,26,2.344,27,2.784,28,1.139,29,4.631,30,0.018,31,0.022,32,0.018]],["title/modules/AppModule.html",[33,1.456,34,2.226]],["body/modules/AppModule.html",[1,3.737,2,2.052,3,0.339,4,0.339,5,0.298,11,0.027,16,0.928,20,0.841,21,3.471,22,3.333,23,0.339,24,0.08,30,0.016,31,0.02,32,0.016,33,2.444,34,4.449,35,2,36,2,37,2.376,38,2.376,39,2,40,3.39,41,2.376,42,3.333,43,3.333,44,3.333,45,3.795,46,3.795,47,3.471,48,3.063,49,2.376,50,2.376,51,3.953,52,3.377,53,3.953,54,3.953,55,2.925,56,1.482,57,3.953,58,3.333,59,3.333,60,2.925,61,3.953]],["title/injectables/AppService.html",[21,1.847,62,0.769]],["body/injectables/AppService.html",[3,0.41,4,0.41,5,0.361,7,0.41,8,1.515,9,5.375,11,0.027,12,0.944,14,1.177,15,1.133,16,0.683,20,1.018,21,3.156,23,0.41,24,0.097,28,1.177,30,0.019,31,0.023,32,0.019,62,1.314,63,2.074,64,4.034,65,4.784,66,3.54,67,2.876,68,3.171]],["title/controllers/AuthController.html",[0,1.259,69,2.226]],["body/controllers/AuthController.html",[0,0.923,2,0.991,3,0.211,4,0.211,5,0.186,7,0.211,8,0.967,10,2.047,11,0.028,12,0.864,14,1.337,16,0.74,17,4.022,18,1.48,19,1.48,20,0.524,23,0.211,24,0.05,26,1.245,27,2.203,28,1.385,30,0.01,31,0.015,32,0.01,67,2.916,69,2.429,70,2.075,71,1.631,72,1.631,73,2.381,74,4.047,75,4.377,76,4.377,77,2.461,78,3.217,79,2.461,80,2.461,81,3.664,82,2.203,83,1.002,84,0.864,85,0.435,86,1.002,87,1.641,88,3.671,89,4.878,90,3.664,91,3.045,92,2.851,93,3.664,94,3.478,95,4.849,96,3.239,97,2.461,98,3.664,99,2.461,100,3.664,101,2.015,102,2.667,103,3.09,104,1.713,105,3.664,106,3.664,107,1.373,108,3.09,109,3.664,110,2.461,111,3.664,112,2.461,113,1.324,114,2.015,115,2.215,116,1.821,117,2.901,118,2.44,119,1.821,120,1.354,121,1.631,122,3.09,123,1.631,124,1.821,125,1.631,126,2.461,127,1.763,128,2.461,129,2.461,130,1.354,131,2.461,132,2.461,133,2.461,134,1.373,135,3.214,136,2.102,137,3.664,138,2.461,139,2.711,140,2.429,141,2.461,142,1.821,143,2.461,144,2.461,145,2.461,146,2.461,147,2.461,148,2.461,149,2.461,150,2.461,151,3.664,152,1.821,153,2.075]],["title/modules/AuthModule.html",[33,1.456,45,2.019]],["body/modules/AuthModule.html",[2,1.97,3,0.318,4,0.318,5,0.28,11,0.028,16,0.927,20,0.79,23,0.318,24,0.075,30,0.015,31,0.019,32,0.015,33,2.371,35,1.879,36,1.879,37,2.232,38,2.232,39,1.879,40,3.289,41,3.289,45,4.022,47,3.413,48,2.941,49,2.232,50,2.232,52,3.242,58,3.131,69,3.626,115,3.366,116,2.747,154,3.131,155,3.131,156,3.713,157,3.131,158,3.731,159,3.731,160,3.713,161,4.892,162,2.042,163,3.713,164,3.713,165,3.713,166,2.232,167,2.461,168,3.131,169,3.713,170,3.713,171,2.747,172,3.131,173,3.713,174,3.713,175,3.713]],["title/injectables/AuthService.html",[62,0.769,115,1.7]],["body/injectables/AuthService.html",[3,0.19,4,0.19,5,0.167,7,0.19,8,0.893,11,0.028,12,0.978,14,1.378,15,1.031,16,0.745,17,3.402,20,0.471,23,0.19,24,0.045,25,1.028,26,1.712,28,1.284,30,0.009,31,0.016,32,0.009,59,1.867,60,1.639,62,0.775,63,0.96,67,2.034,73,2.433,74,3.461,78,1.712,83,1.134,84,0.978,85,0.487,86,1.134,87,1.268,88,1.331,92,2.528,101,2.987,102,3.221,103,2.853,104,2.316,107,1.723,108,1.867,113,1.4,115,1.712,118,2.355,122,1.867,127,2.103,134,1.586,136,2.263,166,1.331,171,1.639,176,1.639,177,3.384,178,3.384,179,3.384,180,2.215,181,4.02,182,2.215,183,3.384,184,2.215,185,3.402,186,2.215,187,3.461,188,2.987,189,2.215,190,1.654,191,2.853,192,2.853,193,2.355,194,2.764,195,2.243,196,2.215,197,2.215,198,3.384,199,3.047,200,3.384,201,3.384,202,4.597,203,2.215,204,3.384,205,3.384,206,4.597,207,3.039,208,1.639,209,1.867,210,1.639,211,1.861,212,1.867,213,1.867,214,2.215,215,2.215,216,2.215,217,2.215,218,2.215,219,2.215,220,2.215,221,2.215,222,2.215,223,2.853,224,2.215,225,2.215,226,2.215,227,2.215,228,4.106,229,4.106,230,2.215,231,2.215,232,2.215,233,2.215,234,2.215,235,1.639,236,1.468,237,1.639,238,2.243,239,2.215,240,2.504,241,2.853,242,2.034,243,2.853,244,2.215,245,2.215,246,2.215,247,2.215,248,2.215,249,2.215,250,2.215,251,1.639,252,1.468,253,1.639,254,2.215,255,2.215,256,2.215,257,1.639,258,2.215,259,4.953,260,1.639,261,2.215,262,2.215,263,2.215,264,2.215,265,2.215]],["title/interfaces/IFeedback.html",[266,1.259,267,2.019]],["body/interfaces/IFeedback.html",[3,0.405,4,0.405,5,0.357,7,0.405,11,0.027,15,1.253,23,0.488,30,0.019,31,0.023,32,0.019,85,0.676,91,3.288,195,3.133,266,2.136,267,3.425,268,2.842,269,3.498,270,2.47,271,5.353,272,4.208,273,3.986]],["title/interfaces/ITestResult.html",[266,1.259,272,2.226]],["body/interfaces/ITestResult.html",[3,0.405,4,0.405,5,0.357,7,0.405,11,0.027,15,1.253,23,0.488,30,0.019,31,0.023,32,0.019,85,0.676,91,3.288,195,4.053,266,2.136,267,2.842,268,2.842,269,3.498,270,2.47,271,3.986,272,4.053,273,5.353]],["title/injectables/JwtAuthGuard.html",[62,0.769,274,1.847]],["body/injectables/JwtAuthGuard.html",[3,0.529,4,0.341,5,0.3,7,0.341,8,1.352,11,0.027,12,1.011,14,1.259,16,0.731,20,0.847,23,0.341,24,0.081,28,1.259,30,0.016,31,0.02,32,0.016,62,1.172,63,1.726,83,1.172,84,1.011,85,0.472,86,1.172,104,1.862,113,1.414,162,2.19,190,1.604,240,4.42,274,2.816,275,3.402,276,2.947,277,4.317,278,5.12,279,4.317,280,5.037,281,3.982,282,3.358,283,5.12,284,3.982,285,4.317,286,3.358,287,2.64,288,3.982,289,3.982,290,3.982,291,3.982,292,3.982,293,3.982,294,3.982,295,3.982,296,3.982,297,3.982,298,3.982,299,4.317,300,3.982,301,3.358,302,3.982]],["title/injectables/JwtStrategy.html",[62,0.769,158,2.019]],["body/injectables/JwtStrategy.html",[3,0.357,4,0.357,5,0.315,7,0.357,8,1.392,11,0.027,12,1.041,14,1.026,16,0.867,20,0.887,23,0.357,24,0.085,25,1.756,28,1.026,30,0.017,31,0.021,32,0.017,62,1.207,63,1.808,73,2.329,83,0.955,84,0.823,85,0.495,86,0.955,104,1.95,158,3.17,162,2.293,167,2.764,168,3.516,172,3.516,193,1.808,223,3.516,238,2.764,287,2.764,303,3.516,304,4.446,305,4.17,306,5.273,307,4.17,308,4.17,309,3.516,310,3.086,311,3.516,312,3.516,313,3.516,314,3.516,315,4.17,316,4.17,317,4.17,318,3.901,319,4.17,320,3.516,321,4.17,322,4.17,323,4.17,324,4.17,325,4.17]],["title/injectables/LocalAuthGuard.html",[62,0.769,123,2.226]],["body/injectables/LocalAuthGuard.html",[3,0.428,4,0.428,5,0.377,11,0.027,16,0.84,20,1.063,23,0.428,24,0.102,30,0.02,31,0.023,32,0.02,62,1.348,63,2.165,123,3.902,162,2.747,276,3.696,286,4.212,287,3.31,326,4.212,327,4.995]],["title/injectables/LocalStrategy.html",[62,0.769,159,2.019]],["body/injectables/LocalStrategy.html",[3,0.345,4,0.345,5,0.304,7,0.345,8,1.361,11,0.027,12,1.017,14,0.989,15,1.252,16,0.856,20,0.856,23,0.345,24,0.082,25,1.222,28,0.989,30,0.016,31,0.02,32,0.016,62,1.18,63,1.744,73,2.29,83,1.18,84,1.017,85,0.611,86,1.18,113,1.302,115,3.209,116,2.976,124,2.976,130,2.212,134,1.139,136,1.744,159,3.098,162,2.212,190,1.62,193,1.744,194,3.098,285,4.345,287,2.666,299,3.392,304,4.345,309,3.392,310,2.976,312,3.392,313,3.392,314,3.392,328,3.392,329,4.023,330,4.023,331,5.153,332,3.297,333,4.023,334,4.023]],["title/guards/RolesGuard.html",[335,2.485,336,2.226]],["body/guards/RolesGuard.html",[3,0.33,4,0.33,5,0.29,7,0.33,8,1.322,11,0.028,12,0.988,14,0.946,16,0.872,20,0.819,23,0.33,24,0.078,25,1.168,28,1.45,30,0.015,31,0.02,32,0.015,62,1.146,83,1.146,84,0.988,85,0.594,86,1.146,92,2.116,113,0.881,130,2.116,134,1.67,166,2.313,181,3.705,190,1.55,195,3.319,260,2.847,277,4.971,279,4.222,280,4.971,282,3.244,318,3.705,336,3.319,337,3.848,338,3.244,339,3.848,340,6.267,341,3.848,342,3.848,343,2.55,344,1.799,345,3.848,346,2.847,347,3.848,348,3.848,349,5.007,350,3.848,351,3.848,352,3.848,353,3.848,354,3.848,355,3.848,356,3.848,357,3.848,358,3.848,359,3.848]],["title/classes/Task.html",[24,0.068,107,1.259]],["body/classes/Task.html",[3,0.249,4,0.249,5,0.22,7,0.249,10,2.988,11,0.027,12,1.272,15,1.358,16,0.591,23,0.413,24,0.059,25,1.258,30,0.012,31,0.016,32,0.012,56,1.091,83,0.666,84,0.575,85,0.783,86,0.666,87,2.16,107,1.806,134,0.825,270,1.795,360,1.361,361,1.93,362,5.764,363,5.764,364,4.265,365,4.265,366,4.677,367,4.104,368,4.86,369,4.86,370,3.465,371,4.104,372,2.455,373,2.911,374,4.071,375,2.911,376,2.911,377,2.911,378,2.911,379,2.911,380,2.911,381,2.911,382,2.911,383,2.911,384,2.911,385,2.911,386,2.911,387,2.095,388,1.75,389,2.49,390,1.361,391,2.154,392,2.911,393,1.93,394,2.455]],["title/classes/TaskCollection.html",[24,0.068,395,1.7]],["body/classes/TaskCollection.html",[3,0.276,4,0.276,5,0.243,7,0.276,10,2.906,11,0.027,12,1.245,15,1.351,16,0.634,23,0.436,24,0.065,25,1.349,30,0.013,31,0.018,32,0.013,56,1.206,83,0.737,84,0.635,85,0.782,86,0.737,87,2.23,134,0.911,266,1.206,270,1.925,360,1.505,364,4.403,365,4.403,367,4.258,370,3.577,371,4.258,372,2.713,374,4.019,387,2.247,388,1.934,389,2.67,390,1.505,395,2.574,396,1.934,397,3.944,398,3.944,399,3.218,400,3.218,401,3.218,402,3.218,403,3.218,404,3.218,405,3.218,406,3.218,407,3.218,408,2.133,409,2.133,410,2.381,411,1.628,412,2.713,413,2.713,414,1.934,415,2.381]],["title/controllers/TaskCollectionController.html",[0,1.259,416,2.226]],["body/controllers/TaskCollectionController.html",[0,0.733,2,0.788,3,0.168,4,0.168,5,0.148,7,0.168,8,0.811,10,2.428,11,0.028,12,1.025,14,1.277,15,1.232,16,0.741,18,1.176,19,1.176,20,0.416,23,0.168,24,0.04,27,1.176,28,1.481,30,0.008,31,0.012,32,0.008,67,1.848,68,1.297,71,1.297,72,1.297,73,2.515,74,1.297,82,1.176,83,1.136,84,0.98,85,0.589,86,1.136,88,3.862,91,2.92,92,1.076,94,2.811,104,2.187,107,2.073,114,1.076,117,2.852,118,0.848,120,1.076,121,1.297,125,1.297,130,1.076,134,1.603,135,2.516,136,2.027,139,1.447,140,3.099,142,3.183,152,1.447,187,2.037,188,2.572,190,1.238,193,1.332,211,1.076,237,1.447,238,2.037,252,2.037,253,2.274,274,1.076,275,1.176,395,2.799,416,2.037,417,1.649,418,3.073,419,2.592,420,4.302,421,3.073,422,2.088,423,3.796,424,2.592,425,1.956,426,3.201,427,2.592,428,1.956,429,1.649,430,2.592,431,1.956,432,4.534,433,1.956,434,1.956,435,2.592,436,1.956,437,1.956,438,4.663,439,2.592,440,1.956,441,1.956,442,3.943,443,3.073,444,1.956,445,1.956,446,2.809,447,2.592,448,1.956,449,1.921,450,1.447,451,1.297,452,1.447,453,2.282,454,1.649,455,2.282,456,1.956,457,2.274,458,1.297,459,1.649,460,1.649,461,1.649,462,1.649,463,1.649,464,1.649,465,1.649,466,1.649,467,1.649,468,1.649,469,1.649,470,1.447,471,1.447,472,1.649,473,1.956,474,1.956,475,1.956,476,1.956,477,1.956,478,1.649,479,1.956,480,2.592,481,2.592,482,1.649,483,1.921,484,1.649,485,2.592,486,2.592,487,2.592,488,2.592,489,2.592,490,1.956,491,2.516,492,1.956,493,1.956,494,1.649,495,3.201,496,3.628,497,2.274,498,1.649,499,1.649,500,1.956,501,1.956,502,1.649,503,1.956,504,2.592,505,1.956,506,1.956,507,1.649,508,1.956,509,1.956,510,2.592,511,1.956,512,1.956,513,1.649,514,1.956,515,1.956,516,2.592]],["title/controllers/TaskController.html",[0,1.259,517,2.226]],["body/controllers/TaskController.html",[0,0.498,2,0.535,3,0.114,4,0.114,5,0.1,7,0.114,8,0.592,10,2.251,11,0.028,12,0.95,14,1.48,15,1.149,16,0.66,18,0.798,19,0.798,20,0.282,23,0.114,24,0.027,27,0.798,28,1.401,30,0.005,31,0.009,32,0.005,67,2.993,68,1.485,71,0.88,72,0.88,73,2.44,74,0.88,82,1.747,83,1.059,84,0.95,85,0.549,86,1.059,87,1.65,88,3.91,89,2.879,91,2.999,92,1.877,94,1.347,96,1.658,101,2.097,104,1.596,107,2.503,113,0.513,114,1.598,117,2.741,118,2.497,119,0.982,120,1.598,121,0.88,125,0.88,127,0.535,130,0.73,134,1.08,135,2.741,136,2.005,139,0.982,140,2.528,142,2.822,152,2.151,153,1.12,185,0.982,187,0.88,188,3.331,190,1.939,193,0.576,199,2.263,208,0.982,211,0.73,235,1.658,237,0.982,238,0.88,252,0.88,253,0.982,274,0.73,275,0.798,320,1.12,370,0.798,397,2.528,422,1.877,427,1.889,430,1.889,435,1.889,438,3.9,439,1.889,446,3.422,447,1.889,449,1.471,450,0.982,451,0.88,453,2.053,454,1.12,455,1.747,457,1.658,458,0.88,459,1.12,460,1.12,461,1.12,462,1.12,463,1.12,464,1.12,465,1.12,466,1.12,467,1.12,468,1.12,469,1.12,470,0.982,471,0.982,472,1.12,478,2.451,480,1.12,481,2.451,482,1.889,483,1.134,484,1.12,485,1.12,486,1.12,487,1.12,488,1.12,489,1.12,491,0.88,495,1.12,496,1.12,497,3.422,498,2.451,499,1.12,502,1.12,507,1.12,510,1.889,513,2.451,516,3.215,517,1.485,518,1.12,519,2.241,520,1.889,521,3.414,522,2.151,523,2.241,524,1.889,525,1.889,526,2.451,527,2.451,528,1.328,529,1.328,530,2.241,531,1.12,532,1.328,533,1.889,534,2.241,535,1.328,536,3.488,537,1.328,538,3.684,539,2.241,540,1.328,541,2.526,542,2.526,543,2.487,544,2.879,545,2.526,546,1.328,547,1.328,548,2.241,549,1.12,550,2.241,551,1.328,552,1.889,553,1.889,554,1.889,555,2.879,556,1.328,557,2.451,558,2.241,559,1.328,560,1.328,561,1.328,562,1.889,563,2.241,564,1.658,565,2.241,566,1.328,567,1.328,568,2.241,569,1.889,570,0.982,571,1.328,572,1.328,573,1.328,574,1.328,575,1.328,576,1.328,577,1.328,578,1.328,579,1.328,580,1.328,581,1.328,582,1.328,583,1.328,584,1.328,585,1.328,586,1.12,587,1.328,588,1.889,589,1.328,590,1.328,591,1.328,592,1.328,593,1.328,594,1.328,595,1.328,596,1.328,597,1.328,598,1.328,599,1.328,600,1.328,601,1.328,602,1.328,603,1.328,604,1.328,605,1.328,606,1.328]],["title/interfaces/TaskInCollection.html",[266,1.259,398,2.226]],["body/interfaces/TaskInCollection.html",[3,0.337,4,0.337,5,0.297,7,0.337,11,0.027,15,1.341,16,0.725,23,0.482,24,0.08,25,1.194,30,0.016,31,0.02,32,0.016,56,1.474,85,0.73,87,1.904,134,1.114,266,1.474,268,2.365,270,2.202,364,3.758,365,3.758,367,3.758,370,3.054,371,3.758,374,3.949,387,2.57,388,2.365,389,3.054,390,1.839,395,2.57,396,2.365,397,3.367,398,3.941,408,2.607,409,3.941,410,4.399,411,2.847,412,5.013,413,3.316,414,2.365,415,2.91]],["title/modules/TaskModule.html",[33,1.456,46,2.019]],["body/modules/TaskModule.html",[2,2.049,3,0.338,4,0.338,5,0.298,11,0.027,16,0.945,20,0.839,23,0.338,24,0.08,30,0.016,31,0.02,32,0.016,33,2.441,35,1.995,36,1.995,37,2.371,38,2.371,39,1.995,40,3.386,41,2.371,46,3.792,48,3.059,49,2.371,50,2.371,52,2.613,55,2.918,56,1.478,107,1.478,113,0.903,127,1.588,208,2.918,343,2.613,387,2.85,393,3.372,395,1.995,414,3.059,416,3.733,449,3.192,450,2.918,452,2.918,517,3.733,570,2.918,607,3.325,608,3.325,609,3.943,610,3.943,611,3.943,612,2.798,613,3.325,614,3.325,615,4.749,616,3.943,617,3.943,618,3.325]],["title/injectables/TaskService.html",[62,0.769,449,1.7]],["body/injectables/TaskService.html",[3,0.1,4,0.1,5,0.088,7,0.1,8,0.528,11,0.028,12,1.085,14,1.428,15,1.201,16,0.549,20,0.247,23,0.1,24,0.024,25,0.607,26,1.949,28,1.428,30,0.01,31,0.008,32,0.005,56,0.436,62,0.458,63,0.504,73,2.606,83,1.22,84,1.069,85,0.621,86,1.22,87,0.436,94,2.737,101,1.1,107,2.303,113,0.716,118,2.114,120,1.1,134,1.534,136,1.669,187,2.552,188,3.099,190,1.551,194,3.595,207,3.051,235,0.86,242,2.841,257,2.608,260,0.86,301,1.686,318,0.86,370,0.699,390,0.543,391,0.86,395,2.391,397,2.552,408,0.77,409,2.073,410,1.48,411,1.582,419,1.686,424,1.686,426,0.98,429,1.686,432,3.672,446,2.849,449,1.012,452,0.86,458,0.77,483,2.595,504,3.672,520,1.686,524,1.686,525,1.686,527,1.686,531,1.686,533,1.686,536,1.686,543,2.315,549,1.686,552,3.672,553,1.686,554,0.98,555,2.22,557,0.98,562,0.98,564,1.48,569,1.686,570,0.86,586,1.686,588,1.686,613,0.98,619,0.98,620,2,621,2,622,2,623,3.127,624,3.127,625,2,626,2,627,2,628,2,629,2,630,1.162,631,3.985,632,2.633,633,2.22,634,1.162,635,2,636,2,637,1.162,638,2,639,1.162,640,1.162,641,1.162,642,2,643,1.162,644,3.851,645,3.247,646,1.162,647,1.162,648,2,649,1.162,650,2,651,1.162,652,1.162,653,1.162,654,2,655,2,656,2,657,2,658,2,659,2.336,660,1.745,661,1.162,662,2,663,1.162,664,1.162,665,3.127,666,3.127,667,1.162,668,2.633,669,1.162,670,2,671,1.686,672,2,673,2.633,674,2.633,675,2,676,2,677,1.162,678,2,679,1.162,680,2,681,1.162,682,0.98,683,0.77,684,0.699,685,1.162,686,1.162,687,1.162,688,2,689,1.162,690,1.162,691,1.162,692,1.162,693,1.162,694,1.162,695,1.162,696,1.162,697,2.637,698,1.162,699,1.162,700,1.162,701,2,702,3.127,703,3.127,704,3.127,705,1.162,706,1.162,707,1.162,708,2,709,1.162,710,1.162,711,1.162,712,1.162,713,1.162,714,1.162,715,1.162,716,1.162,717,1.162,718,0.98,719,1.162,720,1.162,721,1.162,722,2,723,3.127,724,1.162,725,2,726,3.127,727,1.162,728,2,729,1.162,730,1.162,731,2.633,732,2,733,1.162,734,1.162,735,1.162,736,1.162,737,2,738,1.162,739,1.162,740,1.162,741,1.162,742,1.162,743,1.162,744,1.162,745,1.162,746,1.162,747,1.162,748,1.162,749,1.162,750,1.162,751,1.162,752,1.162,753,1.162,754,1.162,755,1.162,756,1.162,757,2.22,758,2.633,759,2.633,760,3.127,761,3.525,762,2,763,1.162,764,2.972,765,2,766,1.162,767,1.162,768,2,769,2,770,2,771,2,772,1.162,773,2,774,1.162,775,1.162,776,1.162,777,1.162,778,1.162,779,1.162,780,1.162,781,1.162,782,2,783,1.162,784,1.162,785,1.162,786,2.633,787,2,788,1.162,789,2,790,2,791,1.162,792,1.162,793,1.162,794,1.162,795,2.633,796,2,797,1.162,798,1.162,799,1.162,800,1.162]],["title/classes/User.html",[24,0.068,113,0.769]],["body/classes/User.html",[3,0.316,4,0.316,5,0.278,7,0.316,10,2.953,11,0.027,12,1.247,15,1.303,16,0.695,23,0.497,24,0.075,30,0.015,31,0.019,32,0.015,56,1.382,84,1.076,85,0.76,113,1.248,134,1.044,188,2.028,193,2.363,266,1.382,270,2.111,332,2.998,344,2.549,360,1.724,374,4.037,387,2.464,388,2.217,389,2.928,390,1.724,411,1.866,483,1.866,612,2.028,683,2.444,684,2.217,764,4.106,801,2.217,802,3.614,803,4.597,804,3.687,805,3.687,806,3.687,807,3.687,808,4.034,809,3.687,810,3.687,811,3.687,812,2.728]],["title/classes/UserDTO.html",[24,0.068,78,1.7]],["body/classes/UserDTO.html",[3,0.341,4,0.341,5,0.3,7,0.341,11,0.027,12,1.248,15,1.36,23,0.341,24,0.081,25,1.555,30,0.016,31,0.02,32,0.016,78,2.591,83,0.912,84,0.786,85,0.75,86,0.912,193,2.678,236,4.51,270,2.219,332,3.398,344,2.889,360,1.862,409,3.959,802,4.096,813,3.358,814,3.982,815,3.982,816,3.982,817,3.982,818,3.982,819,3.982,820,3.982]],["title/controllers/UsersController.html",[0,1.259,821,2.226]],["body/controllers/UsersController.html",[0,1.07,2,1.149,3,0.245,4,0.245,5,0.215,7,0.245,8,1.078,10,2.677,11,0.028,12,1.13,14,1.408,15,0.806,16,0.841,18,1.716,19,1.716,20,0.607,23,0.245,24,0.058,27,1.716,28,1.408,30,0.011,31,0.016,32,0.011,71,1.892,73,2.472,78,3.249,83,1.091,84,0.941,85,0.565,86,1.091,88,3.69,91,2.412,96,2.112,113,1.405,117,3.448,118,1.237,119,2.112,120,2.621,121,1.892,125,1.892,127,1.92,130,1.57,134,1.35,135,3.795,136,2.066,140,3.159,166,1.716,181,2.112,199,3.159,274,1.57,275,1.716,332,2.245,344,1.909,451,3.159,457,3.021,821,2.706,822,2.407,823,4.019,824,4.083,825,5.202,826,5.202,827,5.202,828,4.766,829,2.854,830,4.083,831,2.854,832,2.854,833,2.854,834,4.083,835,2.854,836,4.083,837,2.854,838,2.854,839,2.854,840,2.854,841,2.854,842,2.112,843,2.854,844,2.407,845,2.407,846,2.854,847,2.854,848,2.407,849,2.854,850,2.854,851,2.854,852,2.854,853,4.019,854,2.854,855,2.854,856,2.854,857,2.854,858,2.854]],["title/modules/UsersModule.html",[33,1.456,47,1.847]],["body/modules/UsersModule.html",[2,2.086,3,0.347,4,0.347,5,0.306,11,0.027,16,0.922,20,0.862,23,0.347,24,0.082,30,0.016,31,0.021,32,0.016,33,2.473,35,2.051,36,2.051,37,2.437,38,2.437,39,2.051,40,3.431,41,3.431,47,3.552,48,3.113,49,2.437,50,2.437,52,2.687,55,2.999,56,1.519,127,2.713,336,3.432,343,2.687,387,2.051,612,2.229,614,4.366,615,3.418,618,3.418,821,3.782,845,3.418,859,3.418,860,3.418,861,3.418,862,4.053,863,4.053,864,3.418,865,4.053,866,4.053,867,4.053,868,4.053]],["title/injectables/UsersService.html",[62,0.769,127,1.353]],["body/injectables/UsersService.html",[3,0.209,4,0.209,5,0.184,7,0.209,8,0.96,11,0.028,12,1.164,14,1.418,15,1.164,16,0.772,20,0.518,23,0.209,24,0.05,25,0.739,26,1.232,28,1.418,30,0.01,31,0.014,32,0.01,56,0.913,62,0.832,63,1.055,73,2.671,78,3.255,83,1.32,84,1.138,85,0.684,86,1.32,113,1.239,120,2.392,127,1.464,134,1.589,136,2.347,185,2.69,190,1.752,191,2.053,193,2.237,194,3.608,209,2.053,210,1.802,212,4.067,242,2.9,257,1.802,332,2.838,344,1.139,390,1.139,451,2.883,458,2.409,631,4.067,633,3.065,671,2.053,682,2.053,757,2.053,802,1.614,823,3.065,844,2.053,864,2.053,869,2.053,870,3.635,871,4.824,872,3.635,873,3.635,874,2.435,875,2.435,876,3.635,877,2.435,878,3.635,879,2.435,880,2.435,881,2.435,882,4.35,883,3.635,884,2.435,885,2.435,886,2.435,887,2.435,888,3.635,889,2.435,890,3.635,891,2.435,892,2.435,893,2.435,894,4.824,895,2.435,896,2.435,897,2.435,898,2.435,899,2.435,900,4.824,901,3.635,902,3.635,903,4.824,904,3.635,905,2.435,906,2.435,907,2.435,908,2.435,909,2.435,910,2.435,911,1.464,912,3.635,913,3.635,914,3.635,915,2.435,916,2.435,917,2.435,918,2.435,919,2.435,920,2.435,921,2.435]],["title/coverage.html",[922,3.857]],["body/coverage.html",[0,2.072,1,1.912,5,0.218,6,2.433,11,0.027,21,1.587,24,0.12,30,0.011,31,0.016,32,0.011,39,1.46,62,1.384,64,2.433,69,1.912,70,2.433,78,1.46,85,0.342,102,1.587,107,1.081,113,0.66,115,1.46,123,1.912,127,1.162,158,1.735,159,1.735,167,1.912,176,3.044,190,1.162,211,1.587,266,1.959,267,1.735,269,3.044,272,1.912,274,1.587,275,1.735,276,3.044,303,2.433,326,2.433,328,2.433,335,2.135,336,1.912,338,2.433,346,2.135,361,2.727,393,1.912,395,1.46,396,2.883,398,1.912,414,1.735,416,1.912,417,2.433,422,2.263,449,1.46,453,1.735,455,1.735,517,1.912,518,2.433,522,3.044,612,1.587,619,2.433,659,4.534,660,3.178,684,1.735,801,2.883,813,2.433,821,1.912,822,2.433,842,2.135,869,2.433,922,2.433,923,2.885,924,2.885,925,2.885,926,4.114,927,4.114,928,2.885,929,2.885,930,2.885,931,6.153,932,6.481,933,2.433,934,5.914,935,2.433,936,2.885,937,3.469,938,2.433,939,4.987,940,4.795,941,3.469,942,4.09,943,2.433,944,2.433,945,2.433,946,2.433,947,2.885,948,2.885,949,2.885,950,2.885,951,2.885,952,2.885,953,2.885,954,4.114,955,4.114,956,2.885,957,3.044,958,2.885,959,2.885,960,2.135,961,4.114,962,2.885,963,2.885]],["title/dependencies.html",[36,2.043,964,2.81]],["body/dependencies.html",[11,0.028,20,0.921,24,0.088,30,0.017,31,0.021,32,0.017,36,2.191,56,1.623,102,2.381,124,3.203,162,2.381,166,2.603,210,3.203,310,4.352,311,3.65,343,2.869,390,2.024,471,3.203,965,5.882,966,4.329,967,4.329,968,4.329,969,4.329,970,4.329,971,4.329,972,4.329,973,4.329,974,4.329,975,4.329,976,4.329,977,4.329,978,5.398,979,4.329,980,4.329,981,4.329,982,4.329,983,4.329,984,4.329,985,4.329,986,4.329,987,4.329,988,4.329,989,4.329,990,4.329,991,4.329,992,4.329,993,4.329,994,4.329,995,4.329,996,4.329]],["title/miscellaneous/enumerations.html",[997,1.314,998,3.404]],["body/miscellaneous/enumerations.html",[7,0.435,11,0.026,30,0.02,31,0.024,32,0.02,113,1.36,344,2.779,997,2.373,998,4.279,999,5.074,1000,5.074,1001,5.313,1002,5.942,1003,5.942]],["title/miscellaneous/functions.html",[997,1.314,1004,3.404]],["body/miscellaneous/functions.html",[7,0.277,11,0.026,14,1.417,28,0.795,30,0.013,31,0.018,32,0.013,39,2.579,66,2.39,82,3.465,83,1.364,84,1.176,85,0.652,86,1.364,87,2.233,91,1.635,107,2.059,113,0.739,114,2.449,199,3.641,251,2.39,267,2.678,366,5.024,411,2.254,422,3.021,442,2.724,470,3.296,483,2.254,491,3.378,522,4.408,538,4.728,541,4.065,542,4.984,544,5.245,545,3.772,659,2.952,660,2.952,848,4.298,938,2.724,939,2.724,941,2.724,942,2.39,943,3.756,944,3.756,997,1.511,1004,2.724,1005,3.231,1006,4.633,1007,4.454,1008,3.231,1009,2.724,1010,3.231,1011,5.494,1012,3.756,1013,4.298,1014,3.231,1015,3.231,1016,5.097,1017,4.454,1018,4.454,1019,3.231,1020,4.454,1021,4.454,1022,4.454,1023,4.454]],["title/index.html",[7,0.241,697,2.369,1024,2.81]],["body/index.html",[11,0.023,30,0.02,31,0.023,32,0.02,113,1.147,718,4.225,1009,4.973,1025,5.01,1026,5.898,1027,5.01,1028,6.268,1029,5.01,1030,5.01,1031,5.01,1032,5.01,1033,5.01,1034,5.01,1035,5.01,1036,5.01,1037,5.01,1038,5.01,1039,5.01,1040,5.01]],["title/modules.html",[35,2.315]],["body/modules.html",[11,0.023,30,0.02,31,0.023,32,0.02,34,3.342,35,2.551,45,3.031,46,3.031,47,2.773,494,5.468,1041,6.484,1042,6.484,1043,6.484]],["title/classes/moodleSessions.html",[24,0.068,211,1.847]],["body/classes/moodleSessions.html",[3,0.233,4,0.233,5,0.205,7,0.233,8,1.041,11,0.028,12,1.147,14,1.385,15,1.197,23,0.233,24,0.055,25,1.408,26,3.011,28,0.969,30,0.011,31,0.016,32,0.011,72,2.612,83,1.061,84,0.915,85,0.64,86,1.061,87,1.906,92,2.167,101,2.969,102,2.797,104,3.178,113,0.622,114,2.167,118,2.204,190,1.587,211,3.097,236,4.082,251,2.916,252,3.579,270,1.708,360,1.271,543,2.369,564,4.167,808,3.763,911,1.634,935,2.292,1012,2.292,1013,3.323,1044,2.718,1045,2.718,1046,2.718,1047,5.631,1048,5.399,1049,3.941,1050,4.637,1051,3.941,1052,3.941,1053,3.941,1054,2.718,1055,3.941,1056,2.718,1057,3.941,1058,5.086,1059,6.502,1060,3.941,1061,3.323,1062,2.718,1063,3.941,1064,3.941,1065,3.941,1066,2.718,1067,3.941,1068,3.941,1069,2.718,1070,3.941,1071,3.941,1072,2.718,1073,2.718,1074,2.718,1075,3.941,1076,2.718,1077,2.718,1078,2.718]],["title/classes/moodleSubmitHelper.html",[24,0.068,455,2.019]],["body/classes/moodleSubmitHelper.html",[3,0.335,4,0.335,5,0.295,7,0.335,8,1.335,11,0.027,12,0.998,14,0.96,23,0.335,24,0.079,25,1.702,28,1.243,30,0.015,31,0.02,32,0.015,68,2.588,83,0.894,84,0.771,85,0.463,86,0.894,87,1.463,94,2.347,101,3.377,104,2.994,118,2.191,236,3.716,240,3.74,241,4.262,242,3.37,243,4.262,360,1.826,411,2.558,422,2.78,455,3.039,483,2.837,543,3.039,659,3.716,660,3.35,911,2.347,946,3.292,1061,3.292,1079,5.055,1080,3.904,1081,3.904,1082,6.559,1083,3.904,1084,5.055,1085,3.904,1086,3.904,1087,3.904,1088,3.292,1089,3.904,1090,3.904,1091,3.904,1092,3.904,1093,3.904]],["title/overview.html",[1094,3.857]],["body/overview.html",[2,1.596,11,0.027,21,3.105,30,0.016,31,0.02,32,0.016,33,1.718,34,4.395,35,2.005,36,2.005,37,2.382,38,2.382,39,2.005,40,2.382,41,2.382,42,3.341,43,3.341,44,3.341,45,4.037,46,3.709,47,3.534,48,3.068,49,2.382,50,2.382,63,1.718,115,3.251,127,2.588,154,3.341,155,3.341,157,3.341,158,3.394,159,3.394,268,2.382,335,2.932,360,1.853,449,2.857,607,3.341,608,3.341,859,3.341,860,3.341,861,3.341,1088,3.341,1094,3.341,1095,5.104,1096,3.963,1097,3.963,1098,3.963]],["title/interfaces/taskAndNote.html",[266,1.259,684,2.019]],["body/interfaces/taskAndNote.html",[3,0.363,4,0.363,5,0.32,7,0.363,11,0.027,15,1.302,16,0.76,23,0.524,24,0.086,30,0.017,31,0.021,32,0.017,56,1.588,84,0.836,85,0.691,113,1.219,134,1.2,188,3.361,193,1.836,266,1.588,268,2.547,270,2.308,332,2.33,344,1.981,374,3.922,387,2.695,388,2.547,389,3.202,390,1.981,411,2.947,483,3.092,612,2.33,683,2.808,684,3.202,801,2.547,802,2.808,803,3.573,808,3.135,812,3.135]],["title/classes/taskRunner.html",[24,0.068,453,2.019]],["body/classes/taskRunner.html",[3,0.223,4,0.223,5,0.342,7,0.223,8,1.009,11,0.028,12,0.984,14,1.447,15,0.755,16,0.646,23,0.223,24,0.053,25,1.375,26,2.291,28,1.365,30,0.023,31,0.015,32,0.01,60,1.929,66,2.829,73,2.417,82,3.336,83,1.036,84,1.048,85,0.537,86,1.036,87,1.697,107,2.287,114,3.052,118,2.301,134,1.572,136,1.657,192,3.223,194,2.298,207,4.44,242,2.298,360,1.219,368,4.204,369,4.477,422,2.102,453,2.298,491,2.534,497,3.689,526,3.223,538,4.514,541,2.829,542,3.689,543,2.298,545,4.896,645,4.204,853,2.198,911,1.567,957,1.929,960,1.929,1099,3.823,1100,3.823,1101,2.606,1102,2.606,1103,2.606,1104,3.823,1105,3.823,1106,3.823,1107,2.606,1108,2.606,1109,3.823,1110,6.255,1111,4.986,1112,2.606,1113,2.606,1114,3.223,1115,2.606,1116,3.823,1117,3.823,1118,2.606,1119,2.606,1120,2.606,1121,3.823,1122,3.823,1123,3.823,1124,3.823,1125,2.606,1126,2.606,1127,2.606,1128,3.823,1129,2.606,1130,2.606,1131,2.606,1132,2.606,1133,2.606,1134,2.606,1135,2.606,1136,2.606,1137,2.606,1138,2.606,1139,2.606]],["title/miscellaneous/typealiases.html",[997,1.314,1140,4.037]],["body/miscellaneous/typealiases.html",[7,0.439,11,0.024,30,0.02,31,0.024,32,0.02,85,0.608,361,3.396,391,4.421,396,3.08,408,3.961,683,3.961,801,3.08,997,2.396,1141,5.123,1142,4.32,1143,4.32,1144,4.32]],["title/miscellaneous/variables.html",[997,1.314,1145,3.404]],["body/miscellaneous/variables.html",[7,0.35,11,0.027,15,1.13,30,0.016,31,0.021,32,0.016,85,0.679,102,3.149,167,3.449,171,3.022,176,3.022,213,3.444,344,1.91,346,3.85,361,2.707,393,3.449,394,3.444,396,2.456,414,3.129,415,3.022,612,2.862,801,2.456,812,3.022,842,4.608,911,3.976,933,3.444,937,3.444,942,3.022,945,4.388,957,3.022,960,3.85,997,1.91,1001,5.576,1006,3.444,1114,3.444,1142,3.444,1143,3.444,1144,3.444,1145,3.444,1146,4.085,1147,4.085,1148,4.085,1149,5.204,1150,4.085,1151,4.085,1152,4.085,1153,4.085,1154,4.085]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"overview.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":659,"title":{},"body":{"injectables/TaskService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"classes/moodleSubmitHelper.html":{}}}],["0.1.13",{"_index":991,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":976,"title":{},"body":{"dependencies.html":{}}}],["0.21.1",{"_index":973,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":986,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":967,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":932,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":955,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":951,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":926,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":934,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":956,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":961,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":954,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":1088,"title":{},"body":{"classes/moodleSubmitHelper.html":{},"overview.html":{}}}],["1,string.lastindexof",{"_index":1151,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":988,"title":{},"body":{"dependencies.html":{}}}],["1.3.3",{"_index":985,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":940,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":948,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":902,"title":{},"body":{"injectables/UsersService.html":{}}}],["100",{"_index":660,"title":{},"body":{"injectables/TaskService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"classes/moodleSubmitHelper.html":{}}}],["2",{"_index":713,"title":{},"body":{"injectables/TaskService.html":{}}}],["2.0.2",{"_index":996,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":974,"title":{},"body":{"dependencies.html":{}}}],["2/4",{"_index":928,"title":{},"body":{"coverage.html":{}}}],["2/5",{"_index":959,"title":{},"body":{"coverage.html":{}}}],["27",{"_index":952,"title":{},"body":{"coverage.html":{}}}],["3.0.2",{"_index":978,"title":{},"body":{"dependencies.html":{}}}],["3.0.3",{"_index":982,"title":{},"body":{"dependencies.html":{}}}],["33",{"_index":947,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1095,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":987,"title":{},"body":{"dependencies.html":{}}}],["4.17.21",{"_index":980,"title":{},"body":{"dependencies.html":{}}}],["4/6",{"_index":930,"title":{},"body":{"coverage.html":{}}}],["4/8",{"_index":936,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":958,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":1096,"title":{},"body":{"overview.html":{}}}],["5.12.2",{"_index":983,"title":{},"body":{"dependencies.html":{}}}],["5/18",{"_index":953,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":927,"title":{},"body":{"coverage.html":{}}}],["6.6.6",{"_index":994,"title":{},"body":{"dependencies.html":{}}}],["6000s",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{}}}],["66",{"_index":929,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1098,"title":{},"body":{"overview.html":{}}}],["7.1.5",{"_index":970,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":968,"title":{},"body":{"dependencies.html":{}}}],["7.2.4",{"_index":969,"title":{},"body":{"dependencies.html":{}}}],["7.6.15",{"_index":965,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1097,"title":{},"body":{"overview.html":{}}}],["8/10",{"_index":950,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":949,"title":{},"body":{"coverage.html":{}}}],["9a",{"_index":702,"title":{},"body":{"injectables/TaskService.html":{}}}],["_id",{"_index":409,"title":{},"body":{"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{},"classes/UserDTO.html":{}}}],["ablaufen",{"_index":321,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["access",{"_index":564,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/moodleSessions.html":{}}}],["access_token",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["add",{"_index":289,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["added",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["adds",{"_index":1057,"title":{},"body":{"classes/moodleSessions.html":{}}}],["addsession",{"_index":1049,"title":{},"body":{"classes/moodleSessions.html":{}}}],["addsession(key",{"_index":1055,"title":{},"body":{"classes/moodleSessions.html":{}}}],["admin",{"_index":1003,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["aliases",{"_index":1141,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["als",{"_index":583,"title":{},"body":{"controllers/TaskController.html":{}}}],["any):promise",{"_index":719,"title":{},"body":{"injectables/TaskService.html":{}}}],["app.controller",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":614,"title":{},"body":{"modules/TaskModule.html":{},"modules/UsersModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":34,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":21,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["archievedpoints",{"_index":771,"title":{},"body":{"injectables/TaskService.html":{}}}],["archievedpoints/totalpoints",{"_index":777,"title":{},"body":{"injectables/TaskService.html":{}}}],["arguments",{"_index":302,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["array",{"_index":536,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["arrays",{"_index":714,"title":{},"body":{"injectables/TaskService.html":{}}}],["async",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/taskRunner.html":{}}}],["auch",{"_index":751,"title":{},"body":{"injectables/TaskService.html":{}}}],["aus",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["ausprobieren",{"_index":472,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["auth",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"classes/moodleSessions.html":{}}}],["auth.controller",{"_index":164,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":276,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:10",{"_index":281,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:16",{"_index":284,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/moodlesessions",{"_index":454,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["authcontroller",{"_index":69,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":291,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard",{"_index":286,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":288,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":327,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":45,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authservice",{"_index":115,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authtoken",{"_index":480,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["await",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/taskRunner.html":{}}}],["axios",{"_index":471,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"dependencies.html":{}}}],["backend",{"_index":66,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/functions.html":{},"classes/taskRunner.html":{}}}],["based",{"_index":301,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/TaskService.html":{}}}],["basic",{"_index":470,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"miscellaneous/functions.html":{}}}],["bcrypt",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["bcrypt.compare(pass,dbpassword",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(password,saltrounds",{"_index":904,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcryptjs",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["beim",{"_index":465,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["berbleibsel",{"_index":584,"title":{},"body":{"controllers/TaskController.html":{}}}],["berblick",{"_index":1040,"title":{},"body":{"index.html":{}}}],["bermittelte",{"_index":466,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["body",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1043,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1041,"title":{},"body":{"modules.html":{}}}],["buildarchitektur",{"_index":1036,"title":{},"body":{"index.html":{}}}],["calculates",{"_index":654,"title":{},"body":{"injectables/TaskService.html":{}}}],["call",{"_index":295,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["canactivate",{"_index":277,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":279,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["change",{"_index":905,"title":{},"body":{"injectables/UsersService.html":{}}}],["changed",{"_index":853,"title":{},"body":{"controllers/UsersController.html":{},"classes/taskRunner.html":{}}}],["changepassword",{"_index":823,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["changepassword(res",{"_index":829,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword(userdto",{"_index":876,"title":{},"body":{"injectables/UsersService.html":{}}}],["check",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["class",{"_index":24,"title":{"classes/Task.html":{},"classes/TaskCollection.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{}}}],["classes",{"_index":360,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"overview.html":{},"classes/taskRunner.html":{}}}],["clean",{"_index":673,"title":{},"body":{"injectables/TaskService.html":{}}}],["cleanup",{"_index":748,"title":{},"body":{"injectables/TaskService.html":{}}}],["client",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["closed",{"_index":1016,"title":{},"body":{"miscellaneous/functions.html":{}}}],["closedtests",{"_index":362,"title":{},"body":{"classes/Task.html":{}}}],["cluster_appmodule",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":154,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":155,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":157,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_taskmodule",{"_index":607,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["cluster_taskmodule_providers",{"_index":608,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":859,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":861,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":860,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["codingtests",{"_index":943,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["codingtests(inputparams",{"_index":1010,"title":{},"body":{"miscellaneous/functions.html":{}}}],["colelction",{"_index":670,"title":{},"body":{"injectables/TaskService.html":{}}}],["collection",{"_index":504,"title":{},"body":{"controllers/TaskCollectionController.html":{},"injectables/TaskService.html":{}}}],["collection\",taskdto",{"_index":746,"title":{},"body":{"injectables/TaskService.html":{}}}],["collection:\",taskcollectiondto",{"_index":693,"title":{},"body":{"injectables/TaskService.html":{}}}],["collections",{"_index":552,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["config",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["config.json",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/taskRunner.html":{}}}],["config.moodle_consumer_secret",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(\"[log",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["console.log(data.user",{"_index":855,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(err",{"_index":1093,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["console.log(jwtservice.decode(token",{"_index":356,"title":{},"body":{"guards/RolesGuard.html":{}}}],["console.log(this.jwtservice.decode",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(token",{"_index":355,"title":{},"body":{"guards/RolesGuard.html":{}}}],["console.log(user",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(userdto",{"_index":894,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(validateduser",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{}}}],["constants",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["construct",{"_index":1045,"title":{},"body":{"classes/moodleSessions.html":{}}}],["constructor",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{},"classes/UserDTO.html":{},"injectables/UsersService.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["constructor(@injectmodel('user",{"_index":893,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(_id",{"_index":814,"title":{},"body":{"classes/UserDTO.html":{}}}],["constructor(authservice",{"_index":329,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(private",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":339,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(taskmodel",{"_index":630,"title":{},"body":{"injectables/TaskService.html":{}}}],["constructor(title",{"_index":372,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{}}}],["constructor(usermodel",{"_index":874,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["content",{"_index":363,"title":{},"body":{"classes/Task.html":{}}}],["context",{"_index":282,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":352,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":351,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":357,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest().headers.authorization",{"_index":354,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('task",{"_index":571,"title":{},"body":{"controllers/TaskController.html":{}}}],["controller('taskcollection",{"_index":456,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["controller('user",{"_index":846,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["course",{"_index":364,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{}}}],["coverage",{"_index":922,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TaskController.html":{},"injectables/UsersService.html":{}}}],["create(userdto",{"_index":878,"title":{},"body":{"injectables/UsersService.html":{}}}],["createcollection",{"_index":620,"title":{},"body":{"injectables/TaskService.html":{}}}],["createcollection(taskcollectiondto",{"_index":636,"title":{},"body":{"injectables/TaskService.html":{}}}],["created",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"miscellaneous/functions.html":{},"classes/moodleSessions.html":{},"classes/taskRunner.html":{}}}],["createdplugin",{"_index":1020,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createdtask",{"_index":690,"title":{},"body":{"injectables/TaskService.html":{}}}],["createdtask.save",{"_index":692,"title":{},"body":{"injectables/TaskService.html":{}}}],["createdtaskcollection",{"_index":694,"title":{},"body":{"injectables/TaskService.html":{}}}],["createdtaskcollection.save",{"_index":696,"title":{},"body":{"injectables/TaskService.html":{}}}],["createduser",{"_index":912,"title":{},"body":{"injectables/UsersService.html":{}}}],["createduser.save",{"_index":914,"title":{},"body":{"injectables/UsersService.html":{}}}],["createmoodleuser",{"_index":870,"title":{},"body":{"injectables/UsersService.html":{}}}],["createmoodleuser(mail",{"_index":880,"title":{},"body":{"injectables/UsersService.html":{}}}],["createmoodleuser(mail:string,username:string",{"_index":915,"title":{},"body":{"injectables/UsersService.html":{}}}],["createnewtask",{"_index":519,"title":{},"body":{"controllers/TaskController.html":{}}}],["createnewtask(@res",{"_index":572,"title":{},"body":{"controllers/TaskController.html":{}}}],["createnewtask(res",{"_index":528,"title":{},"body":{"controllers/TaskController.html":{}}}],["createnewtaskcollection",{"_index":418,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["createnewtaskcollection(@res",{"_index":473,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["createnewtaskcollection(res",{"_index":425,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["creates",{"_index":530,"title":{},"body":{"controllers/TaskController.html":{}}}],["createtask",{"_index":621,"title":{},"body":{"injectables/TaskService.html":{}}}],["createtask(taskdto",{"_index":638,"title":{},"body":{"injectables/TaskService.html":{}}}],["creating",{"_index":688,"title":{},"body":{"injectables/TaskService.html":{}}}],["creator",{"_index":365,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{}}}],["custom",{"_index":290,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["dann",{"_index":589,"title":{},"body":{"controllers/TaskController.html":{}}}],["das",{"_index":464,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["data",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["data:\",input",{"_index":1121,"title":{},"body":{"classes/taskRunner.html":{}}}],["database",{"_index":675,"title":{},"body":{"injectables/TaskService.html":{}}}],["dataforplugin",{"_index":366,"title":{},"body":{"classes/Task.html":{},"miscellaneous/functions.html":{}}}],["dataforplugin:any",{"_index":392,"title":{},"body":{"classes/Task.html":{}}}],["date",{"_index":367,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{}}}],["dbpassword",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["declarations",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":911,"title":{},"body":{"injectables/UsersService.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["delete",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete(':id",{"_index":430,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["delete(userdto",{"_index":883,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleted",{"_index":516,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["deletes",{"_index":533,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["deletetask",{"_index":520,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["deletetask(@param('id",{"_index":597,"title":{},"body":{"controllers/TaskController.html":{}}}],["deletetask(taskid",{"_index":531,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["deletetaskcollection",{"_index":419,"title":{},"body":{"controllers/TaskCollectionController.html":{},"injectables/TaskService.html":{}}}],["deletetaskcollection(@param('id",{"_index":514,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["deletetaskcollection(taskcollectionid",{"_index":429,"title":{},"body":{"controllers/TaskCollectionController.html":{},"injectables/TaskService.html":{}}}],["deletetasksincollection",{"_index":622,"title":{},"body":{"injectables/TaskService.html":{}}}],["deletetasksincollection(taskid",{"_index":642,"title":{},"body":{"injectables/TaskService.html":{}}}],["deleteuser",{"_index":824,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser(@res",{"_index":854,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser(res",{"_index":832,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletion",{"_index":534,"title":{},"body":{"controllers/TaskController.html":{}}}],["dem",{"_index":463,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["den",{"_index":749,"title":{},"body":{"injectables/TaskService.html":{}}}],["dependencies",{"_index":36,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{},"miscellaneous/functions.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["dev",{"_index":1025,"title":{},"body":{"index.html":{}}}],["developer",{"_index":1111,"title":{},"body":{"classes/taskRunner.html":{}}}],["development",{"_index":1032,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1117,"title":{},"body":{"classes/taskRunner.html":{}}}],["document",{"_index":389,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"classes/User.html":{},"interfaces/taskAndNote.html":{}}}],["documentation",{"_index":923,"title":{},"body":{"coverage.html":{}}}],["doesnt",{"_index":1105,"title":{},"body":{"classes/taskRunner.html":{}}}],["doku",{"_index":1026,"title":{},"body":{"index.html":{}}}],["dozent",{"_index":1002,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["email",{"_index":802,"title":{},"body":{"classes/User.html":{},"classes/UserDTO.html":{},"injectables/UsersService.html":{},"interfaces/taskAndNote.html":{}}}],["email':userdto.email",{"_index":896,"title":{},"body":{"injectables/UsersService.html":{}}}],["embedded",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["enumerations",{"_index":998,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["erhalte",{"_index":590,"title":{},"body":{"controllers/TaskController.html":{}}}],["err",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"classes/moodleSubmitHelper.html":{}}}],["error",{"_index":496,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["erstmal",{"_index":910,"title":{},"body":{"injectables/UsersService.html":{}}}],["establish",{"_index":297,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["evaluation",{"_index":1019,"title":{},"body":{"miscellaneous/functions.html":{}}}],["example",{"_index":294,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["exception",{"_index":300,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["executioncontext",{"_index":280,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["exist",{"_index":1106,"title":{},"body":{"classes/taskRunner.html":{}}}],["exists",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"classes/taskRunner.html":{}}}],["expected",{"_index":1022,"title":{},"body":{"miscellaneous/functions.html":{}}}],["expects",{"_index":1087,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["expiresin",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{}}}],["exports",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":972,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":287,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["extractjwt",{"_index":308,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":316,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["f]{24",{"_index":704,"title":{},"body":{"injectables/TaskService.html":{}}}],["fa",{"_index":703,"title":{},"body":{"injectables/TaskService.html":{}}}],["false",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"injectables/TaskService.html":{}}}],["feedback",{"_index":491,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"miscellaneous/functions.html":{},"classes/taskRunner.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{}}}],["filter",{"_index":800,"title":{},"body":{"injectables/TaskService.html":{}}}],["findall",{"_index":871,"title":{},"body":{"injectables/UsersService.html":{}}}],["findalltaskcollections",{"_index":623,"title":{},"body":{"injectables/TaskService.html":{}}}],["findalltasks",{"_index":624,"title":{},"body":{"injectables/TaskService.html":{}}}],["finding",{"_index":727,"title":{},"body":{"injectables/TaskService.html":{}}}],["findmoodleuser",{"_index":872,"title":{},"body":{"injectables/UsersService.html":{}}}],["findmoodleuser(mail",{"_index":886,"title":{},"body":{"injectables/UsersService.html":{}}}],["findmoodleuser(mail:string",{"_index":917,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone",{"_index":873,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(username",{"_index":888,"title":{},"body":{"injectables/UsersService.html":{}}}],["fixme",{"_index":322,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["format",{"_index":1013,"title":{},"body":{"miscellaneous/functions.html":{},"classes/moodleSessions.html":{}}}],["found",{"_index":497,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"classes/taskRunner.html":{}}}],["frontend",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"miscellaneous/functions.html":{},"classes/taskRunner.html":{}}}],["fullscreen",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["function",{"_index":939,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":1004,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["funktioniert",{"_index":459,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["future",{"_index":493,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["gefundene",{"_index":594,"title":{},"body":{"controllers/TaskController.html":{}}}],["get('/gettaskcollections/:id",{"_index":550,"title":{},"body":{"controllers/TaskController.html":{}}}],["get('/getusers",{"_index":834,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/testuser",{"_index":836,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id",{"_index":435,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["getalltaskcollections",{"_index":420,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["getalltasks",{"_index":521,"title":{},"body":{"controllers/TaskController.html":{}}}],["getallusers",{"_index":825,"title":{},"body":{"controllers/UsersController.html":{}}}],["getbody",{"_index":945,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getinstance",{"_index":1050,"title":{},"body":{"classes/moodleSessions.html":{}}}],["getinstance():moodlesessions",{"_index":1073,"title":{},"body":{"classes/moodleSessions.html":{}}}],["getnote",{"_index":944,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getnote(inputparams",{"_index":1015,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getopentests",{"_index":522,"title":{},"body":{"controllers/TaskController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getopentests(data",{"_index":1017,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getopentests(taskid",{"_index":537,"title":{},"body":{"controllers/TaskController.html":{}}}],["getplugin",{"_index":1099,"title":{},"body":{"classes/taskRunner.html":{}}}],["getplugin(plugincode",{"_index":1102,"title":{},"body":{"classes/taskRunner.html":{}}}],["getplugin(plugincode:string",{"_index":1130,"title":{},"body":{"classes/taskRunner.html":{}}}],["gets",{"_index":1067,"title":{},"body":{"classes/moodleSessions.html":{}}}],["getsession",{"_index":1051,"title":{},"body":{"classes/moodleSessions.html":{}}}],["getsession(key",{"_index":1065,"title":{},"body":{"classes/moodleSessions.html":{}}}],["getsingletask",{"_index":625,"title":{},"body":{"injectables/TaskService.html":{}}}],["getsingletask(taskid",{"_index":648,"title":{},"body":{"injectables/TaskService.html":{}}}],["getsingletaskcollection",{"_index":626,"title":{},"body":{"injectables/TaskService.html":{}}}],["getsingletaskcollection(taskcollectionid",{"_index":650,"title":{},"body":{"injectables/TaskService.html":{}}}],["getstatus",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gettask",{"_index":523,"title":{},"body":{"controllers/TaskController.html":{}}}],["gettask(@param('id",{"_index":577,"title":{},"body":{"controllers/TaskController.html":{}}}],["gettask(taskid",{"_index":546,"title":{},"body":{"controllers/TaskController.html":{}}}],["gettaskcollection",{"_index":421,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["gettaskcollection(@param('id",{"_index":505,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["gettaskcollection(taskcollectionid",{"_index":434,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["gettaskcollectionnote",{"_index":627,"title":{},"body":{"injectables/TaskService.html":{}}}],["gettaskcollectionnote(usermail",{"_index":652,"title":{},"body":{"injectables/TaskService.html":{}}}],["gettaskcollectionnote(usermail:string,taskcollectionid:string):promise",{"_index":756,"title":{},"body":{"injectables/TaskService.html":{}}}],["gettaskcollectionsfortask",{"_index":524,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["gettaskcollectionsfortask(@param('id",{"_index":575,"title":{},"body":{"controllers/TaskController.html":{}}}],["gettaskcollectionsfortask(taskid",{"_index":549,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["gettestuser",{"_index":826,"title":{},"body":{"controllers/UsersController.html":{}}}],["getting",{"_index":697,"title":{"index.html":{}},"body":{"injectables/TaskService.html":{}}}],["getuser",{"_index":827,"title":{},"body":{"controllers/UsersController.html":{}}}],["given",{"_index":543,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["grade",{"_index":1082,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["guard",{"_index":335,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":337,"title":{},"body":{"guards/RolesGuard.html":{}}}],["handlerequest",{"_index":278,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(err",{"_index":283,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["hashedpassword",{"_index":903,"title":{},"body":{"injectables/UsersService.html":{}}}],["headers",{"_index":438,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["headers.authorization",{"_index":481,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["help",{"_index":644,"title":{},"body":{"injectables/TaskService.html":{}}}],["here",{"_index":293,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["hier",{"_index":585,"title":{},"body":{"controllers/TaskController.html":{}}}],["hot",{"_index":1030,"title":{},"body":{"index.html":{}}}],["https://stackoverflow.com/questions/44072750/how",{"_index":468,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["httpstatus",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["id",{"_index":562,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["id:\",taskcollectionid",{"_index":707,"title":{},"body":{"injectables/TaskService.html":{}}}],["id:\",taskid",{"_index":700,"title":{},"body":{"injectables/TaskService.html":{}}}],["identifier",{"_index":924,"title":{},"body":{"coverage.html":{}}}],["if(!(task._id.tostring",{"_index":738,"title":{},"body":{"injectables/TaskService.html":{}}}],["if(!moodlesessions.instance",{"_index":1074,"title":{},"body":{"classes/moodleSessions.html":{}}}],["if(!moodleuser",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["if(!session.outcome_service",{"_index":1090,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["if(!taskalreadysubmittedflag",{"_index":785,"title":{},"body":{"injectables/TaskService.html":{}}}],["if(await",{"_index":510,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["if(matching",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["if(moodleuser",{"_index":759,"title":{},"body":{"injectables/TaskService.html":{}}}],["if(moodleuser.solvedtasksorcollections",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["if(note",{"_index":501,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["if(plugin",{"_index":1123,"title":{},"body":{"classes/taskRunner.html":{}}}],["if(plugin.name",{"_index":1134,"title":{},"body":{"classes/taskRunner.html":{}}}],["if(provider.body.custom_taskid",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["if(returnobj",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["if(runnedtests",{"_index":601,"title":{},"body":{"controllers/TaskController.html":{}}}],["if(session",{"_index":486,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["if(solved",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["if(solvedtask.taskid",{"_index":775,"title":{},"body":{"injectables/TaskService.html":{}}}],["if(solvedtasksincollection",{"_index":792,"title":{},"body":{"injectables/TaskService.html":{}}}],["if(solvedtasksincollectionmap",{"_index":762,"title":{},"body":{"injectables/TaskService.html":{}}}],["if(solvedtasksincollectionmap.has(taskcollectionid",{"_index":781,"title":{},"body":{"injectables/TaskService.html":{}}}],["if(submittedtask.taskid",{"_index":784,"title":{},"body":{"injectables/TaskService.html":{}}}],["if(task",{"_index":479,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["if(task._id",{"_index":733,"title":{},"body":{"injectables/TaskService.html":{}}}],["if(tasks.length",{"_index":741,"title":{},"body":{"injectables/TaskService.html":{}}}],["if(taskssolvedmap",{"_index":797,"title":{},"body":{"injectables/TaskService.html":{}}}],["ifeedback",{"_index":267,"title":{"interfaces/IFeedback.html":{}},"body":{"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["ignoreexpiration",{"_index":317,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["im",{"_index":1039,"title":{},"body":{"index.html":{}}}],["implements",{"_index":348,"title":{},"body":{"guards/RolesGuard.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{}}}],["import(pathtofile",{"_index":1139,"title":{},"body":{"classes/taskRunner.html":{}}}],["imports",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{}}}],["ims",{"_index":977,"title":{},"body":{"dependencies.html":{}}}],["include",{"_index":662,"title":{},"body":{"injectables/TaskService.html":{}}}],["includes",{"_index":563,"title":{},"body":{"controllers/TaskController.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{}}}],["initiate",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["initiated:\",provider",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectable",{"_index":62,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":63,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":682,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["injectmodel('task",{"_index":685,"title":{},"body":{"injectables/TaskService.html":{}}}],["injectmodel('taskcollection",{"_index":686,"title":{},"body":{"injectables/TaskService.html":{}}}],["injectmodel('user",{"_index":687,"title":{},"body":{"injectables/TaskService.html":{}}}],["input",{"_index":538,"title":{},"body":{"controllers/TaskController.html":{},"miscellaneous/functions.html":{},"classes/taskRunner.html":{}}}],["inputparams",{"_index":1011,"title":{},"body":{"miscellaneous/functions.html":{}}}],["installcompiles",{"_index":1029,"title":{},"body":{"index.html":{}}}],["instance",{"_index":1048,"title":{},"body":{"classes/moodleSessions.html":{}}}],["interface",{"_index":266,"title":{"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"interfaces/TaskInCollection.html":{},"interfaces/taskAndNote.html":{}},"body":{"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"classes/User.html":{},"coverage.html":{},"interfaces/taskAndNote.html":{}}}],["interfaces",{"_index":268,"title":{},"body":{"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"interfaces/TaskInCollection.html":{},"overview.html":{},"interfaces/taskAndNote.html":{}}}],["internal",{"_index":565,"title":{},"body":{"controllers/TaskController.html":{}}}],["invalid",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"classes/moodleSubmitHelper.html":{}}}],["ist",{"_index":580,"title":{},"body":{"controllers/TaskController.html":{}}}],["isvalid",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"classes/moodleSubmitHelper.html":{}}}],["itestresult",{"_index":272,"title":{"interfaces/ITestResult.html":{}},"body":{"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"coverage.html":{}}}],["json",{"_index":1060,"title":{},"body":{"classes/moodleSessions.html":{}}}],["jwt",{"_index":311,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":274,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtconstants",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":315,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":165,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["jwtservice(null",{"_index":353,"title":{},"body":{"guards/RolesGuard.html":{}}}],["jwtstrategy",{"_index":158,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kann",{"_index":319,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["key",{"_index":1059,"title":{},"body":{"classes/moodleSessions.html":{}}}],["korrekt",{"_index":582,"title":{},"body":{"controllers/TaskController.html":{}}}],["legend",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["local",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{}}}],["localauthguard",{"_index":123,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":159,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["lodash",{"_index":979,"title":{},"body":{"dependencies.html":{}}}],["lodash.isnumber",{"_index":981,"title":{},"body":{"dependencies.html":{}}}],["logged",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["logic",{"_index":292,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["login",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["login(@res",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(res",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginmoodleuserandgettask",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginmoodleuserandgettask(username",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginmoodleuserandgettask(username,usermail,taskid):promise",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["lti",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"coverage.html":{},"dependencies.html":{},"classes/moodleSessions.html":{},"miscellaneous/variables.html":{}}}],["lti.provider(config.moodle_consumer_key",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["ltisessioninitiate",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["ltisessioninitiate(request",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["ltisessioninitiate(request):promise",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["löschen",{"_index":752,"title":{},"body":{"injectables/TaskService.html":{}}}],["mail",{"_index":882,"title":{},"body":{"injectables/UsersService.html":{}}}],["mail}).exec",{"_index":918,"title":{},"body":{"injectables/UsersService.html":{}}}],["main",{"_index":1008,"title":{},"body":{"miscellaneous/functions.html":{}}}],["man",{"_index":460,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["manager",{"_index":1058,"title":{},"body":{"classes/moodleSessions.html":{}}}],["managment",{"_index":1063,"title":{},"body":{"classes/moodleSessions.html":{}}}],["map",{"_index":808,"title":{},"body":{"classes/User.html":{},"classes/moodleSessions.html":{},"interfaces/taskAndNote.html":{}}}],["map([[taskcollectionid,solvedtasksincollection",{"_index":788,"title":{},"body":{"injectables/TaskService.html":{}}}],["map([[taskorcollectionid,note",{"_index":799,"title":{},"body":{"injectables/TaskService.html":{}}}],["mark",{"_index":665,"title":{},"body":{"injectables/TaskService.html":{}}}],["marktaskincollectionassubmitted",{"_index":628,"title":{},"body":{"injectables/TaskService.html":{}}}],["marktaskincollectionassubmitted(usermail",{"_index":663,"title":{},"body":{"injectables/TaskService.html":{}}}],["marktaskincollectionassubmitted(usermail:string,taskcollectionid:string,taskid:string,note:number):promise",{"_index":778,"title":{},"body":{"injectables/TaskService.html":{}}}],["marktaskorcollectionassubmitted",{"_index":629,"title":{},"body":{"injectables/TaskService.html":{}}}],["marktaskorcollectionassubmitted(usermail",{"_index":667,"title":{},"body":{"injectables/TaskService.html":{}}}],["marktaskorcollectionassubmitted(usermail:string,taskorcollectionid:string,note:number):promise",{"_index":791,"title":{},"body":{"injectables/TaskService.html":{}}}],["match",{"_index":1104,"title":{},"body":{"classes/taskRunner.html":{}}}],["matching",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"overview.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["message:\"task",{"_index":508,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["metadata",{"_index":990,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":645,"title":{},"body":{"injectables/TaskService.html":{},"classes/taskRunner.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["minifies",{"_index":1034,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":997,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":712,"title":{},"body":{"injectables/TaskService.html":{}}}],["mitschicken",{"_index":467,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["model",{"_index":631,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["module",{"_index":33,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":35,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongoose",{"_index":390,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"interfaces/taskAndNote.html":{}}}],["mongoosemodule",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature([{name",{"_index":615,"title":{},"body":{"modules/TaskModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forroot(config.mongodb_path",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["moodle",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{}}}],["moodlelogin",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{}}}],["moodlelogin(request",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["moodlesessions",{"_index":211,"title":{"classes/moodleSessions.html":{}},"body":{"injectables/AuthService.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"coverage.html":{},"classes/moodleSessions.html":{}}}],["moodlesessions.getinstance",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["moodlesessions.instance",{"_index":1075,"title":{},"body":{"classes/moodleSessions.html":{}}}],["moodlesubmithelper",{"_index":455,"title":{"classes/moodleSubmitHelper.html":{}},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"coverage.html":{},"classes/moodleSubmitHelper.html":{}}}],["moodleuser",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["moodleuser,solved",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["moodleuser.solvedtasksincollection",{"_index":761,"title":{},"body":{"injectables/TaskService.html":{}}}],["moodleuser.solvedtasksorcollections",{"_index":796,"title":{},"body":{"injectables/TaskService.html":{}}}],["moodleuser.solvedtasksorcollections.has(taskid",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["muss",{"_index":461,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["mytaskrunner",{"_index":482,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["mytaskrunner.runtests(task",{"_index":600,"title":{},"body":{"controllers/TaskController.html":{}}}],["mytaskrunner.submittask(task",{"_index":484,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["nach",{"_index":588,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["name",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{}}}],["name,userid,mail,token,taskid",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["name:username,userid:userid,mail:usermail,token:access_token",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["nestjs/common",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":966,"title":{},"body":{"dependencies.html":{}}}],["nestjs/core",{"_index":343,"title":{},"body":{"guards/RolesGuard.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"interfaces/taskAndNote.html":{}}}],["nestjs/passport",{"_index":162,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":971,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/moodleSessions.html":{}}}],["new:true",{"_index":726,"title":{},"body":{"injectables/TaskService.html":{}}}],["newtaskcollection",{"_index":743,"title":{},"body":{"injectables/TaskService.html":{}}}],["newtaskcollection.tasks",{"_index":744,"title":{},"body":{"injectables/TaskService.html":{}}}],["newtasksforcollection",{"_index":737,"title":{},"body":{"injectables/TaskService.html":{}}}],["newtasksforcollection.length",{"_index":742,"title":{},"body":{"injectables/TaskService.html":{}}}],["newtasksforcollection.push(task",{"_index":740,"title":{},"body":{"injectables/TaskService.html":{}}}],["nicht",{"_index":320,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/TaskController.html":{}}}],["normal",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["note",{"_index":483,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"miscellaneous/functions.html":{},"classes/moodleSubmitHelper.html":{},"interfaces/taskAndNote.html":{}}}],["notes",{"_index":656,"title":{},"body":{"injectables/TaskService.html":{}}}],["notevil",{"_index":984,"title":{},"body":{"dependencies.html":{}}}],["npm",{"_index":1028,"title":{},"body":{"index.html":{}}}],["null",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TaskService.html":{},"classes/taskRunner.html":{}}}],["number",{"_index":411,"title":{},"body":{"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"miscellaneous/functions.html":{},"classes/moodleSubmitHelper.html":{},"interfaces/taskAndNote.html":{}}}],["nur",{"_index":462,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["obj",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/functions.html":{},"classes/moodleSessions.html":{}}}],["object",{"_index":1152,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objekt",{"_index":711,"title":{},"body":{"injectables/TaskService.html":{}}}],["ok",{"_index":68,"title":{},"body":{"injectables/AppService.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"classes/moodleSubmitHelper.html":{}}}],["okay",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["old",{"_index":899,"title":{},"body":{"injectables/UsersService.html":{}}}],["open",{"_index":541,"title":{},"body":{"controllers/TaskController.html":{},"miscellaneous/functions.html":{},"classes/taskRunner.html":{}}}],["opentests",{"_index":368,"title":{},"body":{"classes/Task.html":{},"classes/taskRunner.html":{}}}],["optional",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["out",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["outcome",{"_index":1091,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["output",{"_index":1023,"title":{},"body":{"miscellaneous/functions.html":{}}}],["overview",{"_index":1094,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":964,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["param",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UsersController.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["param('id",{"_index":498,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["param('taskcollectionid",{"_index":476,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["param('taskid",{"_index":477,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["param('token",{"_index":603,"title":{},"body":{"controllers/TaskController.html":{}}}],["parameters",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["parse",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["pass",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["passed",{"_index":273,"title":{},"body":{"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{}}}],["passport",{"_index":310,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":161,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":312,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":313,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":332,"title":{},"body":{"injectables/LocalStrategy.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/taskAndNote.html":{}}}],["patch",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["path",{"_index":1116,"title":{},"body":{"classes/taskRunner.html":{}}}],["pathtofile",{"_index":1137,"title":{},"body":{"classes/taskRunner.html":{}}}],["payload",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":324,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":325,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["placeholder",{"_index":492,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["plugin",{"_index":545,"title":{},"body":{"controllers/TaskController.html":{},"miscellaneous/functions.html":{},"classes/taskRunner.html":{}}}],["plugin.default.getopentests(task.dataforplugin,task.opentests,input",{"_index":1125,"title":{},"body":{"classes/taskRunner.html":{}}}],["plugin.default.submit(task.dataforplugin,task.closedtests,input",{"_index":1129,"title":{},"body":{"classes/taskRunner.html":{}}}],["plugincode",{"_index":369,"title":{},"body":{"classes/Task.html":{},"classes/taskRunner.html":{}}}],["plugindirectory:string",{"_index":1132,"title":{},"body":{"classes/taskRunner.html":{}}}],["plugindirectory=plugin.directory",{"_index":1136,"title":{},"body":{"classes/taskRunner.html":{}}}],["plugindirectorypath",{"_index":960,"title":{},"body":{"coverage.html":{},"classes/taskRunner.html":{},"miscellaneous/variables.html":{}}}],["plugindirectorypath+plugindirectory+'/'+pluginfilename",{"_index":1138,"title":{},"body":{"classes/taskRunner.html":{}}}],["pluginfilename:string",{"_index":1131,"title":{},"body":{"classes/taskRunner.html":{}}}],["pluginfilename=plugin.mainfile",{"_index":1135,"title":{},"body":{"classes/taskRunner.html":{}}}],["plugins",{"_index":1114,"title":{},"body":{"classes/taskRunner.html":{},"miscellaneous/variables.html":{}}}],["plugins.foreach(plugin",{"_index":1133,"title":{},"body":{"classes/taskRunner.html":{}}}],["plugins/plugins.json",{"_index":1115,"title":{},"body":{"classes/taskRunner.html":{}}}],["post",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["post('/create",{"_index":427,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["post('/login",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/moodlelogin",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/register",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/searchtask",{"_index":558,"title":{},"body":{"controllers/TaskController.html":{}}}],["post('/submit/:id",{"_index":439,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["post('/submittask/:taskcollectionid/:taskid",{"_index":443,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["post('/test/:id",{"_index":539,"title":{},"body":{"controllers/TaskController.html":{}}}],["prefix",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["primär",{"_index":587,"title":{},"body":{"controllers/TaskController.html":{}}}],["private",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"classes/moodleSessions.html":{},"classes/taskRunner.html":{}}}],["production",{"_index":1035,"title":{},"body":{"index.html":{}}}],["project",{"_index":718,"title":{},"body":{"injectables/TaskService.html":{},"index.html":{}}}],["promise",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"classes/taskRunner.html":{}}}],["prop",{"_index":374,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"classes/User.html":{},"interfaces/taskAndNote.html":{}}}],["properties",{"_index":270,"title":{},"body":{"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"classes/moodleSessions.html":{},"interfaces/taskAndNote.html":{}}}],["provide",{"_index":867,"title":{},"body":{"modules/UsersModule.html":{}}}],["provider",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["provider.body.custom_taskid",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["provider.body.ext_user_username",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["provider.body.lis_person_contact_email_primary",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["provider.body.user_id",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["provider.valid_request(request",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["providers",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["public",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserDTO.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{}}}],["put",{"_index":451,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["put('/changepassword",{"_index":830,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('/update",{"_index":447,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["put(userdto",{"_index":890,"title":{},"body":{"injectables/UsersService.html":{}}}],["putuser",{"_index":828,"title":{},"body":{"controllers/UsersController.html":{}}}],["putuser(res",{"_index":839,"title":{},"body":{"controllers/UsersController.html":{}}}],["query\",searchquery",{"_index":720,"title":{},"body":{"injectables/TaskService.html":{}}}],["raw",{"_index":1110,"title":{},"body":{"classes/taskRunner.html":{}}}],["readonly",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["redirect",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["reflect",{"_index":989,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":340,"title":{},"body":{"guards/RolesGuard.html":{}}}],["register",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(res",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["relevant",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["reloads",{"_index":1031,"title":{},"body":{"index.html":{}}}],["remove",{"_index":1071,"title":{},"body":{"classes/moodleSessions.html":{}}}],["removes",{"_index":1070,"title":{},"body":{"classes/moodleSessions.html":{}}}],["removesession",{"_index":1052,"title":{},"body":{"classes/moodleSessions.html":{}}}],["removesession(key",{"_index":1068,"title":{},"body":{"classes/moodleSessions.html":{}}}],["req",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["request",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["request\"+err",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["require(\"ims",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["requiredroles",{"_index":349,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":358,"title":{},"body":{"guards/RolesGuard.html":{}}}],["res",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["res.cookie('session',returnobj",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(httpstatus.internal_server_error).json",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{}}}],["res.status(httpstatus.not_found).json",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["res.status(httpstatus.not_modified).json",{"_index":596,"title":{},"body":{"controllers/TaskController.html":{}}}],["res.status(httpstatus.ok).json",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["res.status(httpstatus.ok).json(returnobj",{"_index":507,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["res.status(httpstatus.ok).json(runnedtests",{"_index":602,"title":{},"body":{"controllers/TaskController.html":{}}}],["res.status(httpstatus.unauthorized).json",{"_index":495,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["reset",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{}}}],["response.redirect('http://localhost:8080/solvefullscreen/alreadysubmitted",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.redirect('http://localhost:8080/solvefullscreen?exerciseid='+taskid+'&token='+token",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["rest",{"_index":723,"title":{},"body":{"injectables/TaskService.html":{}}}],["result",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"overview.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result/note",{"_index":666,"title":{},"body":{"injectables/TaskService.html":{}}}],["resulting",{"_index":655,"title":{},"body":{"injectables/TaskService.html":{}}}],["results",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"overview.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["returnobj",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["rimraf",{"_index":992,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":344,"title":{},"body":{"guards/RolesGuard.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"interfaces/taskAndNote.html":{},"miscellaneous/variables.html":{}}}],["role':userdto.role}).exec",{"_index":897,"title":{},"body":{"injectables/UsersService.html":{}}}],["role.enum",{"_index":345,"title":{},"body":{"guards/RolesGuard.html":{}}}],["role:'test",{"_index":849,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles",{"_index":842,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":847,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles(role.user",{"_index":850,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles.decorator",{"_index":347,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles_key",{"_index":346,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":336,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["rounded",{"_index":1086,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["routen",{"_index":1038,"title":{},"body":{"index.html":{}}}],["run",{"_index":1009,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["runned",{"_index":1014,"title":{},"body":{"miscellaneous/functions.html":{}}}],["runnedtests",{"_index":599,"title":{},"body":{"controllers/TaskController.html":{}}}],["running",{"_index":1119,"title":{},"body":{"classes/taskRunner.html":{}}}],["runs",{"_index":1109,"title":{},"body":{"classes/taskRunner.html":{}}}],["runtests",{"_index":1100,"title":{},"body":{"classes/taskRunner.html":{}}}],["runtests(task",{"_index":1107,"title":{},"body":{"classes/taskRunner.html":{}}}],["runtests(task:any,input:any):promise",{"_index":1118,"title":{},"body":{"classes/taskRunner.html":{}}}],["rxjs",{"_index":993,"title":{},"body":{"dependencies.html":{}}}],["saltrounds",{"_index":901,"title":{},"body":{"injectables/UsersService.html":{}}}],["save",{"_index":671,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["schema",{"_index":387,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"interfaces/taskAndNote.html":{}}}],["schemafactory",{"_index":388,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"classes/User.html":{},"interfaces/taskAndNote.html":{}}}],["schemafactory.createforclass(task",{"_index":394,"title":{},"body":{"classes/Task.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(taskcollection",{"_index":415,"title":{},"body":{"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":812,"title":{},"body":{"classes/User.html":{},"interfaces/taskAndNote.html":{},"miscellaneous/variables.html":{}}}],["search",{"_index":554,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["searchbyname",{"_index":716,"title":{},"body":{"injectables/TaskService.html":{}}}],["searchbytag",{"_index":715,"title":{},"body":{"injectables/TaskService.html":{}}}],["searchquery",{"_index":557,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["searchstring",{"_index":591,"title":{},"body":{"controllers/TaskController.html":{}}}],["searchtask",{"_index":525,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["searchtask(@res",{"_index":592,"title":{},"body":{"controllers/TaskController.html":{}}}],["searchtask(res",{"_index":556,"title":{},"body":{"controllers/TaskController.html":{}}}],["searchtask(searchquery",{"_index":676,"title":{},"body":{"injectables/TaskService.html":{}}}],["secret",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["secretkey",{"_index":1153,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":323,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["see",{"_index":1021,"title":{},"body":{"miscellaneous/functions.html":{}}}],["send",{"_index":469,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["senden",{"_index":605,"title":{},"body":{"controllers/TaskController.html":{}}}],["service",{"_index":1092,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["session",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{}}}],["session.body.ext_user_username",{"_index":488,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["session.body.lis_person_contact_email_primary",{"_index":489,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["session.body.user_id",{"_index":487,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["session.outcome_service.send_replace_result(grade/100",{"_index":1089,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["sessions",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"classes/moodleSessions.html":{}}}],["sessions.addsession(access_token,provider",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["sessions.getsession(authtoken",{"_index":485,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["setmetadata(roles_key",{"_index":1154,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":1027,"title":{},"body":{"index.html":{}}}],["shared",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{}}}],["singleton",{"_index":1044,"title":{},"body":{"classes/moodleSessions.html":{}}}],["solved",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["solvedtask.note/100",{"_index":776,"title":{},"body":{"injectables/TaskService.html":{}}}],["solvedtasksincollection",{"_index":764,"title":{},"body":{"injectables/TaskService.html":{},"classes/User.html":{}}}],["solvedtasksincollection.delete(taskorcollectionid",{"_index":794,"title":{},"body":{"injectables/TaskService.html":{}}}],["solvedtasksincollection.foreach(solvedtask",{"_index":774,"title":{},"body":{"injectables/TaskService.html":{}}}],["solvedtasksincollection.foreach(submittedtask",{"_index":783,"title":{},"body":{"injectables/TaskService.html":{}}}],["solvedtasksincollection.has(taskorcollectionid",{"_index":793,"title":{},"body":{"injectables/TaskService.html":{}}}],["solvedtasksincollection.push(taskandnoteobj",{"_index":786,"title":{},"body":{"injectables/TaskService.html":{}}}],["solvedtasksincollectionmap",{"_index":760,"title":{},"body":{"injectables/TaskService.html":{}}}],["solvedtasksincollectionmap.get(taskcollectionid",{"_index":765,"title":{},"body":{"injectables/TaskService.html":{}}}],["solvedtasksincollectionmap.has(taskcollectionid",{"_index":763,"title":{},"body":{"injectables/TaskService.html":{}}}],["solvedtasksincollectionmap.set(taskcollectionid,solvedtasksincollection",{"_index":787,"title":{},"body":{"injectables/TaskService.html":{}}}],["solvedtasksorcollections",{"_index":803,"title":{},"body":{"classes/User.html":{},"interfaces/taskAndNote.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{}}}],["specific",{"_index":548,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/.../auth.service.ts",{"_index":1147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../basicexamplepluginmain.ts",{"_index":1007,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../codingpluginmain.ts",{"_index":1006,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":1146,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1005,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../role.enum.ts",{"_index":999,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":1149,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../task.schema.ts",{"_index":1143,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../taskcollection.schema.ts",{"_index":1142,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../taskrunner.ts",{"_index":1148,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":1144,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:10",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":64,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:4",{"_index":65,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:21",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:44",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:67",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":160,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.service.ts:10",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:24",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:40",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:57",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:97",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/constants.ts",{"_index":933,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/jwt",{"_index":275,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":303,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:17",{"_index":307,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":305,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/local",{"_index":326,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts",{"_index":328,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts:12",{"_index":333,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:7",{"_index":330,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/moodlesessions.ts",{"_index":935,"title":{},"body":{"coverage.html":{},"classes/moodleSessions.html":{}}}],["src/auth/moodlesessions.ts:10",{"_index":1053,"title":{},"body":{"classes/moodleSessions.html":{}}}],["src/auth/moodlesessions.ts:20",{"_index":1062,"title":{},"body":{"classes/moodleSessions.html":{}}}],["src/auth/moodlesessions.ts:35",{"_index":1056,"title":{},"body":{"classes/moodleSessions.html":{}}}],["src/auth/moodlesessions.ts:44",{"_index":1069,"title":{},"body":{"classes/moodleSessions.html":{}}}],["src/auth/moodlesessions.ts:55",{"_index":1066,"title":{},"body":{"classes/moodleSessions.html":{}}}],["src/auth/moodlesessions.ts:9",{"_index":1054,"title":{},"body":{"classes/moodleSessions.html":{}}}],["src/auth/roles/role.enum",{"_index":841,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/auth/roles/role.enum.ts",{"_index":1000,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/auth/roles/roles.decorator",{"_index":843,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/auth/roles/roles.decorator.ts",{"_index":937,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/roles/roles.guard",{"_index":866,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/roles/roles.guard.ts",{"_index":338,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/roles/roles.guard.ts:11",{"_index":342,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/roles/roles.guard.ts:8",{"_index":341,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/main.ts",{"_index":938,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/plugins/basicexampleplugin/basicexamplepluginmain.ts",{"_index":941,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/plugins/codingplugin/codingplugininterfaces.ts",{"_index":269,"title":{},"body":{"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"coverage.html":{}}}],["src/plugins/codingplugin/codingpluginmain.ts",{"_index":942,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/task/moodlesubmithelper.ts",{"_index":946,"title":{},"body":{"coverage.html":{},"classes/moodleSubmitHelper.html":{}}}],["src/task/moodlesubmithelper.ts:1",{"_index":1080,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["src/task/moodlesubmithelper.ts:9",{"_index":1083,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["src/task/task.controller.ts",{"_index":518,"title":{},"body":{"controllers/TaskController.html":{},"coverage.html":{}}}],["src/task/task.controller.ts:110",{"_index":567,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:132",{"_index":532,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:153",{"_index":540,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:188",{"_index":561,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:41",{"_index":529,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:57",{"_index":535,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:68",{"_index":551,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:81",{"_index":547,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.controller.ts:92",{"_index":559,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/task/task.module.ts",{"_index":609,"title":{},"body":{"modules/TaskModule.html":{}}}],["src/task/task.schema.ts",{"_index":361,"title":{},"body":{"classes/Task.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/task/task.schema.ts:23",{"_index":385,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:26",{"_index":381,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:29",{"_index":376,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:32",{"_index":378,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:35",{"_index":386,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:38",{"_index":384,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:41",{"_index":377,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:44",{"_index":383,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:47",{"_index":379,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:50",{"_index":375,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:53",{"_index":382,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:56",{"_index":380,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.schema.ts:7",{"_index":373,"title":{},"body":{"classes/Task.html":{}}}],["src/task/task.service.ts",{"_index":619,"title":{},"body":{"injectables/TaskService.html":{},"coverage.html":{}}}],["src/task/task.service.ts:109",{"_index":681,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:116",{"_index":640,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:126",{"_index":641,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:140",{"_index":653,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:16",{"_index":639,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:183",{"_index":664,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:22",{"_index":637,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:223",{"_index":669,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:28",{"_index":647,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:33",{"_index":646,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:38",{"_index":649,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:47",{"_index":651,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:58",{"_index":677,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:63",{"_index":679,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:75",{"_index":661,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:9",{"_index":634,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:92",{"_index":643,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/taskcollection.controller.ts",{"_index":417,"title":{},"body":{"controllers/TaskCollectionController.html":{},"coverage.html":{}}}],["src/task/taskcollection.controller.ts:116",{"_index":436,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["src/task/taskcollection.controller.ts:126",{"_index":448,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["src/task/taskcollection.controller.ts:136",{"_index":431,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["src/task/taskcollection.controller.ts:31",{"_index":428,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["src/task/taskcollection.controller.ts:40",{"_index":433,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["src/task/taskcollection.controller.ts:45",{"_index":444,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["src/task/taskcollection.controller.ts:81",{"_index":440,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["src/task/taskcollection.schema.ts",{"_index":396,"title":{},"body":{"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/task/taskcollection.schema.ts:12",{"_index":399,"title":{},"body":{"classes/TaskCollection.html":{}}}],["src/task/taskcollection.schema.ts:24",{"_index":406,"title":{},"body":{"classes/TaskCollection.html":{}}}],["src/task/taskcollection.schema.ts:27",{"_index":403,"title":{},"body":{"classes/TaskCollection.html":{}}}],["src/task/taskcollection.schema.ts:30",{"_index":407,"title":{},"body":{"classes/TaskCollection.html":{}}}],["src/task/taskcollection.schema.ts:33",{"_index":401,"title":{},"body":{"classes/TaskCollection.html":{}}}],["src/task/taskcollection.schema.ts:36",{"_index":404,"title":{},"body":{"classes/TaskCollection.html":{}}}],["src/task/taskcollection.schema.ts:39",{"_index":400,"title":{},"body":{"classes/TaskCollection.html":{}}}],["src/task/taskcollection.schema.ts:42",{"_index":402,"title":{},"body":{"classes/TaskCollection.html":{}}}],["src/task/taskcollection.schema.ts:45",{"_index":405,"title":{},"body":{"classes/TaskCollection.html":{}}}],["src/task/taskrunner.ts",{"_index":957,"title":{},"body":{"coverage.html":{},"classes/taskRunner.html":{},"miscellaneous/variables.html":{}}}],["src/task/taskrunner.ts:16",{"_index":1108,"title":{},"body":{"classes/taskRunner.html":{}}}],["src/task/taskrunner.ts:33",{"_index":1113,"title":{},"body":{"classes/taskRunner.html":{}}}],["src/task/taskrunner.ts:49",{"_index":1103,"title":{},"body":{"classes/taskRunner.html":{}}}],["src/task/taskrunner.ts:5",{"_index":1101,"title":{},"body":{"classes/taskRunner.html":{}}}],["src/users/user.dto",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/users/user.dto.ts",{"_index":813,"title":{},"body":{"classes/UserDTO.html":{},"coverage.html":{}}}],["src/users/user.dto.ts:3",{"_index":815,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/users/user.dto.ts:5",{"_index":816,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/users/user.dto.ts:6",{"_index":820,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/users/user.dto.ts:7",{"_index":817,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/users/user.dto.ts:8",{"_index":818,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/users/user.dto.ts:9",{"_index":819,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/users/user.schema.ts",{"_index":801,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"interfaces/taskAndNote.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/user.schema.ts:14",{"_index":805,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.schema.ts:17",{"_index":811,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.schema.ts:20",{"_index":804,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.schema.ts:23",{"_index":806,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.schema.ts:26",{"_index":810,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.schema.ts:30",{"_index":809,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.schema.ts:33",{"_index":807,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":822,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:15",{"_index":838,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:22",{"_index":835,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:27",{"_index":831,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:39",{"_index":833,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:49",{"_index":840,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:61",{"_index":837,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":862,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/users/users.service.ts",{"_index":869,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:14",{"_index":891,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:21",{"_index":877,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:31",{"_index":884,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:37",{"_index":879,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:51",{"_index":881,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:63",{"_index":887,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:67",{"_index":889,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:71",{"_index":885,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:9",{"_index":875,"title":{},"body":{"injectables/UsersService.html":{}}}],["startcompiles",{"_index":1033,"title":{},"body":{"index.html":{}}}],["started",{"_index":1024,"title":{"index.html":{}},"body":{}}],["statements",{"_index":925,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1047,"title":{},"body":{"classes/moodleSessions.html":{}}}],["status",{"_index":67,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["store",{"_index":1046,"title":{},"body":{"classes/moodleSessions.html":{}}}],["stored",{"_index":1012,"title":{},"body":{"miscellaneous/functions.html":{},"classes/moodleSessions.html":{}}}],["strategy",{"_index":309,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/LocalStrategy.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/moodleSessions.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{},"miscellaneous/variables.html":{}}}],["string.substring(string.indexof",{"_index":1150,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sub",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["submission",{"_index":442,"title":{},"body":{"controllers/TaskCollectionController.html":{},"miscellaneous/functions.html":{}}}],["submit",{"_index":422,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"classes/moodleSubmitHelper.html":{},"classes/taskRunner.html":{}}}],["submit(data",{"_index":1018,"title":{},"body":{"miscellaneous/functions.html":{}}}],["submit(taskcollectionid",{"_index":437,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["submithelper",{"_index":499,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["submithelper.submitnotetomoodle(session,note",{"_index":502,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["submitnotetomoodle",{"_index":1079,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["submitnotetomoodle(session",{"_index":1081,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["submitnotetomoodle(session:any,grade:number",{"_index":1085,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["submits",{"_index":1084,"title":{},"body":{"classes/moodleSubmitHelper.html":{}}}],["submittask",{"_index":526,"title":{},"body":{"controllers/TaskController.html":{},"classes/taskRunner.html":{}}}],["submittask(task",{"_index":1112,"title":{},"body":{"classes/taskRunner.html":{}}}],["submittask(task:any,input:any):promise",{"_index":1126,"title":{},"body":{"classes/taskRunner.html":{}}}],["submittask(taskid",{"_index":560,"title":{},"body":{"controllers/TaskController.html":{}}}],["submittaskincollection",{"_index":423,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["submittaskincollection(taskcollectionid",{"_index":441,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["submitted",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/moodleSubmitHelper.html":{}}}],["submittedresult",{"_index":1128,"title":{},"body":{"classes/taskRunner.html":{}}}],["submitting:\",task.closedtests,\"for",{"_index":1127,"title":{},"body":{"classes/taskRunner.html":{}}}],["succesful",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["successful",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["successfully",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["suche",{"_index":586,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["super",{"_index":314,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super.canactivate(context",{"_index":298,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["super.login(request",{"_index":296,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":494,"title":{},"body":{"controllers/TaskCollectionController.html":{},"modules.html":{}}}],["svg",{"_index":1042,"title":{},"body":{"modules.html":{}}}],["system",{"_index":1064,"title":{},"body":{"classes/moodleSessions.html":{}}}],["table",{"_index":963,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":962,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":370,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{}}}],["task",{"_index":107,"title":{"classes/Task.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Task.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"classes/taskRunner.html":{}}}],["task._id",{"_index":772,"title":{},"body":{"injectables/TaskService.html":{}}}],["task.controller",{"_index":610,"title":{},"body":{"modules/TaskModule.html":{}}}],["task.name",{"_index":616,"title":{},"body":{"modules/TaskModule.html":{}}}],["task.schema",{"_index":570,"title":{},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{}}}],["task.service",{"_index":450,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{}}}],["task.weighting",{"_index":770,"title":{},"body":{"injectables/TaskService.html":{}}}],["task/task.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["task:\",taskdto",{"_index":689,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskalreadysubmittedflag",{"_index":782,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskandnote",{"_index":684,"title":{"interfaces/taskAndNote.html":{}},"body":{"injectables/TaskService.html":{},"classes/User.html":{},"coverage.html":{},"interfaces/taskAndNote.html":{}}}],["taskandnoteobj:taskandnote",{"_index":779,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcollection",{"_index":395,"title":{"classes/TaskCollection.html":{}},"body":{"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["taskcollection.controller",{"_index":611,"title":{},"body":{"modules/TaskModule.html":{}}}],["taskcollection.name",{"_index":617,"title":{},"body":{"modules/TaskModule.html":{}}}],["taskcollection.schema",{"_index":452,"title":{},"body":{"controllers/TaskCollectionController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{}}}],["taskcollection.tasks",{"_index":731,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcollectioncontroller",{"_index":416,"title":{"controllers/TaskCollectionController.html":{}},"body":{"controllers/TaskCollectionController.html":{},"modules/TaskModule.html":{},"coverage.html":{}}}],["taskcollectiondocument",{"_index":408,"title":{},"body":{"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{},"miscellaneous/typealiases.html":{}}}],["taskcollectiondto",{"_index":426,"title":{},"body":{"controllers/TaskCollectionController.html":{},"injectables/TaskService.html":{}}}],["taskcollectionid",{"_index":432,"title":{},"body":{"controllers/TaskCollectionController.html":{},"injectables/TaskService.html":{}}}],["taskcollectionid.match(/^[0",{"_index":708,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcollectionid}).exec",{"_index":710,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcollectionmodel",{"_index":632,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcollections",{"_index":555,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["taskcollections.foreach((taskcollection:any",{"_index":736,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcollections.foreach(taskcollection",{"_index":730,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcollectionschema",{"_index":414,"title":{},"body":{"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"modules/TaskModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["taskcollectionsfound",{"_index":735,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcollectionsfound.push(taskcollection",{"_index":734,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcollectionsfound:taskcollection",{"_index":729,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskcontroller",{"_index":517,"title":{"controllers/TaskController.html":{}},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{},"coverage.html":{}}}],["taskdocument",{"_index":391,"title":{},"body":{"classes/Task.html":{},"injectables/TaskService.html":{},"miscellaneous/typealiases.html":{}}}],["taskdto",{"_index":446,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["taskdto._id",{"_index":722,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskergebnis",{"_index":604,"title":{},"body":{"controllers/TaskController.html":{}}}],["taskid",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"interfaces/taskAndNote.html":{}}}],["taskid,note:note",{"_index":780,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskid.match(/^[0",{"_index":701,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskid.tostring",{"_index":739,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskid}).exec",{"_index":706,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskid},{...rest",{"_index":725,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskincollection",{"_index":398,"title":{"interfaces/TaskInCollection.html":{}},"body":{"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"coverage.html":{}}}],["taskincollectionsubmitted",{"_index":672,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskmodel",{"_index":635,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskmodule",{"_index":46,"title":{"modules/TaskModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules.html":{},"overview.html":{}}}],["taskname",{"_index":412,"title":{},"body":{"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{}}}],["taskorcollectionid",{"_index":668,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskrunner",{"_index":453,"title":{"classes/taskRunner.html":{}},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"coverage.html":{},"classes/taskRunner.html":{}}}],["tasks",{"_index":397,"title":{},"body":{"classes/TaskCollection.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{}}}],["tasks.foreach(task",{"_index":732,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskschema",{"_index":393,"title":{},"body":{"classes/Task.html":{},"modules/TaskModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["taskservice",{"_index":449,"title":{"injectables/TaskService.html":{}},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"coverage.html":{},"overview.html":{}}}],["tasksincollectionarray",{"_index":767,"title":{},"body":{"injectables/TaskService.html":{}}}],["tasksincollectionarray.foreach(task",{"_index":769,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskssolvedmap",{"_index":795,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskssolvedmap.set(taskorcollectionid,note",{"_index":798,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskweightening",{"_index":773,"title":{},"body":{"injectables/TaskService.html":{}}}],["test",{"_index":848,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["testn",{"_index":898,"title":{},"body":{"injectables/UsersService.html":{}}}],["testresult",{"_index":1124,"title":{},"body":{"classes/taskRunner.html":{}}}],["testresults",{"_index":271,"title":{},"body":{"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{}}}],["tests",{"_index":542,"title":{},"body":{"controllers/TaskController.html":{},"miscellaneous/functions.html":{},"classes/taskRunner.html":{}}}],["tests:\",task.opentests,\"for",{"_index":1120,"title":{},"body":{"classes/taskRunner.html":{}}}],["that.usermodel(userdto",{"_index":913,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.appservice.getstatus",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(userdto",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.loginmoodleuserandgettask(name,mail,taskid",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.ltisessioninitiate(request",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(username",{"_index":334,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.deletetasksincollection(taskid",{"_index":753,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.findalltaskcollections",{"_index":728,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.getplugin(task.plugincode",{"_index":1122,"title":{},"body":{"classes/taskRunner.html":{}}}],["this.getsingletaskcollection(taskcollectionid",{"_index":766,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.jwtservice.sign(payload",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":350,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.sessions",{"_index":1072,"title":{},"body":{"classes/moodleSessions.html":{}}}],["this.sessions.delete(key",{"_index":1077,"title":{},"body":{"classes/moodleSessions.html":{}}}],["this.sessions.get(key",{"_index":1078,"title":{},"body":{"classes/moodleSessions.html":{}}}],["this.sessions.set(key,session",{"_index":1076,"title":{},"body":{"classes/moodleSessions.html":{}}}],["this.taskcollectionmodel(taskcollectiondto",{"_index":695,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskcollectionmodel.find({}).exec",{"_index":699,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskcollectionmodel.findbyid({'_id",{"_index":709,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskcollectionmodel.findbyidandremove(taskcollectionid).exec",{"_index":755,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskcollectionmodel.findoneandupdate({_id",{"_index":747,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskmodel(taskdto",{"_index":691,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskmodel.find({searchquery}).exec",{"_index":721,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskmodel.find({}).exec",{"_index":698,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskmodel.findbyid({'_id",{"_index":705,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskmodel.findbyidandremove(taskid).exec",{"_index":754,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskmodel.findoneandupdate({_id",{"_index":724,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskservice.createcollection(taskcollectiondto",{"_index":474,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["this.taskservice.createtask(taskdto",{"_index":573,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.deletetask(taskid",{"_index":598,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.deletetaskcollection(taskcollectionid",{"_index":515,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["this.taskservice.findalltaskcollections",{"_index":475,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["this.taskservice.findalltasks",{"_index":574,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.getsingletask(taskid",{"_index":478,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["this.taskservice.getsingletaskcollection(taskcollectionid",{"_index":506,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["this.taskservice.gettaskcollectionnote(usermail,taskcollectionid",{"_index":500,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["this.taskservice.gettaskcollectionsfortask(taskid",{"_index":576,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.marktaskincollectionassubmitted(usermail,taskcollectionid,taskid,note",{"_index":490,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["this.taskservice.marktaskorcollectionassubmitted(usermail,taskcollectionid,note",{"_index":503,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["this.taskservice.marktaskorcollectionassubmitted(usermail,taskid,note",{"_index":606,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.searchtask(searchquery",{"_index":593,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.updatetask(taskdto",{"_index":595,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.updatetaskcollection(taskdto",{"_index":511,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["this.updatetaskcollection(newtaskcollection",{"_index":745,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.usermodel.find().exec",{"_index":921,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyidandremove(userdto._id).exec",{"_index":908,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyidandupdate(userdto._id,{'password",{"_index":906,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyidandupdate(userdto._id,{'username':userdto.username",{"_index":895,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone({'email",{"_index":757,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["this.usermodel.findone({'username",{"_index":919,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findoneandupdate({'email",{"_index":789,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.usersservice.changepassword(userdto",{"_index":852,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create(userdto",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.usersservice.createmoodleuser(usermail,username",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.delete(data.user",{"_index":856,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":851,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findmoodleuser(usermail",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findone('simon",{"_index":858,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(user.username",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findone(username",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.put(userdto",{"_index":857,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":299,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["title",{"_index":371,"title":{},"body":{"classes/Task.html":{},"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{}}}],["todo",{"_index":458,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["token",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"classes/moodleSessions.html":{}}}],["totalpoints",{"_index":768,"title":{},"body":{"injectables/TaskService.html":{}}}],["trotzdem",{"_index":581,"title":{},"body":{"controllers/TaskController.html":{}}}],["true",{"_index":318,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TaskService.html":{}}}],["type",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IFeedback.html":{},"interfaces/ITestResult.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Task.html":{},"classes/TaskCollection.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{},"interfaces/taskAndNote.html":{},"classes/taskRunner.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type:string",{"_index":413,"title":{},"body":{"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{}}}],["typealiases",{"_index":1140,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["unauthorizedexception",{"_index":285,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["und",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["up",{"_index":674,"title":{},"body":{"injectables/TaskService.html":{}}}],["update",{"_index":569,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["updated",{"_index":513,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["updatedtaskcollection",{"_index":512,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["updates",{"_index":568,"title":{},"body":{"controllers/TaskController.html":{}}}],["updatetask",{"_index":527,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["updatetask(taskdto",{"_index":678,"title":{},"body":{"injectables/TaskService.html":{}}}],["updatetask(taskid",{"_index":566,"title":{},"body":{"controllers/TaskController.html":{}}}],["updatetaskcollection",{"_index":424,"title":{},"body":{"controllers/TaskCollectionController.html":{},"injectables/TaskService.html":{}}}],["updatetaskcollection(@param('id",{"_index":509,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["updatetaskcollection(taskdto",{"_index":680,"title":{},"body":{"injectables/TaskService.html":{}}}],["updatetaskcollection(taskid",{"_index":445,"title":{},"body":{"controllers/TaskCollectionController.html":{}}}],["use",{"_index":553,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["useclass",{"_index":868,"title":{},"body":{"modules/UsersModule.html":{}}}],["used",{"_index":717,"title":{},"body":{"injectables/TaskService.html":{}}}],["useguards",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":457,"title":{},"body":{"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"controllers/UsersController.html":{}}}],["useguards(localauthguard",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@post('/login",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":113,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"classes/moodleSessions.html":{},"interfaces/taskAndNote.html":{}}}],["user,userdocument",{"_index":892,"title":{},"body":{"injectables/UsersService.html":{}}}],["user,userschema",{"_index":863,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.dto",{"_index":844,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.name",{"_index":618,"title":{},"body":{"modules/TaskModule.html":{},"modules/UsersModule.html":{}}}],["user.password",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.roles?.includes(role",{"_index":359,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.schema",{"_index":864,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user:moodleuser",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdata",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["userdocument",{"_index":683,"title":{},"body":{"injectables/TaskService.html":{},"classes/User.html":{},"interfaces/taskAndNote.html":{},"miscellaneous/typealiases.html":{}}}],["userdto",{"_index":78,"title":{"classes/UserDTO.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userdto.password",{"_index":900,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.password}).exec",{"_index":907,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.role",{"_index":909,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto:any",{"_index":916,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{}}}],["userinput",{"_index":544,"title":{},"body":{"controllers/TaskController.html":{},"miscellaneous/functions.html":{}}}],["usermail",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["usermail}).exec",{"_index":758,"title":{},"body":{"injectables/TaskService.html":{}}}],["usermail},{...rest",{"_index":790,"title":{},"body":{"injectables/TaskService.html":{}}}],["usermodel",{"_index":633,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/TaskCollectionController.html":{},"controllers/TaskController.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"injectables/UsersService.html":{},"interfaces/taskAndNote.html":{}}}],["username/password",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["username}).exec",{"_index":920,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.controller",{"_index":865,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":845,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/user.schema",{"_index":613,"title":{},"body":{"modules/TaskModule.html":{},"injectables/TaskService.html":{}}}],["users/users.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{}}}],["userschema",{"_index":612,"title":{},"body":{"modules/TaskModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"interfaces/taskAndNote.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":821,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":47,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":127,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uuid4",{"_index":995,"title":{},"body":{"dependencies.html":{}}}],["validate",{"_index":304,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":306,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":331,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validateduser",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateduser.password",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateduser.username",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["validates",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":975,"title":{},"body":{"dependencies.html":{}}}],["value",{"_index":1001,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["variable",{"_index":931,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1145,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verwendet",{"_index":579,"title":{},"body":{"controllers/TaskController.html":{}}}],["void",{"_index":1061,"title":{},"body":{"classes/moodleSessions.html":{},"classes/moodleSubmitHelper.html":{}}}],["vorkommenden",{"_index":750,"title":{},"body":{"injectables/TaskService.html":{}}}],["weighting",{"_index":410,"title":{},"body":{"classes/TaskCollection.html":{},"interfaces/TaskInCollection.html":{},"injectables/TaskService.html":{}}}],["weightning",{"_index":658,"title":{},"body":{"injectables/TaskService.html":{}}}],["wichtigste",{"_index":1037,"title":{},"body":{"index.html":{}}}],["wird",{"_index":578,"title":{},"body":{"controllers/TaskController.html":{}}}],["within",{"_index":657,"title":{},"body":{"injectables/TaskService.html":{}}}],["zoom",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TaskModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getStatus\n                        \n                        \n                    \n                \n            \n            \n                \ngetStatus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Request, Post, UseGuards} from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(\n    private readonly appService: AppService) {}\n\n  @Get()\n  getStatus(): string {\n    return this.appService.getStatus();\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nTaskModule\n\nTaskModule\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            TaskModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TaskModule } from './task/task.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\nimport * as config from './config.json'\n\n@Module({\n  imports: [TaskModule, MongooseModule.forRoot(config.mongodb_path), AuthModule, UsersModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getStatus\n                        \n                        \n                    \n                \n            \n            \n                \ngetStatus()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n@Injectable()\nexport class AppService {\n  getStatus(): string {\n    return 'Backend STATUS OK :-)';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                moodleLogin\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(res, userDTO: UserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('/login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:21\n                \n            \n\n\n            \n                \n                    Normal Login From Frontend\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Response to Client (message + token if login succesful)\n\n                                    \n                                \n                                \n                                    userDTO\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        submitted Userdata\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        status and message - and if login successful token\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            moodleLogin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    moodleLogin(request, response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/moodleLogin')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:44\n                \n            \n\n\n            \n                \n                    Login from embedded Moodle\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    request\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        lti Request to initiate LTI Session\n\n                                    \n                                \n                                \n                                    response\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        redirect to fullscreen - or if task is submitted to a already submitted page\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        response \"\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            register\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    register(res, userDTO: UserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/register')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        message with status and if user was created user\n\n                                    \n                                \n                                \n                                    userDTO\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        submitted Userdata\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        res \"\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { AuthService } from './auth.service';\nimport { Controller, Post, Request, Body, Get, Param, Patch, Delete, Res, HttpStatus, UseGuards, Req} from '@nestjs/common';\nimport { LocalAuthGuard } from './local-auth.guard';\nimport { UserDTO } from 'src/users/user.dto';\nimport { UsersService } from 'src/users/users.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService, private readonly usersService: UsersService) {}\n\n  /**\n   *\n   * Normal Login From Frontend\n   *\n   * @param res Response to Client (message + token if login succesful)\n   * @param userDTO submitted Userdata\n   * @returns status and message - and if login successful token\n   */\n    @UseGuards(LocalAuthGuard)\n    @Post('/login')\n    async login(@Res() res, @Body() userDTO: UserDTO) {\n      const returnObj = await this.authService.login(userDTO)\n       res.cookie('session',returnObj)\n      if(returnObj) {return res.status(HttpStatus.OK).json({\n        message: 'User logged In successful!',\n        token: returnObj\n      })} else {\n        return res.status(HttpStatus.NOT_FOUND).json({\n          message: 'Could Not Login User',\n        })\n      }\n      //return this.authService.login(userDTO)\n    }\n\n    /**\n     *\n     * Login from embedded Moodle\n     *\n     * @param request lti Request to initiate LTI Session\n     * @param response redirect to fullscreen - or if task is submitted to a already submitted page\n     * @returns response \"\n     */\n    @Post('/moodleLogin')\n    async moodleLogin(\n      @Req() request,\n      @Res() response\n    ) {\n        const {name,userId,mail,token,taskId} = await this.authService.ltiSessionInitiate(request)\n\n        const {moodleUser,solved} = await this.authService.loginMoodleUserAndGetTask(name,mail,taskId)\n\n        if(solved) {\n          return response.redirect('http://localhost:8080/solvefullscreen/alreadySubmitted')\n        } else {\n          return response.redirect('http://localhost:8080/solvefullscreen?exerciseId='+taskId+'&token='+token)\n        }\n\n      }\n\n    /**\n     *\n     * @param res message with status and if user was created user\n     * @param userDTO submitted Userdata\n     * @returns res \"\n     */\n    @Post('/register')\n    async register(    @Res() res,\n    @Body() userDTO: UserDTO, ) {\n\n        const returnObj = await this.usersService.create(userDTO);\n        if(returnObj) {return res.status(HttpStatus.OK).json({\n            message: 'User added successfully!',\n            returnObj\n          })\n        } else {\n          return res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({\n            message: 'User not added!',\n          })\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './local.strategy';\nimport { AuthController } from './auth.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [UsersModule, PassportModule, JwtModule.register({\n    secret: jwtConstants.secret,\n    signOptions: { expiresIn: '6000s' },\n  })],\n  controllers: [AuthController],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  exports: [AuthService]\n})\nexport class AuthModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                loginMoodleUserAndGetTask\n                            \n                            \n                                    Async\n                                ltiSessionInitiate\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:40\n                \n            \n\n\n            \n                \n                    Login a User and create token\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        userDto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        token\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            loginMoodleUserAndGetTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loginMoodleUserAndGetTask(userName, userMail, taskId)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:97\n                \n            \n\n\n            \n                \n                    Login or create a new moodle user and check if task exists\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userName\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userMail\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        moodle User and boolean for task status\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            ltiSessionInitiate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ltiSessionInitiate(request)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:57\n                \n            \n\n\n            \n                \n                    Initiate a LTI Session and parse data\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    request\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        LTI Request from moodle\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        relevant data for lti session\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:24\n                \n            \n\n\n            \n                \n                    Validates a username/password\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        user if okay and null if not okay\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Req, Res } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcryptjs';\nimport moodleSessions from './moodleSessions'\nimport * as config from '../config.json'\n\nvar lti = require(\"ims-lti\");\n@Injectable()\nexport class AuthService {\n\n  constructor( private usersService: UsersService,\n               private jwtService: JwtService\n              ) {}\n\n  /**\n   *\n   * Validates a username/password\n   *\n   * @param username\n   * @param pass\n   * @returns user if okay and null if not okay\n   */\n  async validateUser(username: string, pass: string): Promise {\n    const user = await this.usersService.findOne(username);\n    //console.log(user)\n    const dbPassword = await user.password;\n    const matching = await bcrypt.compare(pass,dbPassword);\n    if(matching) {\n      return await user;\n    }\n    else return null;\n  }\n\n  /**\n   * Login a User and create token\n   * @param user userDto\n   * @returns token\n   */\n  async login(user: any) {\n    const validatedUser = await this.usersService.findOne(user.username)\n    //console.log(validatedUser)\n    const payload = { username: validatedUser.username, sub: validatedUser.password};\n    console.log(this.jwtService.decode( this.jwtService.sign(payload)))\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n\n  /**\n   *\n   * Initiate a LTI Session and parse data\n   * @param request LTI Request from moodle\n   * @returns relevant data for lti session\n   *\n   */\n  async ltiSessionInitiate(request):Promise {\n    let provider = new lti.Provider(config.moodle_consumer_key, config.moodle_consumer_secret); //Shared und public Secret aus moodle\n    let taskId;\n    let userId;\n    let userName;\n    let userMail;\n    let access_token;\n    provider.valid_request(request, (err, isValid) => {\n      if (!isValid) {\n        console.log(\"[LOG] INVALID LTI REQUEST\"+err)\n\n        return \"INVALID: \"+err\n      }\n      console.log(\"[LOG] LTI Session initiated:\",provider)\n      if(provider.body.custom_taskId) taskId = provider.body.custom_taskId\n      userId = provider.body.user_id\n      userName = provider.body.ext_user_username\n      userMail = provider.body.lis_person_contact_email_primary\n\n      const payload = {'obj': userMail}\n      access_token = this.jwtService.sign(payload)\n\n      const sessions = moodleSessions.getInstance();\n      sessions.addSession(access_token,provider)\n\n    })\n\n    return {name:userName,userId:userId,mail:userMail,token:access_token, taskId: taskId}\n\n  }\n\n  /**\n   *\n   * Login or create a new moodle user and check if task exists\n   *\n   * @param userName\n   * @param userMail\n   * @param taskId\n   * @returns moodle User and boolean for task status\n   */\n  async loginMoodleUserAndGetTask(userName,userMail,taskId):Promise {\n    const moodleUser = await this.usersService.findMoodleUser(userMail)\n    let solved = false;\n    if(!moodleUser) {\n      this.usersService.createMoodleUser(userMail,userName)\n    } else {\n      //Has The User already solved it?\n      if(moodleUser.solvedTasksOrCollections) solved = moodleUser.solvedTasksOrCollections.has(taskId)\n\n    }\n      return {user:moodleUser, solved: solved}\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IFeedback.html":{"url":"interfaces/IFeedback.html","title":"interface - IFeedback","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IFeedback\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/plugins/codingPlugin/codingPluginInterfaces.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        message\n                                \n                                \n                                        testResults\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        testResults\n                                    \n                                \n                                \n                                    \n                                        testResults:         ITestResult[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ITestResult[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ITestResult {\n    passed: boolean,\n    message: string\n}\n\nexport interface IFeedback {\n    message: string,\n    testResults : ITestResult[]\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITestResult.html":{"url":"interfaces/ITestResult.html","title":"interface - ITestResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITestResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/plugins/codingPlugin/codingPluginInterfaces.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        message\n                                \n                                \n                                        passed\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        passed\n                                    \n                                \n                                \n                                    \n                                        passed:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ITestResult {\n    passed: boolean,\n    message: string\n}\n\nexport interface IFeedback {\n    message: string,\n    testResults : ITestResult[]\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-auth.guard.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleRequest\n                        \n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user, info)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-auth.guard.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    ExecutionContext,\n    Injectable,\n    UnauthorizedException,\n  } from '@nestjs/common';\n  import { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n    canActivate(context: ExecutionContext) {\n        // Add your custom authentication logic here\n        // for example, call super.logIn(request) to establish a session.\n        return super.canActivate(context);\n      }\n    \n      handleRequest(err, user, info) {\n        // You can throw an exception based on either \"info\" or \"err\" arguments\n        if (err || !user) {\n          throw err || new UnauthorizedException();\n        }\n        return user;\n      }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { jwtConstants } from './constants';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: true, //Kann nicht ablaufen!!! FIXME\n      secretOrKey: jwtConstants.secret,\n      session: true\n    });\n  }\n\n  async validate(payload: any) {\n    return { userId: payload.sub, username: payload.username };\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/local.strategy.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super();\n  }\n\n  async validate(username: string, password: string): Promise {\n    const user = await this.authService.validateUser(username, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/roles/roles.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/roles/roles.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/roles/roles.guard.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { JwtService } from '@nestjs/jwt';\nimport { Role } from './role.enum';\nimport { ROLES_KEY } from './roles.decorator';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!requiredRoles) {\n      return true;\n    }\n    const jwtService = new JwtService(null);\n    const token = context.switchToHttp().getRequest().headers.authorization\n    console.log(token) \n    console.log(jwtService.decode(token))\n    //const { user } = context.switchToHttp().getRequest();\n    //return requiredRoles.some((role) => user.roles?.includes(role));\n    //return false;\n    return true;\n  }\n}\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Task.html":{"url":"classes/Task.html","title":"class - Task","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/task.schema.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                closedTests\n                            \n                            \n                                content\n                            \n                            \n                                course\n                            \n                            \n                                creator\n                            \n                            \n                                dataForPlugin\n                            \n                            \n                                date\n                            \n                            \n                                description\n                            \n                            \n                                openTests\n                            \n                            \n                                pluginCode\n                            \n                            \n                                tags\n                            \n                            \n                                title\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(title: string, description: string, content: string, creator: string, type: string, tags, course: string, pluginCode: string, dataForPlugin: any, closedTests, openTests)\n                    \n                \n                        \n                            \n                                Defined in src/task/task.schema.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        title\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        description\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        content\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        creator\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tags\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        course\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pluginCode\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dataForPlugin\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        closedTests\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        openTests\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            closedTests\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            content\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            course\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            creator\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dataForPlugin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:56\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            openTests\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pluginCode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tags\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.schema.ts:35\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type TaskDocument = Task & Document;\n\n@Schema()\nexport class Task {\n  constructor(\n    title: string,\n    description: string,\n    content: string,\n    creator: string,\n    type: string,\n    tags: [],\n    course: string,\n    pluginCode: string,\n    dataForPlugin: any,\n    closedTests: [],\n    openTests: [],\n  ) {}\n\n  @Prop()\n  title: string;\n\n  @Prop()\n  description: string;\n\n  @Prop()\n  content: string;\n\n  @Prop()\n  creator: string;\n\n  @Prop()\n  type: string;\n\n  @Prop()\n  tags: [];\n\n  @Prop()\n  course: string;\n\n  @Prop()\n  pluginCode: string;\n\n  @Prop()\n  dataForPlugin:any;\n\n  @Prop()\n  closedTests: [];\n\n  @Prop()\n  openTests: [];\n\n  @Prop()\n  date: Date;\n\n}\n\nexport const TaskSchema = SchemaFactory.createForClass(Task);\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskCollection.html":{"url":"classes/TaskCollection.html","title":"class - TaskCollection","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskCollection\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/taskcollection.schema.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                course\n                            \n                            \n                                creator\n                            \n                            \n                                date\n                            \n                            \n                                description\n                            \n                            \n                                tags\n                            \n                            \n                                tasks\n                            \n                            \n                                title\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(title: string, description: string, type: string, creator: string, tags, course: string, tasks: TaskInCollection[])\n                    \n                \n                        \n                            \n                                Defined in src/task/taskcollection.schema.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        title\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        description\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        creator\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tags\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        course\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tasks\n                                                  \n                                                        \n                                                                        TaskInCollection[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            course\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/taskcollection.schema.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            creator\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/taskcollection.schema.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/taskcollection.schema.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/taskcollection.schema.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tags\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/taskcollection.schema.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tasks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskInCollection[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/taskcollection.schema.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/taskcollection.schema.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/taskcollection.schema.ts:30\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type TaskCollectionDocument = TaskCollection & Document;\n\ninterface TaskInCollection {\n  _id: string,\n  weighting: number,\n  taskName: string\n}\n@Schema()\nexport class TaskCollection {\n  constructor(\n    title: string,\n    description: string,\n    type:string,\n    creator: string,\n    tags: [],\n    course: string,\n    tasks: TaskInCollection[],\n  ) {}\n\n  @Prop()\n  title: string;\n\n  @Prop()\n  description: string;\n\n  @Prop()\n  type: string;\n\n  @Prop()\n  creator: string;\n\n  @Prop()\n  tags: [];\n\n  @Prop()\n  course: string;\n\n  @Prop()\n  date: Date;\n\n  @Prop()\n  tasks: TaskInCollection[];\n\n}\n\nexport const TaskCollectionSchema = SchemaFactory.createForClass(TaskCollection);\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TaskCollectionController.html":{"url":"controllers/TaskCollectionController.html","title":"controller - TaskCollectionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TaskCollectionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/taskcollection.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                taskcollection\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createNewTaskCollection\n                            \n                            \n                                    Async\n                                deleteTaskCollection\n                            \n                            \n                                getAllTaskCollections\n                            \n                            \n                                    Async\n                                getTaskCollection\n                            \n                            \n                                    Async\n                                submit\n                            \n                            \n                                    Async\n                                submitTaskInCollection\n                            \n                            \n                                    Async\n                                updateTaskCollection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createNewTaskCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createNewTaskCollection(res, taskCollectionDTO: TaskCollection)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')\n                \n            \n\n            \n                \n                    Defined in src/task/taskcollection.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskCollectionDTO\n                                    \n                                                TaskCollection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTaskCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTaskCollection(taskCollectionID: string, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/task/taskcollection.controller.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskCollectionID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllTaskCollections\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllTaskCollections()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/task/taskcollection.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTaskCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTaskCollection(taskCollectionID: string, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/task/taskcollection.controller.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskCollectionID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            submit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    submit(taskCollectionID: string, headers, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/submit/:id')\n                \n            \n\n            \n                \n                    Defined in src/task/taskcollection.controller.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskCollectionID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    headers\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            submitTaskInCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    submitTaskInCollection(taskCollectionID: string, taskID: string, headers, submission: any, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/submitTask/:taskcollectionID/:taskID')\n                \n            \n\n            \n                \n                    Defined in src/task/taskcollection.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskCollectionID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    headers\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    submission\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTaskCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTaskCollection(taskID: string, taskDTO: TaskCollection, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/update')\n                \n            \n\n            \n                \n                    Defined in src/task/taskcollection.controller.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskDTO\n                                    \n                                                TaskCollection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { TaskService } from './task.service';\nimport {\n  Controller,\n  Post,\n  Body,\n  Get,\n  Param,\n  Headers,\n  Put,\n  Delete,\n  Res,\n  HttpStatus,\n  UseGuards,\n} from '@nestjs/common';\nimport { TaskCollection } from './taskcollection.schema';\nimport taskRunner from './taskrunner';\nimport moodleSessions from '../auth/moodleSessions';\nimport { JwtAuthGuard } from 'src/auth/jwt-auth.guard';\nimport moodleSubmitHelper from './moodleSubmitHelper'\n\n@Controller('taskcollection')\n//@UseGuards(JwtAuthGuard)\nexport class TaskCollectionController {\n  constructor(private readonly taskService: TaskService) {}\n\n  //TODO: Funktioniert!! man muss nur aus dem Frontend das beim Login übermittelte Token mitschicken\n  // https://stackoverflow.com/questions/44072750/how-to-send-basic-auth-with-axios ? ausprobieren..\n  //@UseGuards(JwtAuthGuard)\n\n  @Post('/create')\n  async createNewTaskCollection(@Res() res, @Body() taskCollectionDTO: TaskCollection) {\n    const returnObj = await this.taskService.createCollection(taskCollectionDTO);\n    return res.status(HttpStatus.OK).json({\n      message: 'Task created successfully!',\n      task: returnObj,\n    });\n  }\n\n  @Get()\n  getAllTaskCollections() {\n    return this.taskService.findAllTaskCollections();\n  }\n\n  @Post('/submitTask/:taskcollectionID/:taskID')\n  async submitTaskInCollection(\n    @Param('taskcollectionID') taskCollectionID: string,\n    @Param('taskID') taskID: string,\n    @Headers() headers,\n    @Body() submission: any,\n    @Res() res\n  ) {\n    let task = await this.taskService.getSingleTask(taskID);\n    if(task) {\n      const authToken = headers.authorization;\n      let mytaskrunner = new taskRunner();\n      const note = await mytaskrunner.submitTask(task, submission);\n      const sessions = moodleSessions.getInstance()\n      const session = sessions.getSession(authToken)\n      if(session && note) {\n        let userId = session.body.user_id\n        let userName = session.body.ext_user_username\n        let userMail = session.body.lis_person_contact_email_primary\n        this.taskService.markTaskInCollectionAsSubmitted(userMail,taskCollectionID,taskID,note)\n        return res.status(HttpStatus.OK).json({\n          message: 'Task submitted',\n          feedback: \"OK\", //Placeholder for future submission Feedback support\n        })\n      } else {\n        return res.status(HttpStatus.UNAUTHORIZED).json({\n          message: 'Session Error. Task not submitted',\n        })\n      }\n    } else {\n      return res.status(HttpStatus.NOT_FOUND).json({\n        message: 'Error. Task not found',\n      })\n    }\n  }\n\n  @Post('/submit/:id')\n  async submit(\n    @Param('id') taskCollectionID: string,\n    @Headers() headers,\n    @Res() res\n  ) {\n    const authToken = headers.authorization;\n    const sessions = moodleSessions.getInstance()\n    const session = sessions.getSession(authToken)\n    if(session) {\n      let userId = session.body.user_id\n      let userName = session.body.ext_user_username\n      let userMail = session.body.lis_person_contact_email_primary\n      let submitHelper = new moodleSubmitHelper();\n      const note = await this.taskService.getTaskCollectionNote(userMail,taskCollectionID)\n      if(note) {\n        let status = submitHelper.submitNoteToMoodle(session,note)\n        this.taskService.markTaskOrCollectionAsSubmitted(userMail,taskCollectionID,note)\n        return res.status(HttpStatus.OK).json({\n          message: 'Task Collection submitted:',\n          feedback: status,\n        })\n      } else {\n        return res.status(HttpStatus.UNAUTHORIZED).json({\n          message: 'Session Error. Task not submitted',\n        })\n      }\n\n    } else {\n      return res.status(HttpStatus.UNAUTHORIZED).json({\n        message: 'Session Error. Task not submitted',\n      })\n    }\n  }\n\n  @Get(':id')\n  async getTaskCollection(@Param('id') taskCollectionID: string, @Res() res) {\n    const returnObj = await this.taskService.getSingleTaskCollection(taskCollectionID)\n    if(returnObj) return res.status(HttpStatus.OK).json(returnObj)\n    else return res.status(HttpStatus.NOT_FOUND).json({\n      message:\"Task Collection not found\"\n    })\n\n  }\n\n  @Put('/update')\n async  updateTaskCollection(@Param('id') taskID: string, @Body() taskDTO: TaskCollection, @Res() res) {\n    if(await this.taskService.updateTaskCollection(taskDTO)) return res.status(HttpStatus.OK).json({\n      message: 'updatedTaskCollection'\n    })\n    else return res.status(HttpStatus.NOT_FOUND).json({\n      message: 'not updated'\n    })\n  }\n\n  @Delete(':id')\n  async deleteTaskCollection(@Param('id') taskCollectionID: string, @Res() res) {\n    if(await this.taskService.deleteTaskCollection(taskCollectionID)) return res.status(HttpStatus.OK).json({\n      message: 'deleted TaskCollection'\n    })\n    else return res.status(HttpStatus.NOT_FOUND).json({\n      message: 'not deleted'\n    })\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TaskController.html":{"url":"controllers/TaskController.html","title":"controller - TaskController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TaskController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/task.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                task\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createNewTask\n                            \n                            \n                                    Async\n                                deleteTask\n                            \n                            \n                                getAllTasks\n                            \n                            \n                                    Async\n                                getOpenTests\n                            \n                            \n                                    Async\n                                getTask\n                            \n                            \n                                    Async\n                                getTaskCollectionsForTask\n                            \n                            \n                                    Async\n                                searchTask\n                            \n                            \n                                    Async\n                                submitTask\n                            \n                            \n                                    Async\n                                updateTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createNewTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createNewTask(res, taskDTO: Task)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')\n                \n            \n\n            \n                \n                    Defined in src/task/task.controller.ts:41\n                \n            \n\n\n            \n                \n                    Creates a new Task\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Response status with message and new task if it was created successfully\n\n                                    \n                                \n                                \n                                    taskDTO\n                                    \n                                                Task\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        task Data from Frontend\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        res \"\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTask(taskID: string, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/task/task.controller.ts:132\n                \n            \n\n\n            \n                \n                    Deletes a Task\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    taskID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        task to delete\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        status message and deleted task if deletion was successful\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        res \"\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllTasks\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllTasks()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/task/task.controller.ts:57\n                \n            \n\n\n            \n                \n                    Returns All Tasks as Array\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Array with All Tasks\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getOpenTests\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOpenTests(taskID: string, input: any, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/test/:id')\n                \n            \n\n            \n                \n                    Defined in src/task/task.controller.ts:153\n                \n            \n\n\n            \n                \n                    Get Open Tests For given Task\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    taskID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        TaskID\n\n                                    \n                                \n                                \n                                    input\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        userInput for Plugin\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        status message and open tests if task is found\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        res \"\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTask(taskID: string, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/task/task.controller.ts:81\n                \n            \n\n\n            \n                \n                    Returns a Specific Task\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    taskID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        taskID to get\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        response (not found or ok with task)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        res \"\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTaskCollectionsForTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTaskCollectionsForTask(taskID: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/getTaskCollections/:id')\n                \n            \n\n            \n                \n                    Defined in src/task/task.controller.ts:68\n                \n            \n\n\n            \n                \n                    Returns Task Collections that use a given Task\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    taskID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        taskID to search in taskCollections\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        Array of TaskCollections\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            searchTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    searchTask(res, searchQuery: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/searchTask')\n                \n            \n\n            \n                \n                    Defined in src/task/task.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    searchQuery\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            submitTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    submitTask(taskID: string, headers, input: any, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/submit/:id')\n                \n            \n\n            \n                \n                    Defined in src/task/task.controller.ts:188\n                \n            \n\n\n            \n                \n                    Submit a Task to moodle\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    taskID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        task ID to submit\n\n                                    \n                                \n                                \n                                    headers\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        headers.authorization includes user token to access the moodle session internal\n\n                                    \n                                \n                                \n                                    input\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        userinput from plugin\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        message and status\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        res \"\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTask(taskID: string, taskDTO: Task, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/update')\n                \n            \n\n            \n                \n                    Defined in src/task/task.controller.ts:110\n                \n            \n\n\n            \n                \n                    Updates a given Task\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    taskID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        task to update\n\n                                    \n                                \n                                \n                                    taskDTO\n                                    \n                                                Task\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new task Data\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        updated Task\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        res \"\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { TaskService } from './task.service';\nimport { UsersService } from '../users/users.service'\nimport {\n  Controller,\n  Post,\n  Body,\n  Headers,\n  Get,\n  Param,\n  Patch,\n  Put,\n  Delete,\n  Res,\n  HttpStatus,\n  UseGuards,\n} from '@nestjs/common';\nimport { Task } from './task.schema';\nimport moodleSessions from '../auth/moodleSessions'\nimport { JwtAuthGuard } from 'src/auth/jwt-auth.guard';\nimport taskRunner from './taskrunner';\nimport moodleSubmitHelper from './moodleSubmitHelper'\n\n@Controller('task')\n//@UseGuards(JwtAuthGuard)\nexport class TaskController {\n  constructor(private readonly taskService: TaskService) {}\n\n  //TODO: Funktioniert!! man muss nur aus dem Frontend das beim Login übermittelte Token mitschicken\n  // https://stackoverflow.com/questions/44072750/how-to-send-basic-auth-with-axios ? ausprobieren..\n  //@UseGuards(JwtAuthGuard)\n\n  /**\n   *\n   * Creates a new Task\n   *\n   * @param res Response status with message and new task if it was created successfully\n   * @param taskDTO task Data from Frontend\n   * @returns res \"\n   */\n  @Post('/create')\n  async createNewTask(@Res() res, @Body() taskDTO: Task) {\n\n    const returnObj = await this.taskService.createTask(taskDTO);\n    if (returnObj) {return res.status(HttpStatus.OK).json({\n      message: 'Task created successfully!',\n      task: returnObj,\n    })} else return  res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({\n      message: 'Could not create Task!',\n    })\n  }\n\n  /**\n   * Returns All Tasks as Array\n   * @returns Array with All Tasks\n   */\n  @Get()\n  getAllTasks() {\n    return this.taskService.findAllTasks();\n  }\n\n  /**\n   *\n   * Returns Task Collections that use a given Task\n   * @param taskID taskID to search in taskCollections\n   * @returns Array of TaskCollections\n   */\n  @Get('/getTaskCollections/:id')\n  async getTaskCollectionsForTask(@Param('id') taskID: string) {\n    return await this.taskService.getTaskCollectionsForTask(taskID);\n  }\n\n  /**\n   *\n   * Returns a Specific Task\n   *\n   * @param taskID taskID to get\n   * @param res response (not found or ok with task)\n   * @returns res \"\n   */\n  @Get(':id')\n  async getTask(@Param('id') taskID: string, @Res() res) {\n    const returnObj = await this.taskService.getSingleTask(taskID);\n    if(returnObj) return res.status(HttpStatus.OK).json(returnObj);\n    else return res.status(HttpStatus.NOT_FOUND).json({\n      message: 'no Task found'\n    })\n  }\n\n  // Wird nicht verwendet, ist trotzdem korrekt und als überbleibsel hier\n  // Suche primär nach Tags und dann nach Name -> erhalte Searchstring\n  @Post('/searchTask')\n  async searchTask(@Res() res, @Body() searchQuery: any) {\n    const returnObj = await this.taskService.searchTask(searchQuery);\n    return res.status(HttpStatus.OK).json({\n      message: 'Gefundene Tasks:',\n      task: returnObj,\n    });\n  }\n\n  /**\n   *\n   * Updates a given Task\n   *\n   * @param taskID task to update\n   * @param taskDTO new task Data\n   * @param res updated Task\n   * @returns res \"\n   */\n  @Put('/update')\n  async updateTask(\n    @Param('id') taskID: string,\n    @Body() taskDTO: Task,\n    @Res() res\n  ) {\n    if(await this.taskService.updateTask(taskDTO)) return res.status(HttpStatus.OK).json({\n      message: 'updated Task'\n    });\n    else return res.status(HttpStatus.NOT_MODIFIED).json({\n      message: 'not deleted'\n    });\n  }\n\n  /**\n   *\n   * Deletes a Task\n   *\n   * @param taskID task to delete\n   * @param res status message and deleted task if deletion was successful\n   * @returns res \"\n   */\n  @Delete(':id')\n  async deleteTask(@Param('id') taskID: string, @Res() res) {\n\n    if(await this.taskService.deleteTask(taskID)) return res.status(HttpStatus.OK).json({\n      message: 'deleted Task'\n    });\n    else return res.status(HttpStatus.NOT_FOUND).json({\n      message: 'not deleted'\n    });\n\n  }\n\n  /**\n   *\n   * Get Open Tests For given Task\n   *\n   * @param taskID TaskID\n   * @param input userInput for Plugin\n   * @param res status message and open tests if task is found\n   * @returns res \"\n   */\n  @Post('/test/:id')\n  async getOpenTests(\n    @Param('id') taskID: string,\n    @Body() input: any,\n    //@Headers() headers,\n    @Res() res,\n  ) {\n\n    let task = await this.taskService.getSingleTask(taskID);\n    if (task) {\n      let mytaskrunner = new taskRunner();\n      let runnedTests = await mytaskrunner.runTests(task, input);\n      if(runnedTests) {\n        return res.status(HttpStatus.OK).json(runnedTests);\n      } else return res.status(HttpStatus.NOT_FOUND).json({\n        message: 'Task not found!',\n      });\n\n    }\n\n    return res.status(HttpStatus.NOT_FOUND).json({\n      message: 'Task not found!',\n    });\n  }\n\n  /**\n   *\n   * Submit a Task to moodle\n   *\n   * @param taskID task ID to submit\n   * @param headers headers.authorization includes user token to access the moodle session internal\n   * @param input userinput from plugin\n   * @param res message and status\n   * @returns res \"\n   */\n  @Post('/submit/:id')\n  async submitTask(\n    @Param('id') taskID: string,\n    //@Param('token') token: string,\n    @Headers() headers,\n    @Body() input: any,\n    @Res() res,\n  ) {\n    let task = await this.taskService.getSingleTask(taskID);\n    if (task) {\n      let mytaskrunner = new taskRunner();\n      let authToken = headers.authorization;\n      let note = await mytaskrunner.submitTask(task, input);\n      //Taskergebnis an moodle senden\n      const sessions = moodleSessions.getInstance()\n      const session = sessions.getSession(authToken)\n      if(session && note) {\n        let userId = session.body.user_id\n        let userName = session.body.ext_user_username\n        let userMail = session.body.lis_person_contact_email_primary\n        let submitHelper = new moodleSubmitHelper();\n        let status = submitHelper.submitNoteToMoodle(session,note)\n        this.taskService.markTaskOrCollectionAsSubmitted(userMail,taskID,note)\n        return res.status(HttpStatus.OK).json({\n          message: 'Task submitted:',\n          feedback: status,\n        });\n      } else {\n        return res.status(HttpStatus.UNAUTHORIZED).json({\n          message: 'Session Error. Task not submitted',\n        });\n      }\n\n    }\n    return res.status(HttpStatus.NOT_FOUND).json({\n      message: 'Task not found!',\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TaskInCollection.html":{"url":"interfaces/TaskInCollection.html","title":"interface - TaskInCollection","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TaskInCollection\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/taskcollection.schema.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        _id\n                                \n                                \n                                        taskName\n                                \n                                \n                                        weighting\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        taskName\n                                    \n                                \n                                \n                                    \n                                        taskName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        weighting\n                                    \n                                \n                                \n                                    \n                                        weighting:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type TaskCollectionDocument = TaskCollection & Document;\n\ninterface TaskInCollection {\n  _id: string,\n  weighting: number,\n  taskName: string\n}\n@Schema()\nexport class TaskCollection {\n  constructor(\n    title: string,\n    description: string,\n    type:string,\n    creator: string,\n    tags: [],\n    course: string,\n    tasks: TaskInCollection[],\n  ) {}\n\n  @Prop()\n  title: string;\n\n  @Prop()\n  description: string;\n\n  @Prop()\n  type: string;\n\n  @Prop()\n  creator: string;\n\n  @Prop()\n  tags: [];\n\n  @Prop()\n  course: string;\n\n  @Prop()\n  date: Date;\n\n  @Prop()\n  tasks: TaskInCollection[];\n\n}\n\nexport const TaskCollectionSchema = SchemaFactory.createForClass(TaskCollection);\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TaskModule.html":{"url":"modules/TaskModule.html","title":"module - TaskModule","body":"\n                   \n\n\n\n\n    Modules\n    TaskModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TaskModule\n\n\n\ncluster_TaskModule_providers\n\n\n\n\nTaskService\n\nTaskService\n\n\n\nTaskModule\n\nTaskModule\n\nTaskModule -->\n\nTaskService->TaskModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/task/task.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TaskService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TaskController\n                        \n                        \n                            TaskCollectionController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { TaskService } from './task.service';\nimport { TaskController } from './task.controller';\nimport { TaskCollectionController } from './taskcollection.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Module } from '@nestjs/common';\nimport { Task, TaskSchema } from './task.schema';\nimport { User, UserSchema } from '../users/user.schema';\nimport { TaskCollection, TaskCollectionSchema} from './taskcollection.schema'\nimport { APP_GUARD } from '@nestjs/core';\nimport { UsersService } from '../users/users.service'\n@Module({\n  imports: [MongooseModule.forFeature([{name: Task.name, schema: TaskSchema}]),\n            MongooseModule.forFeature([{name: TaskCollection.name, schema: TaskCollectionSchema}]),\n            MongooseModule.forFeature([{name: User.name, schema: UserSchema}])\n           ],\n  controllers: [TaskController, TaskCollectionController],\n  providers: [TaskService]\n})\nexport class TaskModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TaskService.html":{"url":"injectables/TaskService.html","title":"injectable - TaskService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TaskService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/task.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCollection\n                            \n                            \n                                    Async\n                                createTask\n                            \n                            \n                                    Async\n                                deleteTask\n                            \n                            \n                                    Async\n                                deleteTaskCollection\n                            \n                            \n                                    Private\n                                    Async\n                                deleteTasksInCollection\n                            \n                            \n                                    Async\n                                findAllTaskCollections\n                            \n                            \n                                    Async\n                                findAllTasks\n                            \n                            \n                                    Async\n                                getSingleTask\n                            \n                            \n                                    Async\n                                getSingleTaskCollection\n                            \n                            \n                                    Async\n                                getTaskCollectionNote\n                            \n                            \n                                    Async\n                                getTaskCollectionsForTask\n                            \n                            \n                                    Async\n                                markTaskInCollectionAsSubmitted\n                            \n                            \n                                    Async\n                                markTaskOrCollectionAsSubmitted\n                            \n                            \n                                    Async\n                                searchTask\n                            \n                            \n                                    Async\n                                updateTask\n                            \n                            \n                                    Async\n                                updateTaskCollection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskModel: Model, taskCollectionModel: Model, userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/task/task.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        taskCollectionModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createCollection(taskCollectionDto: TaskCollection)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskCollectionDto\n                                    \n                                                TaskCollection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTask(taskDto: Task)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskDto\n                                    \n                                                Task\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTask(taskId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTaskCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTaskCollection(taskCollectionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskCollectionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            deleteTasksInCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTasksInCollection(taskId)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:92\n                \n            \n\n\n            \n                \n                    Help Method to delete a task in all collections that use the task\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    taskId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        taskId to access task in collection\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAllTaskCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllTaskCollections()\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAllTasks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllTasks()\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSingleTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSingleTask(taskId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSingleTaskCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSingleTaskCollection(taskCollectionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskCollectionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTaskCollectionNote\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTaskCollectionNote(usermail: string, taskCollectionID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:140\n                \n            \n\n\n            \n                \n                    Calculates the Resulting Note for a Task Collection based on the notes of the submitted tasks within the collection and its weightning\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    usermail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskCollectionID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        note 0-100 as result\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTaskCollectionsForTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTaskCollectionsForTask(taskId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:75\n                \n            \n\n\n            \n                \n                    Returns all Task Collections that include a given task\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Array of Task Collections\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            markTaskInCollectionAsSubmitted\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    markTaskInCollectionAsSubmitted(usermail: string, taskCollectionID: string, taskID: string, note: number)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:183\n                \n            \n\n\n            \n                \n                    Help Method to mark a task in a given taskcollection as submitted with its result/note\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    usermail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskCollectionID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    note\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            markTaskOrCollectionAsSubmitted\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    markTaskOrCollectionAsSubmitted(usermail: string, taskOrCollectionId: string, note: number)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:223\n                \n            \n\n\n            \n                \n                    Help Method to mark a Task or Colelction as submitted for a given moodle user and save its result/note\nthis also deletes the \"taskincollectionsubmitted\" if a taskcollection is submitted to clean up the database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    usermail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskOrCollectionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    note\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            searchTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    searchTask(searchQuery: any)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    searchQuery\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTask(taskDto: any)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskDto\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTaskCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTaskCollection(taskDto: any)\n                \n            \n\n\n            \n                \n                    Defined in src/task/task.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    taskDto\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Task, TaskDocument } from './task.schema';\nimport { User, UserDocument, taskAndNote } from '../users/user.schema';\nimport { TaskCollection, TaskCollectionDocument } from './taskcollection.schema'\n\n@Injectable()\nexport class TaskService {\n  constructor (\n    @InjectModel('Task') private taskModel: Model,\n    @InjectModel('TaskCollection') private taskCollectionModel: Model,\n    @InjectModel('User') private userModel: Model\n  ) {}\n\n  async createTask(taskDto: Task): Promise {\n    console.log(\"[LOG] Creating New Task:\",taskDto)\n    const createdTask = new this.taskModel(taskDto);\n    return createdTask.save();\n  }\n\n  async createCollection(taskCollectionDto: TaskCollection): Promise {\n    console.log(\"[LOG] Creating New Task Collection:\",taskCollectionDto)\n    const createdTaskCollection = new this.taskCollectionModel(taskCollectionDto);\n    return createdTaskCollection.save();\n  }\n\n  async findAllTasks(): Promise {\n    console.log(\"[LOG] Getting all Tasks\")\n    return this.taskModel.find({}).exec();\n  }\n\n  async findAllTaskCollections(): Promise {\n    console.log(\"[LOG] Getting all Task Collections\")\n    return this.taskCollectionModel.find({}).exec();\n  }\n\n  async getSingleTask(taskId: string): Promise {\n    console.log(\"[LOG] Getting Task with ID:\",taskId)\n    if (taskId.match(/^[0-9a-fA-F]{24}$/)) {\n      return this.taskModel.findById({'_id': taskId}).exec();\n    } else {\n      return null;\n    }\n  }\n\n  async getSingleTaskCollection(taskCollectionId: string): Promise {\n    console.log(\"[LOG] Getting Task Collection with ID:\",taskCollectionId)\n    if (taskCollectionId.match(/^[0-9a-fA-F]{24}$/)) {\n      return this.taskCollectionModel.findById({'_id': taskCollectionId}).exec();\n    } else {\n      return null;\n    }\n  }\n\n  // Objekt mit 2 Arrays: Suche nach Tags und Suche nach Name: TODO: SearchByTag, SearchByName\n  //Not Used in Project\n  async searchTask(searchQuery: any):Promise {\n    console.log(\"[LOG] Search Task with query\",searchQuery);\n    return this.taskModel.find({searchQuery}).exec();\n  }\n\n  async updateTask(taskDto: any): Promise {\n    console.log(\"[LOG] Update Task \",taskDto)\n    const taskID = taskDto._id\n    let {_id, ...rest} = taskDto\n    return this.taskModel.findOneAndUpdate({_id: taskID},{...rest}, {new:true})\n  }\n\n  /**\n   * Returns all Task Collections that include a given task\n   * @param taskId\n   * @returns Array of Task Collections\n   */\n  async getTaskCollectionsForTask(taskId: string): Promise {\n    console.log(\"[LOG] Finding TaskCollections for task \",taskId)\n    const taskCollections = await this.findAllTaskCollections();\n    let taskCollectionsFound:TaskCollection[] = []\n    taskCollections.forEach(taskCollection => {\n      const tasks = taskCollection.tasks\n      tasks.forEach(task => {\n        if(task._id === taskId) taskCollectionsFound.push(taskCollection)\n      })\n    })\n    return taskCollectionsFound\n  }\n\n  /**\n   *  Help Method to delete a task in all collections that use the task\n   * @param taskId taskId to access task in collection\n   */\n  private async deleteTasksInCollection(taskId) {\n    const taskCollections = await this.findAllTaskCollections();\n    taskCollections.forEach((taskCollection:any) => {\n      const tasks = taskCollection.tasks\n      const newTasksForCollection = []\n      tasks.forEach(task => {\n        if(!(task._id.toString() === taskId.toString())) newTasksForCollection.push(task)\n      })\n      if(tasks.length != newTasksForCollection.length) {\n        let newTaskCollection = taskCollection\n        newTaskCollection.tasks = newTasksForCollection;\n        this.updateTaskCollection(newTaskCollection)\n      }\n\n    })\n  }\n\n  async updateTaskCollection(taskDto: any): Promise {\n    console.log(\"[LOG] Update Task Collection\",taskDto)\n    const taskID = taskDto._id\n    let {_id, ...rest} = taskDto\n    return this.taskCollectionModel.findOneAndUpdate({_id: taskID},{...rest}, {new:true})\n  }\n\n  async deleteTask(taskId: string): Promise {\n    if (taskId.match(/^[0-9a-fA-F]{24}$/)) {\n      //Cleanup: Task in den vorkommenden Collections auch löschen\n      this.deleteTasksInCollection(taskId)\n      return this.taskModel.findByIdAndRemove(taskId).exec();\n    } else {\n      return null;\n    }\n  }\n\n  async deleteTaskCollection(taskCollectionId: string): Promise {\n    if (taskCollectionId.match(/^[0-9a-fA-F]{24}$/)) {\n      return this.taskCollectionModel.findByIdAndRemove(taskCollectionId).exec();\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Calculates the Resulting Note for a Task Collection based on the notes of the submitted tasks within the collection and its weightning\n   * @param usermail\n   * @param taskCollectionID\n   * @returns note 0-100 as result\n   */\n  async getTaskCollectionNote(usermail:string,taskCollectionID:string):Promise {\n    let moodleUser = await this.userModel.findOne({'email': usermail}).exec()\n    let note = 0\n    if(moodleUser) {\n      const solvedTasksInCollectionMap = moodleUser.solvedTasksInCollection\n\n      if(solvedTasksInCollectionMap && solvedTasksInCollectionMap.has(taskCollectionID)) {\n        const solvedTasksInCollection = solvedTasksInCollectionMap.get(taskCollectionID)\n        const taskCollection = await this.getSingleTaskCollection(taskCollectionID)\n        const tasksInCollectionArray = taskCollection.tasks\n        let totalPoints = 0\n        tasksInCollectionArray.forEach(task => {\n          const weighting = +task.weighting\n          totalPoints += +weighting\n        })\n        let archievedPoints = 0\n        tasksInCollectionArray.forEach(task => {\n          const taskID = task._id\n          const taskweightening = task.weighting\n          solvedTasksInCollection.forEach(solvedTask => {\n            if(solvedTask.taskID == taskID) {\n              archievedPoints += (taskweightening * (solvedTask.note/100))\n            }\n          })\n        })\n        note = archievedPoints/totalPoints *100\n      }\n\n    } else {\n      return null\n    }\n    return note\n  }\n\n  /**\n   *\n   * Help Method to mark a task in a given taskcollection as submitted with its result/note\n   * @param usermail\n   * @param taskCollectionID\n   * @param taskID\n   * @param note\n   * @returns\n   */\n  async markTaskInCollectionAsSubmitted(usermail:string,taskCollectionID:string,taskID:string,note:number):Promise {\n    let moodleUser = await this.userModel.findOne({'email': usermail}).exec()\n    if(moodleUser) {\n      let solvedTasksInCollectionMap = moodleUser.solvedTasksInCollection\n      let solvedTasksInCollection = []\n      let taskAndNoteObj:taskAndNote = {taskID: taskID,note:note}\n      if(solvedTasksInCollectionMap) {\n        if(solvedTasksInCollectionMap.has(taskCollectionID)) {\n          solvedTasksInCollection = solvedTasksInCollectionMap.get(taskCollectionID)\n          let taskAlreadySubmittedFlag = false;\n          solvedTasksInCollection.forEach(submittedTask => {\n            if(submittedTask.taskID == taskID) { taskAlreadySubmittedFlag = true }\n          })\n          if(!taskAlreadySubmittedFlag) {\n            solvedTasksInCollection.push(taskAndNoteObj)\n            solvedTasksInCollectionMap.set(taskCollectionID,solvedTasksInCollection)\n          }\n        } else {\n          solvedTasksInCollection.push(taskAndNoteObj)\n          solvedTasksInCollectionMap.set(taskCollectionID,solvedTasksInCollection)\n        }\n      } else {\n        solvedTasksInCollection.push(taskAndNoteObj)\n        solvedTasksInCollectionMap = new Map([[taskCollectionID,solvedTasksInCollection]])\n      }\n      moodleUser.solvedTasksInCollection = solvedTasksInCollectionMap\n      let {_id, ...rest} = moodleUser\n      return this.userModel.findOneAndUpdate({'email': usermail},{...rest}, {new:true})\n    } else return null\n\n  }\n\n  /**\n   * Help Method to mark a Task or Colelction as submitted for a given moodle user and save its result/note\n   * this also deletes the \"taskincollectionsubmitted\" if a taskcollection is submitted to clean up the database\n   * @param usermail\n   * @param taskOrCollectionId\n   * @param note\n   * @returns\n   */\n  async markTaskOrCollectionAsSubmitted(usermail:string,taskOrCollectionId:string,note:number):Promise {\n    let moodleUser = await this.userModel.findOne({'email': usermail}).exec()\n    if(moodleUser) {\n      //Clean Up User Tasks In Collection Submitted\n      let solvedTasksInCollection = moodleUser.solvedTasksInCollection\n      if(solvedTasksInCollection && solvedTasksInCollection.has(taskOrCollectionId)) {\n        solvedTasksInCollection.delete(taskOrCollectionId)\n      }\n      let tasksSolvedMap = moodleUser.solvedTasksOrCollections\n      if(tasksSolvedMap) {\n        tasksSolvedMap.set(taskOrCollectionId,note)\n      } else {\n        tasksSolvedMap = new Map([[taskOrCollectionId,note]])\n      }\n\n      moodleUser.solvedTasksOrCollections = tasksSolvedMap\n      moodleUser.solvedTasksInCollection = solvedTasksInCollection\n      //Filter id\n      let {_id, ...rest} = moodleUser\n      return this.userModel.findOneAndUpdate({'email': usermail},{...rest}, {new:true})\n    } else return null\n\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.schema.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                role\n                            \n                            \n                                solvedTasksInCollection\n                            \n                            \n                                solvedTasksOrCollections\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.schema.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.schema.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.schema.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.schema.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            solvedTasksInCollection\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Map\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.schema.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            solvedTasksOrCollections\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.schema.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.schema.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type UserDocument = User & Document;\n\nexport interface taskAndNote {\n  taskID: string,\n  note: number\n}\n@Schema()\nexport class User {\n\n  @Prop()\n  name: string;\n\n  @Prop()\n  username: string;\n\n  @Prop()\n  email: string;\n\n  @Prop()\n  password: string;\n\n  @Prop()\n  solvedTasksOrCollections: Map;\n\n  //;\n\n  @Prop()\n  role: string;\n\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDTO.html":{"url":"classes/UserDTO.html","title":"class - UserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                _id\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                password\n                            \n                            \n                                    Public\n                                role\n                            \n                            \n                                    Public\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_id: string, username: string, email: string, password: string, role: string)\n                    \n                \n                        \n                            \n                                Defined in src/users/user.dto.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        username\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        email\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        password\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        role\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            _id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/user.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserDTO {\n    constructor(\n      public _id: string,\n      public username: string,\n      public email: string, \n      public password: string, \n      public role: string\n      ) {}\n  }\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                getAllUsers\n                            \n                            \n                                getTestUser\n                            \n                            \n                                getUser\n                            \n                            \n                                    Async\n                                putUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            changePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    changePassword(res, userDTO: UserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/changePassword')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDTO\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(res, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllUsers\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/getUsers')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTestUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetTestUser()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/testUser')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetUser()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { user: string; role: string; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            putUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    putUser(res, userDTO: UserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDTO\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, Get, Param, Patch, Put, Delete, Res, HttpStatus, UseGuards } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { JwtAuthGuard } from 'src/auth/jwt-auth.guard';\nimport { Role } from 'src/auth/roles/role.enum';\nimport { Roles } from 'src/auth/roles/roles.decorator';\nimport { UserDTO } from './user.dto';\nimport { UsersService } from './users.service';\n@Controller('user')\nexport class UsersController {\n\n  constructor(private readonly usersService: UsersService) {}\n    @Get()\n    //@UseGuards(JwtAuthGuard)\n    //@Roles(Role.Admin)\n    getUser() {\n      return {user: 'test', role:'test'}\n    }\n\n    @Get('/getUsers')\n    //@UseGuards(JwtAuthGuard)\n    //@Roles(Role.User)\n    getAllUsers() {\n      return this.usersService.findAll();\n    }\n\n    @Put('/changePassword')\n    async changePassword(\n      @Res() res,\n    @Body() userDTO: UserDTO) {\n        const returnObj = await this.usersService.changePassword(userDTO)\n\n      return res.status(HttpStatus.OK).json({\n        message: 'User Password changed!',\n        user: returnObj\n      })\n    }\n\n    @Delete()\n    async deleteUser(@Res() res, @Body() data: any) {\n      console.log(data.user)\n      const returnObj = await this.usersService.delete(data.user)\n      return res.status(HttpStatus.OK).json({\n        message: 'User Password changed!',\n        user: returnObj\n      })\n    }\n\n    @Put()\n    async putUser(\n      @Res() res,\n    @Body() userDTO: UserDTO) {\n\n      const returnObj = await this.usersService.put(userDTO)\n      return res.status(HttpStatus.OK).json({\n          message: 'User changed successful!',\n          user: returnObj\n        })\n    }\n\n    @Get('/testUser')\n    getTestUser() {\n      return this.usersService.findOne('simon')\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User,UserSchema } from './user.schema';\nimport { UsersController } from './users.controller';\nimport { APP_GUARD } from '@nestjs/core';\nimport { RolesGuard } from 'src/auth/roles/roles.guard';\n\n\n@Module({\n  imports: [MongooseModule.forFeature([{name: User.name, schema: UserSchema}])],\n  controllers: [UsersController],\n  providers: [UsersService,   {\n    provide: APP_GUARD,\n    useClass: RolesGuard,\n  }],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                createMoodleUser\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findMoodleUser\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                put\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            changePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    changePassword(userDto: UserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userDto: UserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createMoodleUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createMoodleUser(mail: string, username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(userDto: UserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findMoodleUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findMoodleUser(mail: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            put\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    put(userDto: UserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { UserDTO } from './user.dto';\nimport { User,UserDocument } from './user.schema';\nimport * as bcrypt from 'bcryptjs';\n\n@Injectable()\nexport class UsersService {\n  constructor(@InjectModel('User') private userModel: Model) {\n\n  }\n\n  async put(userDto: UserDTO) {\n    console.log(\"[LOG] Put User:\")\n    console.log(userDto)\n    return this.userModel.findByIdAndUpdate(userDto._id,{'username':userDto.username, 'email':userDto.email, 'role':userDto.role}).exec(); //TODO: testn\n  }\n\n  //TODO: Check old Password??\n  async changePassword(userDto: UserDTO) {\n    var password = userDto.password;\n    const saltRounds = 10;\n    const hashedPassword = await bcrypt.hash(password,saltRounds);\n    userDto.password = await hashedPassword;\n    console.log(\"[LOG] Change Password User:\");\n    console.log(userDto);\n    return this.userModel.findByIdAndUpdate(userDto._id,{'password': userDto.password}).exec();\n  }\n\n  async delete(userDto: UserDTO) {\n    console.log(\"[LOG] Delete User:\")\n    console.log(userDto)\n    return this.userModel.findByIdAndRemove(userDto._id).exec();\n  }\n\n  async create(userDto: UserDTO): Promise {\n\n    var that = this;\n    var password = userDto.password\n    const saltRounds = 10;\n    const hashedPassword = await bcrypt.hash(password,saltRounds);\n    userDto.password = await hashedPassword;\n    userDto.role = \"user\"; //Erstmal User by default\n    console.log(\"[LOG] Save new User\")\n    console.log(userDto)\n    const createdUser = await new that.userModel(userDto);\n    return createdUser.save()\n  }\n\n  async createMoodleUser(mail:string,username:string) : Promise {\n    var that = this;\n    const userDto:any = {\n      username: username,\n      email: mail,\n      password: \"\",\n      role: \"moodleuser\"\n    }\n    const createdUser = await new that.userModel(userDto);\n    return createdUser.save()\n  }\n\n  async findMoodleUser(mail:string): Promise {\n    return this.userModel.findOne({'email': mail}).exec()\n  }\n\n  async findOne(username: string): Promise {\n    return this.userModel.findOne({'username': username}).exec();\n  }\n\n  async findAll(): Promise {\n    return this.userModel.find().exec();\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            variable\n            lti\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/moodleSessions.ts\n            \n            class\n            moodleSessions\n            \n                50 %\n                (4/8)\n            \n        \n        \n            \n                \n                src/auth/roles/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/roles/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/roles/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/plugins/basicExamplePlugin/basicExamplePluginMain.ts\n            \n            function\n            getOpenTests\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/plugins/basicExamplePlugin/basicExamplePluginMain.ts\n            \n            function\n            submit\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/plugins/codingPlugin/codingPluginInterfaces.ts\n            \n            interface\n            IFeedback\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/plugins/codingPlugin/codingPluginInterfaces.ts\n            \n            interface\n            ITestResult\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/plugins/codingPlugin/codingPluginMain.ts\n            \n            function\n            codingTests\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/plugins/codingPlugin/codingPluginMain.ts\n            \n            function\n            getNote\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/plugins/codingPlugin/codingPluginMain.ts\n            \n            function\n            getOpenTests\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/plugins/codingPlugin/codingPluginMain.ts\n            \n            function\n            submit\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/plugins/codingPlugin/codingPluginMain.ts\n            \n            variable\n            getBody\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/task/moodleSubmitHelper.ts\n            \n            class\n            moodleSubmitHelper\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/task/task.controller.ts\n            \n            controller\n            TaskController\n            \n                80 %\n                (8/10)\n            \n        \n        \n            \n                \n                src/task/task.schema.ts\n            \n            class\n            Task\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/task/task.schema.ts\n            \n            variable\n            TaskSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/task/task.service.ts\n            \n            injectable\n            TaskService\n            \n                27 %\n                (5/18)\n            \n        \n        \n            \n                \n                src/task/taskcollection.controller.ts\n            \n            controller\n            TaskCollectionController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/task/taskcollection.schema.ts\n            \n            class\n            TaskCollection\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/task/taskcollection.schema.ts\n            \n            interface\n            TaskInCollection\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/task/taskcollection.schema.ts\n            \n            variable\n            TaskCollectionSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/task/taskrunner.ts\n            \n            class\n            taskRunner\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/task/taskrunner.ts\n            \n            variable\n            pluginDirectoryPath\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/user.dto.ts\n            \n            class\n            UserDTO\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/user.schema.ts\n            \n            interface\n            taskAndNote\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/10)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.6.15\n        \n            @nestjs/config : ^0.5.0\n        \n            @nestjs/core : ^7.6.15\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/mongoose : ^7.2.4\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.6.15\n        \n            axios : ^0.21.1\n        \n            bcryptjs : ^2.4.3\n        \n            class-validator : ^0.12.2\n        \n            ims-lti : ^3.0.2\n        \n            lodash : ^4.17.21\n        \n            lodash.isnumber : ^3.0.3\n        \n            mongoose : ^5.12.2\n        \n            notevil : ^1.3.3\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.6\n        \n            uuid4 : ^2.0.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Role   (src/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/roles/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 Dozent\n                            \n                        \n                        \n                            \n                                Value : dozent\n                            \n                        \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            codingTests   (src/.../codingPluginMain.ts)\n                        \n                        \n                            getNote   (src/.../codingPluginMain.ts)\n                        \n                        \n                            getOpenTests   (src/.../codingPluginMain.ts)\n                        \n                        \n                            getOpenTests   (src/.../basicExamplePluginMain.ts)\n                        \n                        \n                            submit   (src/.../codingPluginMain.ts)\n                        \n                        \n                            submit   (src/.../basicExamplePluginMain.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    Main Run Function for Backend\n\n\n                \n            \n        \n    \n    src/plugins/codingPlugin/codingPluginMain.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            codingTests\n                        \n                        \n                    \n                \n            \n            \n                \ncodingTests(inputparams, tests, userInput)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    inputparams\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        inputparams (stored in dataforplugin)\n\n                                    \n                                \n                                \n                                    tests\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        open Tests created\n\n                                    \n                                \n                                \n                                    userInput\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        userInput to test\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IFeedback\n\n                    \n                    \n                        Feedback in IFeedback Format (Message + runned Test Feedback)\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNote\n                        \n                        \n                    \n                \n            \n            \n                \ngetNote(inputparams, tests, userInput)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    inputparams\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        inputparams (stored in dataforplugin)\n\n                                    \n                                \n                                \n                                    tests\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        closed Tests created\n\n                                    \n                                \n                                \n                                    userInput\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        userInput to test\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOpenTests\n                        \n                        \n                    \n                \n            \n            \n                \ngetOpenTests(data: any, tests: any, input: any)\n                \n            \n\n\n\n\n            \n                \n                    Basic getOpenTests For Plugin\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        dataForPlugin from Task\n\n                                    \n                                \n                                \n                                    tests\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        open tests for task\n\n                                    \n                                \n                                \n                                    input\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        userInput\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Return obj to Frontend Plugin\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            submit\n                        \n                        \n                    \n                \n            \n            \n                \nsubmit(data: any, tests: any, input: any)\n                \n            \n\n\n\n\n            \n                \n                    Basic getOpenTests For Plugin\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        dataForPlugin from Task\n\n                                    \n                                \n                                \n                                    tests\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        closed tests for task\n\n                                    \n                                \n                                \n                                    input\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        userInput\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        a note 0-100 for evaluation\n\n                    \n                \n            \n        \n    \n    src/plugins/basicExamplePlugin/basicExamplePluginMain.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            getOpenTests\n                        \n                        \n                    \n                \n            \n            \n                \ngetOpenTests(data: any, tests: any, input: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        dataForPlugin from createdPlugin (see Frontend)\n\n                                    \n                                \n                                \n                                    tests\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        open Tests from Frontend (In Format Input -> Expected Output)\n\n                                    \n                                \n                                \n                                    input\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Feedback for Open Tests\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            submit\n                        \n                        \n                    \n                \n            \n            \n                \nsubmit(data: any, tests: any, input: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        dataForPlugin from createdPlugin (see Frontend)\n\n                                    \n                                \n                                \n                                    tests\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        closed Tests from Frontend (In Format Input -> Expected Output)\n\n                                    \n                                \n                                \n                                    input\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        Note for the user submission (in 0-100 !!)\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDev Doku\nProject setup\nnpm installCompiles and hot-reloads for development\nnpm run startCompiles and minifies for production\nnpm run buildArchitektur\nWichtigste Routen im Überblick\nUser Doku\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TaskModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/moodleSessions.html":{"url":"classes/moodleSessions.html","title":"class - moodleSessions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  moodleSessions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/moodleSessions.ts\n        \n\n            \n                Description\n            \n            \n                Singleton Construct to store moodle Sessions from a User\nSessions a stored in a Map\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                instance\n                            \n                            \n                                    Private\n                                sessions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addSession\n                            \n                            \n                                    Static\n                                getInstance\n                            \n                            \n                                    Public\n                                getSession\n                            \n                            \n                                    Public\n                                removeSession\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Private\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/moodleSessions.ts:10\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            instance\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         moodleSessions\n\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/moodleSessions.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            sessions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/moodleSessions.ts:10\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addSession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addSession(key: string, session: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/moodleSessions.ts:35\n                \n            \n\n\n            \n                \n                    Adds a Session to the session manager\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Session Key (Json Token created by auth) to access session\n\n                                    \n                                \n                                \n                                    session\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Moodle Session (Obj from lti)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getInstance\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInstance()\n                \n            \n\n\n            \n                \n                    Defined in src/auth/moodleSessions.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         moodleSessions\n\n                    \n                    \n                        the Instance of the moodle Session managment system\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getSession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSession(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/moodleSessions.ts:55\n                \n            \n\n\n            \n                \n                    Gets A Session from the session Manager\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Key to access session to get\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Session (Lti Format )\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeSession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeSession(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/moodleSessions.ts:44\n                \n            \n\n\n            \n                \n                    Removes a session for the given key\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        key to access session to remove\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export default class moodleSessions {\n    private static instance: moodleSessions;\n    private sessions : Map //key, session\n\n    private constructor (){\n        this.sessions = new Map(); //key, session\n    }\n\n    /**\n     *\n     * @returns the Instance of the moodle Session managment system\n     */\n    public static getInstance():moodleSessions {\n        if(!moodleSessions.instance) {\n            moodleSessions.instance = new moodleSessions();\n        }\n\n        return moodleSessions.instance;\n    }\n\n    /**\n     *\n     * Adds a Session to the session manager\n     *\n     * @param key Session Key (Json Token created by auth) to access session\n     * @param session Moodle Session (Obj from lti)\n     */\n    public addSession(key : string, session : any) {\n        this.sessions.set(key,session)\n    }\n\n    /**\n     * Removes a session for the given key\n     *\n     * @param key key to access session to remove\n     */\n    public removeSession(key : string) {\n        this.sessions.delete(key)\n    }\n\n    /**\n     *\n     * Gets A Session from the session Manager\n     *\n     * @param key Key to access session to get\n     * @returns Session (Lti Format )\n     */\n    public getSession(key : string) {\n        return this.sessions.get(key)\n    }\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/moodleSubmitHelper.html":{"url":"classes/moodleSubmitHelper.html","title":"class - moodleSubmitHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  moodleSubmitHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/moodleSubmitHelper.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                submitNoteToMoodle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/task/moodleSubmitHelper.ts:1\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            submitNoteToMoodle\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    submitNoteToMoodle(session: any, grade: number)\n                \n            \n\n\n            \n                \n                    Defined in src/task/moodleSubmitHelper.ts:9\n                \n            \n\n\n            \n                \n                    Submits a note to a given moodle session\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    session\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        moodle session to submit to\n\n                                    \n                                \n                                \n                                    grade\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        grade (in 0-100)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export default class moodleSubmitHelper {\n    constructor() {}\n\n    /**\n     * Submits a note to a given moodle session\n     * @param session moodle session to submit to\n     * @param grade grade (in 0-100)\n     */\n    public submitNoteToMoodle(session:any,grade:number) {\n    //Grade must be rounded as moodle expects 0-1\n    session.outcome_service.send_replace_result(grade/100, (err, isValid) => {\n      if (!isValid) {\n        if(!session.outcome_service) {\n          console.log(\"[LOG] No Outcome Service in session!\")\n        }\n        console.log(\"[LOG] INVALID Grade:\")\n        console.log(err)\n\n        return \"INVALID GRADE \"+err\n      }\n      console.log(\"[LOG] Note submitted: \",grade)\n      return ('OK')\n      })\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_TaskModule\n\n\n\ncluster_TaskModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nTaskModule\n\nTaskModule\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nTaskService\n\nTaskService\n\nTaskModule -->\n\nTaskService->TaskModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/taskAndNote.html":{"url":"interfaces/taskAndNote.html","title":"interface - taskAndNote","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  taskAndNote\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.schema.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        note\n                                \n                                \n                                        taskID\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        note\n                                    \n                                \n                                \n                                    \n                                        note:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        taskID\n                                    \n                                \n                                \n                                    \n                                        taskID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type UserDocument = User & Document;\n\nexport interface taskAndNote {\n  taskID: string,\n  note: number\n}\n@Schema()\nexport class User {\n\n  @Prop()\n  name: string;\n\n  @Prop()\n  username: string;\n\n  @Prop()\n  email: string;\n\n  @Prop()\n  password: string;\n\n  @Prop()\n  solvedTasksOrCollections: Map;\n\n  //;\n\n  @Prop()\n  role: string;\n\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/taskRunner.html":{"url":"classes/taskRunner.html","title":"class - taskRunner","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  taskRunner\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/taskrunner.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                getPlugin\n                            \n                            \n                                    Async\n                                runTests\n                            \n                            \n                                    Async\n                                submitTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/task/taskrunner.ts:5\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            getPlugin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPlugin(pluginCode: string)\n                \n            \n\n\n            \n                \n                    Defined in src/task/taskrunner.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pluginCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        pluginCode (like Name) for created Plugin (must match in frontend and backend)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        Import of the given file (if it exists) or null (if it doesnt exist)\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            runTests\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    runTests(task: any, input: any)\n                \n            \n\n\n            \n                \n                    Defined in src/task/taskrunner.ts:16\n                \n            \n\n\n            \n                \n                    Runs the Tests for a Plugin and returns the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    task\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        raw Task created by plugin developer\n\n                                    \n                                \n                                \n                                    input\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        raw input from frontend\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        raw open tests result from plugin openTests method\nor null if the plugin is not found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            submitTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    submitTask(task: any, input: any)\n                \n            \n\n\n            \n                \n                    Defined in src/task/taskrunner.ts:33\n                \n            \n\n\n            \n                \n                    Submit a Task for a Plugin\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    task\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        raw Task created by plugin developer\n\n                                    \n                                \n                                \n                                    input\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        raw input from frontend\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        raw feedback result from plugin openTests method\nor null if the plugin is not found\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as plugins from '../plugins/plugins.json'\n//Path to Plugin Directory (this is not in the config.json because the directory path should not be changed)\nconst pluginDirectoryPath = \"../plugins/\"\n\nexport default class taskRunner {\n  constructor() {}\n\n  /**\n   *  Runs the Tests for a Plugin and returns the result\n   *\n   * @param task raw Task created by plugin developer\n   * @param input raw input from frontend\n   * @returns raw open tests result from plugin openTests method\n   *          or null if the plugin is not found\n   */\n  async runTests(task:any,input:any):Promise {\n    console.log(\"[LOG] Running Tests:\",task.openTests,\"for data:\",input)\n    const plugin = await this.getPlugin(task.pluginCode)\n    if(plugin) {\n      const testResult = plugin.default.getOpenTests(task.dataForPlugin,task.openTests,input)\n      return testResult\n    } else return null\n  }\n\n  /**\n   *  Submit a Task for a Plugin\n   *\n   * @param task raw Task created by plugin developer\n   * @param input raw input from frontend\n   * @returns raw feedback result from plugin openTests method\n   *          or null if the plugin is not found\n   */\n  async submitTask(task:any,input:any):Promise {\n      console.log(\"[LOG] Submitting:\",task.closedTests,\"for data:\",input)\n      const plugin = await this.getPlugin(task.pluginCode)\n      if(plugin) {\n        const submittedResult = plugin.default.submit(task.dataForPlugin,task.closedTests,input)\n        return submittedResult\n      } else return null\n\n  }\n\n  /**\n   *\n   * @param pluginCode pluginCode (like Name) for created Plugin (must match in frontend and backend)\n   * @returns Import of the given file (if it exists) or null (if it doesnt exist)\n   *\n   */\n  private async getPlugin(pluginCode:string) {\n    let pluginFileName:string\n    let pluginDirectory:string\n    plugins.forEach(plugin=> {\n      if(plugin.name == pluginCode) {\n        pluginFileName=plugin.mainFile\n        pluginDirectory=plugin.directory\n        const pathToFile = pluginDirectoryPath+pluginDirectory+'/'+pluginFileName\n        return import(pathToFile)\n      }\n    })\n    return null\n\n  }\n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TaskCollectionDocument   (src/.../taskcollection.schema.ts)\n                        \n                        \n                            TaskDocument   (src/.../task.schema.ts)\n                        \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/task/taskcollection.schema.ts\n    \n    \n        \n            \n                \n                    \n                    TaskCollectionDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/task/task.schema.ts\n    \n    \n        \n            \n                \n                    \n                    TaskDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/users/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            getBody   (src/.../codingPluginMain.ts)\n                        \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                        \n                            lti   (src/.../auth.service.ts)\n                        \n                        \n                            pluginDirectoryPath   (src/.../taskrunner.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            TaskCollectionSchema   (src/.../taskcollection.schema.ts)\n                        \n                        \n                            TaskSchema   (src/.../task.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/plugins/codingPlugin/codingPluginMain.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getBody\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (string) => string.substring(string.indexOf(\"{\") + 1,string.lastIndexOf(\"}\"))\n                        \n                    \n\n\n            \n        \n\n    src/auth/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConstants\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    secret: 'secretKey',\n}\n                        \n                    \n\n\n            \n        \n\n    src/auth/auth.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            lti\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require(\"ims-lti\")\n                        \n                    \n\n\n            \n        \n\n    src/task/taskrunner.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            pluginDirectoryPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"../plugins/\"\n                        \n                    \n\n\n            \n        \n\n    src/auth/roles/roles.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ROLES_KEY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'roles'\n                        \n                    \n\n\n            \n        \n\n    src/task/taskcollection.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TaskCollectionSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(TaskCollection)\n                        \n                    \n\n\n            \n        \n\n    src/task/task.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TaskSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Task)\n                        \n                    \n\n\n            \n        \n\n    src/users/user.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UserSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(User)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
